import{_ as t,c as a,a2 as o,o as r}from"./chunks/framework.H8_ecXae.js";const i="/cursos/assets/image8.DhQ_3gXr.png",n="/cursos/assets/image9.DL6ApxKz.png",s="/cursos/assets/image10.BNk2d5T3.png",c="/cursos/assets/image12.BL-q_AGO.png",l="/cursos/assets/image13.CSK5J5G7.png",q=JSON.parse('{"title":"Artificial Intelligence Markup Language","description":"","frontmatter":{},"headers":[],"relativePath":"chatbotbook/3_artificial_intelligence_markup_language.md","filePath":"chatbotbook/3_artificial_intelligence_markup_language.md"}'),d={name:"chatbotbook/3_artificial_intelligence_markup_language.md"};function p(g,e,m,u,f,h){return r(),a("div",null,e[0]||(e[0]=[o('<h1 id="artificial-intelligence-markup-language" tabindex="-1">Artificial Intelligence Markup Language <a class="header-anchor" href="#artificial-intelligence-markup-language" aria-label="Permalink to &quot;Artificial Intelligence Markup Language&quot;">​</a></h1><p>O Artificial Intelligence Markup Language (AIML) é uma especificação baseada em XML, proposta por [@Wallace2009], destinada à programação de agentes conversacionais, comumente denominados chatbots. A concepção da linguagem prioriza o minimalismo, característica que simplifica o processo de criação de bases de conhecimento por indivíduos sem experiência prévia em programação [@Wallace2009]. A arquitetura fundamental de um interpretador AIML genérico é ilustrada na Figura <a href="#fig:interpretador">3.1</a>{reference-type=&quot;ref&quot; reference=&quot;fig:interpretador&quot;}.</p><figure id="fig:interpretador"><p><img src="'+i+'" style="width:80.0%;" alt="image"> <span id="fig:interpretador" data-label="fig:interpretador"></span></p><p>Adaptado de <span class="citation" data-cites="Silva2007"></span></p><figcaption>Interpretador AIML arquitetura.</figcaption></figure><p>A técnica central empregada pelo AIML é a correspondência de padrões (<em>pattern matching</em>). Este método é amplamente utilizado no desenvolvimento de chatbots, particularmente em sistemas orientados a perguntas e respostas [@Abdul-Kader2015]. Uma das metas de projeto do AIML é possibilitar a fusão de bases de conhecimento de múltiplos chatbots especializados em domínios distintos. Teoricamente, um interpretador poderia agregar essas bases, eliminando automaticamente categorias redundantes para formar um <em>chatbot</em> mais abrangente [@Wallace2000].</p><p>AIML é frequentemente associado aos chatbots de terceira geração [@Maria2010] e estima-se sua adoção em mais de 50.000 implementações em diversos idiomas. Extensões da linguagem foram propostas, como o iAIML, que introduziu novas <em>tags</em> e incorporou o conceito de intenção com base nos princípios da Teoria da Análise da Conversação (TAC) [@Neves2005]. Adicionalmente, ferramentas baseadas na Web foram desenvolvidas para apoiar a construção de bases de conhecimento AIML [@Krassmann2017]. Um exemplo proeminente é o <em>chatbot</em> ALICE, cuja implementação em AIML compreendia aproximadamente 16.000 categorias, cada uma potencialmente contendo múltiplas <em>tags</em> XML aninhadas [@Wallace2000]. Uma representação visual desta estrutura de conhecimento é apresentada na Figura <a href="#fig:representacaovisual">3.2</a>{reference-type=&quot;ref&quot; reference=&quot;fig:representacaovisual&quot;}.</p><figure id="fig:representacaovisual"><p><img src="'+n+'" style="width:70.0%;" alt="image"> <span id="fig:representacaovisual" data-label="fig:representacaovisual"></span></p><p>Retirado de <span class="citation" data-cites="Wallace2003"></span></p><figcaption>Representação visual da base de conhecimento do chatbot ALICE.</figcaption></figure><p>[@Wallace2000] estabeleceu analogias entre o funcionamento de interpretadores AIML e a teoria do Raciocínio Baseado em Casos (RBC). Nessa perspectiva, as categorias AIML funcionam como &quot;casos&quot;, onde o algoritmo identifica o padrão que melhor se alinha à entrada do usuário. Cada categoria estabelece um vínculo direto entre um padrão de estímulo e um modelo de resposta. Consequentemente, chatbots AIML inserem-se na tradição da robótica minimalista, reativa ou de estímulo-resposta [@Wallace2000], conforme esquematizado na Figura <a href="#fig:teoriaestimulo">3.3</a>{reference-type=&quot;ref&quot; reference=&quot;fig:teoriaestimulo&quot;}. Vale notar que a própria técnica de RBC já foi integrada a interpretadores AIML como um mecanismo para consultar fontes de dados externas e expandir a base de conhecimento do agente [@Kraus2008].</p><figure id="fig:teoriaestimulo"><p><img src="'+s+`" style="width:70.0%;" alt="image"> <span id="fig:teoriaestimulo" data-label="fig:teoriaestimulo"></span></p><p>Retirado de <span class="citation" data-cites="Lima2017"></span></p><figcaption>Teoria estímulo-resposta aplicada no AIML</figcaption></figure><p>Os chatbots que utilizam AIML são classificados como sistemas &quot;baseados em recuperação&quot; (retrieval-based). Tais modelos operam a partir de um repositório de respostas predefinidas, selecionando a mais apropriada com base na entrada do usuário e no contexto conversacional, guiando assim o fluxo da interação. Esta abordagem é frequentemente empregada na construção de chatbots destinados a operar em domínios de conhecimento restritos [@Borah2019].</p><p>A Figura <a href="#fig:exemplodeumabase">3.4</a>{reference-type=&quot;ref&quot; reference=&quot;fig:exemplodeumabase&quot;} demonstra a estrutura elementar de um arquivo AIML. A <em>tag</em> <code>&lt;category&gt;</code> encapsula a unidade básica de conhecimento. Internamente, a <em>tag</em> <code>&lt;pattern&gt;</code> define o padrão de entrada a ser reconhecido (no exemplo, o caractere curinga <code>*</code>, que corresponde a qualquer entrada), enquanto a <em>tag</em> <code>&lt;template&gt;</code> contém a resposta associada. No exemplo ilustrado, o <em>chatbot</em> responderia &quot;Hello!&quot; a qualquer interação. Uma visão abstrata da árvore de conhecimento resultante pode ser observada na Figura <a href="#fig:representacaovisualabstrata">3.5</a>{reference-type=&quot;ref&quot; reference=&quot;fig:representacaovisualabstrata&quot;}. O AIML padrão suporta transições baseadas primariamente em correspondência de padrões, uma limitação inerente, embora extensões específicas de interpretadores possam permitir a integração de outras técnicas de processamento.</p><figure id="fig:exemplodeumabase"><pre><code>        &lt;aiml&gt;
        &lt;category&gt;
            &lt;pattern&gt;*&lt;/pattern&gt;
            &lt;template&gt;Hello!&lt;/template&gt;
        &lt;/category&gt;
        &lt;/aiml</code></pre><p>Retirado de <span class="citation" data-cites="Wallace2000"></span></p><figcaption>Exemplo de uma base de conhecimento em AIML</figcaption></figure><figure id="fig:representacaovisualabstrata"><p><img src="`+c+'" style="width:80.0%;" alt="image"> <span id="fig:representacaovisualabstrata" data-label="fig:representacaovisualabstrata"></span></p><p>Retirado de <a href="https://www.pandorabots.com/docs/aiml-fundamentals/" class="uri">https://www.pandorabots.com/docs/aiml-fundamentals/</a></p><figcaption>Representação visual abstrata de uma base de conhecimento AIML</figcaption></figure><p>O profissional responsável pela criação, manutenção e curadoria da base de conhecimento de um <em>chatbot</em> AIML é denominado <em>botmaster</em> [@Wallace2000]. Suas atribuições englobam a edição da base (frequentemente via ferramentas auxiliares), a análise de logs de diálogo para identificar padrões de interação e a subsequente criação ou refino de respostas. Este papel pode ser exercido por indivíduos com diferentes perfis, incluindo <em>webmasters</em>, desenvolvedores, redatores, engenheiros ou outros interessados na construção de chatbots [@Wallace2000].</p><p>Algumas implementações de interpretadores AIML podem incorporar capacidades rudimentares de compreensão semântica através do <em>Resource Description Framework</em> (RDF)[^1]. O RDF é um padrão W3C para representação de informações na Web, usualmente por meio de triplas (sujeito-predicado-objeto) que descrevem relações entre entidades. No contexto AIML, RDF pode ser utilizado para armazenar e consultar fatos. Contudo, mesmo com tais adições, as capacidades linguísticas permanecem aquém da complexidade e do potencial gerativo da linguagem humana, conforme descrito por [@chomsky2002syntactic].</p><p>Embora [@Hohn2019] argumente que o AIML padrão carece de um conceito explícito de &quot;intenção&quot; (<em>intent</em>), similar ao encontrado em plataformas de <em>Natural Language Understanding</em> (NLU), é possível emular o reconhecimento de intenções. Isso é tipicamente alcançado definindo categorias que representam &quot;formas canônicas&quot; ou &quot;padrões atômicos&quot; para uma intenção específica[^2]. Variações de entrada (e.g., &quot;oi&quot;, &quot;olá&quot;) podem ser mapeadas para uma categoria canônica (e.g., &quot;saudação&quot;) usando a <em>tag</em> <code>&lt;srai&gt;</code> (<em>Symbolic Reduction Artificial Intelligence</em>), que redireciona o fluxo de processamento (ver Figura <a href="#fig:sodatagsrai">3.6</a>{reference-type=&quot;ref&quot; reference=&quot;fig:sodatagsrai&quot;}). Dessa forma, um <em>chatbot</em> AIML pode gerenciar intenções distintas dentro de seu domínio, como realizar um pedido ou verificar o status de entrega.</p><figure id="fig:sodatagsrai"><p><img src="'+l+`" style="width:50.0%;" alt="image"> <span id="fig:sodatagsrai" data-label="fig:sodatagsrai"></span></p><p>Retirado de <span class="citation" data-cites="DeGasperis2013"></span></p><figcaption>Uso da tag <code>&lt;srai&gt;</code></figcaption></figure><p>chatbots baseados em AIML têm obtido sucesso significativo em competições como o Prêmio Loebner. Notavelmente, o <em>chatbot</em> Mitsuku[^3], desenvolvido por Steve Worswick, conquistou múltiplos títulos recentes[^4], seguindo vitórias anteriores do ALICE. [@Wallace2000].</p><p>Adicionalmente, Mitsuku foi classificado em primeiro lugar numa análise comparativa envolvendo oito chatbots [@Sharma2020]. Nesse estudo, que avaliou atributos conversacionais com base em um conjunto padronizado de perguntas, o Google Assistant obteve a segunda posição, seguido pela Siri em terceiro. O <em>chatbot</em> ALICE. alcançou a quarta posição, enquanto o ELIZA ficou na última colocação entre os sistemas comparados [@Sharma2020].</p><h2 id="tags-do-aiml-1-0-explicacao-e-exemplos" tabindex="-1">Tags do AIML 1.0: Explicação e Exemplos <a class="header-anchor" href="#tags-do-aiml-1-0-explicacao-e-exemplos" aria-label="Permalink to &quot;Tags do AIML 1.0: Explicação e Exemplos&quot;">​</a></h2><p>Esta seção descreve as principais tags do AIML, versão 1.0, com explicações e exemplos.</p><h5 id="aiml" tabindex="-1"><code>&lt;aiml&gt;</code> <a class="header-anchor" href="#aiml" aria-label="Permalink to &quot;\`&lt;aiml&gt;\`&quot;">​</a></h5><p><strong>Descrição:</strong> Tag raiz que engloba todo o conteúdo AIML.</p><pre><code>    &lt;aiml version=&quot;1.0&quot;&gt;
        &lt;!-- Categorias aqui --&gt;
    &lt;/aiml&gt;
</code></pre><h5 id="category" tabindex="-1"><code>&lt;category&gt;</code> <a class="header-anchor" href="#category" aria-label="Permalink to &quot;\`&lt;category&gt;\`&quot;">​</a></h5><p><strong>Descrição:</strong> Unidade básica de conhecimento, contendo um padrão e uma resposta.</p><pre><code>    &lt;category&gt;
        &lt;pattern&gt;OLÁ&lt;/pattern&gt;
        &lt;template&gt;Oi! Como posso ajudar você hoje?&lt;/template&gt;
    &lt;/category&gt;
</code></pre><h5 id="pattern" tabindex="-1"><code>&lt;pattern&gt;</code> <a class="header-anchor" href="#pattern" aria-label="Permalink to &quot;\`&lt;pattern&gt;\`&quot;">​</a></h5><p><strong>Descrição:</strong> Define o padrão de entrada do usuário, com curingas como <code>*</code> e <code>_</code>.</p><pre><code>    &lt;category&gt;
        &lt;pattern&gt;EU GOSTO DE *&lt;/pattern&gt;
        &lt;template&gt;Que bom que você gosta de &lt;star/&gt;!&lt;/template&gt;
    &lt;/category&gt;
</code></pre><h5 id="template" tabindex="-1"><code>&lt;template&gt;</code> <a class="header-anchor" href="#template" aria-label="Permalink to &quot;\`&lt;template&gt;\`&quot;">​</a></h5><p><strong>Descrição:</strong> Define a resposta do bot ao padrão correspondente.</p><pre><code>    &lt;category&gt;
        &lt;pattern&gt;QUAL É O SEU NOME&lt;/pattern&gt;
        &lt;template&gt;Meu nome é neo chatbot.&lt;/template&gt;
    &lt;/category&gt; 
</code></pre><h5 id="star" tabindex="-1"><code>&lt;star/&gt;</code> <a class="header-anchor" href="#star" aria-label="Permalink to &quot;\`&lt;star/&gt;\`&quot;">​</a></h5><p><strong>Descrição:</strong> Captura o conteúdo do curinga <code>*</code> ou <code>_</code>.</p><pre><code>    &lt;category&gt;
        &lt;pattern&gt;MEU NOME É *&lt;/pattern&gt;
        &lt;template&gt;Olá, &lt;star/&gt;!&lt;/template&gt;
    &lt;/category&gt;
</code></pre><h5 id="that" tabindex="-1"><code>&lt;that&gt;</code> <a class="header-anchor" href="#that" aria-label="Permalink to &quot;\`&lt;that&gt;\`&quot;">​</a></h5><p><strong>Descrição:</strong> Considera a última resposta do bot para decidir a próxima.</p><pre><code>&lt;category&gt;
    &lt;pattern&gt;SIM&lt;/pattern&gt;
    &lt;that&gt;Você gosta de programar?&lt;/that&gt;
    &lt;template&gt;Ótimo! Qual linguagem você prefere?&lt;/template&gt;
&lt;/category&gt;
</code></pre><h5 id="topic" tabindex="-1"><code>&lt;topic&gt;</code> <a class="header-anchor" href="#topic" aria-label="Permalink to &quot;\`&lt;topic&gt;\`&quot;">​</a></h5><p><strong>Descrição:</strong> Define um contexto ou tópico para categorias.</p><pre><code>&lt;category&gt;
  &lt;pattern&gt;VAMOS FALAR SOBRE ESPORTE&lt;/pattern&gt;
  &lt;template&gt;Ok! &lt;topic name=&quot;esporte&quot;/&gt;&lt;/template&gt;
&lt;/category&gt;
</code></pre><h5 id="random-e-li" tabindex="-1"><code>&lt;random&gt;</code> e <code>&lt;li&gt;</code> <a class="header-anchor" href="#random-e-li" aria-label="Permalink to &quot;\`&lt;random&gt;\` e \`&lt;li&gt;\`&quot;">​</a></h5><p><strong>Descrição:</strong> Escolhe aleatoriamente uma resposta de uma lista.</p><pre><code>&lt;category&gt;
  &lt;pattern&gt;COMO ESTÁ O TEMPO&lt;/pattern&gt;
  &lt;template&gt;
    &lt;random&gt;
      &lt;li&gt;Está ensolarado!&lt;/li&gt;
      &lt;li&gt;Está chovendo.&lt;/li&gt;
    &lt;/random&gt;
  &lt;/template&gt;
&lt;/category&gt;
</code></pre><h5 id="condition" tabindex="-1"><code>&lt;condition&gt;</code> <a class="header-anchor" href="#condition" aria-label="Permalink to &quot;\`&lt;condition&gt;\`&quot;">​</a></h5><p><strong>Descrição:</strong> Adiciona lógica condicional baseada em variáveis.</p><pre><code>&lt;category&gt;
  &lt;pattern&gt;COMO EU ESTOU&lt;/pattern&gt;
  &lt;template&gt;
    &lt;condition name=&quot;humor&quot;&gt;
      &lt;li value=&quot;feliz&quot;&gt;Você está bem!&lt;/li&gt;
      &lt;li&gt;Não sei ainda!&lt;/li&gt;
    &lt;/condition&gt;
  &lt;/template&gt;
&lt;/category&gt;
</code></pre><h5 id="set-e-get" tabindex="-1"><code>&lt;set&gt;</code> e <code>&lt;get&gt;</code> <a class="header-anchor" href="#set-e-get" aria-label="Permalink to &quot;\`&lt;set&gt;\` e \`&lt;get&gt;\`&quot;">​</a></h5><p><strong>Descrição:</strong> Define e recupera variáveis.</p><pre><code>    &lt;category&gt;
        &lt;pattern&gt;MEU NOME É *&lt;/pattern&gt;
        &lt;template&gt;&lt;set name=&quot;nome&quot;&gt;&lt;star/&gt;&lt;/set&gt;Olá, &lt;get name=&quot;nome&quot;/&gt;!&lt;/template&gt;
    &lt;/category&gt;
</code></pre><h5 id="srai" tabindex="-1"><code>&lt;srai&gt;</code> <a class="header-anchor" href="#srai" aria-label="Permalink to &quot;\`&lt;srai&gt;\`&quot;">​</a></h5><p><strong>Descrição:</strong> Redireciona a entrada para outro padrão.</p><pre><code>    &lt;category&gt;
        &lt;pattern&gt;OI&lt;/pattern&gt;
        &lt;template&gt;&lt;srai&gt;OLÁ&lt;/srai&gt;&lt;/template&gt;
    &lt;/category&gt;
</code></pre><h5 id="think" tabindex="-1"><code>&lt;think&gt;</code> <a class="header-anchor" href="#think" aria-label="Permalink to &quot;\`&lt;think&gt;\`&quot;">​</a></h5><p><strong>Descrição:</strong> Executa ações sem exibir o conteúdo.</p><pre><code>    &lt;category&gt;
        &lt;pattern&gt;EU SOU TRISTE&lt;/pattern&gt;
        &lt;template&gt;&lt;think&gt;&lt;set name=&quot;humor&quot;&gt;triste&lt;/set&gt;&lt;/think&gt;Sinto muito!&lt;/template&gt;
    &lt;/category&gt;
</code></pre><h5 id="person-person2-gender" tabindex="-1"><code>&lt;person&gt;</code>, <code>&lt;person2&gt;</code>, <code>&lt;gender&gt;</code> <a class="header-anchor" href="#person-person2-gender" aria-label="Permalink to &quot;\`&lt;person&gt;\`, \`&lt;person2&gt;\`, \`&lt;gender&gt;\`&quot;">​</a></h5><p><strong>Descrição:</strong> Transforma pronomes ou ajusta gênero.</p><pre><code>    &lt;category&gt;
        &lt;pattern&gt;EU TE AMO&lt;/pattern&gt;
        &lt;template&gt;&lt;person&gt;&lt;star/&gt;&lt;/person&gt; ama você também!&lt;/template&gt;
    &lt;/category&gt;
</code></pre><h5 id="formal-uppercase-lowercase" tabindex="-1"><code>&lt;formal&gt;</code>, <code>&lt;uppercase&gt;</code>, <code>&lt;lowercase&gt;</code> <a class="header-anchor" href="#formal-uppercase-lowercase" aria-label="Permalink to &quot;\`&lt;formal&gt;\`, \`&lt;uppercase&gt;\`, \`&lt;lowercase&gt;\`&quot;">​</a></h5><p><strong>Descrição:</strong> Formata texto (capitaliza, maiúsculas, minúsculas).</p><pre><code>&lt;category&gt;
  &lt;pattern&gt;MEU NOME É joão&lt;/pattern&gt;
  &lt;template&gt;Olá, &lt;formal&gt;&lt;star/&gt;&lt;/formal&gt;!&lt;/template&gt;
&lt;/category&gt;
</code></pre><h5 id="sentence" tabindex="-1"><code>&lt;sentence&gt;</code> <a class="header-anchor" href="#sentence" aria-label="Permalink to &quot;\`&lt;sentence&gt;\`&quot;">​</a></h5><p><strong>Descrição:</strong> Formata como frase (primeira letra maiúscula, ponto final).</p><pre><code>&lt;category&gt;
  &lt;pattern&gt;oi&lt;/pattern&gt;
  &lt;template&gt;&lt;sentence&gt;&lt;star/&gt;&lt;/sentence&gt;&lt;/template&gt;
&lt;/category&gt;
</code></pre>`,65)]))}const v=t(d,[["render",p]]);export{q as __pageData,v as default};
