import{_ as a}from"./chunks/colab-badge.CZNv0YKc.js";import{_ as o,c as s,a2 as n,o as i}from"./chunks/framework.H8_ecXae.js";const h=JSON.parse('{"title":"Usando chatGPT com LangChain","description":"","frontmatter":{},"headers":[],"relativePath":"chatbotbook/9_usando_chatgpt_com_langchain.md","filePath":"chatbotbook/9_usando_chatgpt_com_langchain.md"}'),r={name:"chatbotbook/9_usando_chatgpt_com_langchain.md"};function t(d,e,c,m,l,u){return i(),s("div",null,e[0]||(e[0]=[n('<h1 id="usando-chatgpt-com-langchain" tabindex="-1">Usando chatGPT com LangChain <a class="header-anchor" href="#usando-chatgpt-com-langchain" aria-label="Permalink to &quot;Usando chatGPT com LangChain&quot;">​</a></h1><p>LangChain é uma biblioteca de software de código aberto projetada para simplificar a interação com Large Language Models (LLMs) e construir aplicativos de processamento de linguagem natural robustos. Ele fornece uma camada de abstração de alto nível sobre as complexidades de trabalhar diretamente com modelos de linguagem, tornando mais acessível a criação de aplicativos de compreensão e geração de linguagem.</p><h2 id="por-que-usar-langchain" tabindex="-1">Por que usar LangChain? <a class="header-anchor" href="#por-que-usar-langchain" aria-label="Permalink to &quot;Por que usar LangChain?&quot;">​</a></h2><p>Trabalhar com LLMs pode ser complexo devido à sua natureza sofisticada e aos requisitos de recursos computacionais. LangChain lida com muitos detalhes complexos em segundo plano, permitindo que os desenvolvedores se concentrem na construção de aplicativos de linguagem eficazes. Aqui estão algumas vantagens do uso do LangChain:</p><ul><li><p>Simplicidade: LangChain oferece uma API simples e intuitiva, ocultando os detalhes complexos de interação com LLMs. Ele abstrai as nuances de carregar modelos, gerenciar recursos computacionais e executar previsões.</p></li><li><p>Flexibilidade: A biblioteca suporta vários frameworks de deep learning, como TensorFlow e PyTorch, e pode ser integrada a diferentes LLMs. Isso oferece aos desenvolvedores a flexibilidade de escolher as ferramentas e modelos que melhor atendem às suas necessidades.</p></li><li><p>Extensibilidade: LangChain é projetado para ser extensível, permitindo que os usuários criem seus próprios componentes personalizados. Você pode adicionar novos modelos, adaptar o processamento de texto ou desenvolver recursos específicos do domínio para atender aos requisitos exclusivos do seu aplicativo.</p></li><li><p>Comunidade e suporte: LangChain tem uma comunidade ativa de desenvolvedores e pesquisadores que contribuem para o projeto. A documentação abrangente, tutoriais e suporte da comunidade tornam mais fácil começar e navegar por quaisquer desafios que surgirem durante o desenvolvimento.</p></li></ul><h2 id="arquitetura-do-langchain" tabindex="-1">Arquitetura do LangChain <a class="header-anchor" href="#arquitetura-do-langchain" aria-label="Permalink to &quot;Arquitetura do LangChain&quot;">​</a></h2><p>A arquitetura do LangChain pode ser entendida em três componentes principais:</p><p>Camada de Abstração: Esta camada fornece uma interface simples e unificada para interagir com diferentes LLMs. Ele abstrai as complexidades de carregar, inicializar e executar previsões em modelos, oferecendo uma API consistente independentemente do modelo subjacente.</p><p>Camada de Processamento de Texto: O LangChain inclui ferramentas robustas para processamento de texto, incluindo tokenização, análise sintática, reconhecimento de entidades nomeadas (NER) e muito mais. Esta camada prepara os dados de entrada e saída para que possam ser processados de forma eficaz pelos modelos de linguagem.</p><p>Camada de Modelo: Aqui é onde os próprios LLMs residem. O LangChain suporta uma variedade de modelos de linguagem, desde modelos pré-treinados de uso geral até modelos personalizados específicos de domínio. Esta camada lida com a execução de previsões, gerenciamento de recursos computacionais e interação com as APIs dos modelos.</p><h2 id="exemplo-basico-consultando-um-llm" tabindex="-1">Exemplo Básico: Consultando um LLM <a class="header-anchor" href="#exemplo-basico-consultando-um-llm" aria-label="Permalink to &quot;Exemplo Básico: Consultando um LLM&quot;">​</a></h2><p>Vamos ver um exemplo simples de como usar o LangChain para consultar um LLM e obter uma resposta. Neste exemplo, usaremos o gpt-4o-mini da OpenAI, para responder a uma pergunta.</p><p>Primeiro, importe as bibliotecas necessárias e configure o cliente LangChain. Em seguida, carregue o modelo de linguagem desejado. Agora, você pode usar o modelo para fazer uma consulta. Vamos perguntar quem é o presidente do Brasil.</p><p><a href="https://colab.research.google.com/github/giseldo/chatbotbook_v2/blob/main/notebook/langchain.ipynb" target="_blank" rel="noreferrer"><img src="'+a+`" alt="image"></a></p><pre><code>    from langchain.chat_models import init_chat_model
    import os

    OPENAI_API_KEY = os.environ.get(&quot;OPENAI_API_KEY&quot;)

    model = init_chat_model(&quot;gpt-4o-mini&quot;, model_provider=&quot;openai&quot;, 
        openai_api_key=OPENAI_API_KEY)

    response = model.invoke([
        {&quot;role&quot;:&quot;user&quot;, &quot;content&quot;: &quot;quem é o presidente do Brasil?&quot;}
    ])

    print(response.content)

    print(response.text)
</code></pre><p>Este exemplo básico demonstra a simplicidade de usar o LangChain para interagir com LLMs. No entanto, o LangChain oferece muito mais recursos e funcionalidades para construir aplicativos de chatbot mais robustos.</p>`,16)]))}const b=o(r,[["render",t]]);export{h as __pageData,b as default};
