{
  "version": 3,
  "sources": ["../../../../node_modules/layout-base/layout-base.js", "../../../../node_modules/cose-base/cose-base.js", "../../../../node_modules/cytoscape-cose-bilkent/cytoscape-cose-bilkent.js"],
  "sourcesContent": ["(function webpackUniversalModuleDefinition(root, factory) {\r\n\tif(typeof exports === 'object' && typeof module === 'object')\r\n\t\tmodule.exports = factory();\r\n\telse if(typeof define === 'function' && define.amd)\r\n\t\tdefine([], factory);\r\n\telse if(typeof exports === 'object')\r\n\t\texports[\"layoutBase\"] = factory();\r\n\telse\r\n\t\troot[\"layoutBase\"] = factory();\r\n})(this, function() {\r\nreturn /******/ (function(modules) { // webpackBootstrap\r\n/******/ \t// The module cache\r\n/******/ \tvar installedModules = {};\r\n/******/\r\n/******/ \t// The require function\r\n/******/ \tfunction __webpack_require__(moduleId) {\r\n/******/\r\n/******/ \t\t// Check if module is in cache\r\n/******/ \t\tif(installedModules[moduleId]) {\r\n/******/ \t\t\treturn installedModules[moduleId].exports;\r\n/******/ \t\t}\r\n/******/ \t\t// Create a new module (and put it into the cache)\r\n/******/ \t\tvar module = installedModules[moduleId] = {\r\n/******/ \t\t\ti: moduleId,\r\n/******/ \t\t\tl: false,\r\n/******/ \t\t\texports: {}\r\n/******/ \t\t};\r\n/******/\r\n/******/ \t\t// Execute the module function\r\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\r\n/******/\r\n/******/ \t\t// Flag the module as loaded\r\n/******/ \t\tmodule.l = true;\r\n/******/\r\n/******/ \t\t// Return the exports of the module\r\n/******/ \t\treturn module.exports;\r\n/******/ \t}\r\n/******/\r\n/******/\r\n/******/ \t// expose the modules object (__webpack_modules__)\r\n/******/ \t__webpack_require__.m = modules;\r\n/******/\r\n/******/ \t// expose the module cache\r\n/******/ \t__webpack_require__.c = installedModules;\r\n/******/\r\n/******/ \t// identity function for calling harmony imports with the correct context\r\n/******/ \t__webpack_require__.i = function(value) { return value; };\r\n/******/\r\n/******/ \t// define getter function for harmony exports\r\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\r\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\r\n/******/ \t\t\tObject.defineProperty(exports, name, {\r\n/******/ \t\t\t\tconfigurable: false,\r\n/******/ \t\t\t\tenumerable: true,\r\n/******/ \t\t\t\tget: getter\r\n/******/ \t\t\t});\r\n/******/ \t\t}\r\n/******/ \t};\r\n/******/\r\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\r\n/******/ \t__webpack_require__.n = function(module) {\r\n/******/ \t\tvar getter = module && module.__esModule ?\r\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\r\n/******/ \t\t\tfunction getModuleExports() { return module; };\r\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\r\n/******/ \t\treturn getter;\r\n/******/ \t};\r\n/******/\r\n/******/ \t// Object.prototype.hasOwnProperty.call\r\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\r\n/******/\r\n/******/ \t// __webpack_public_path__\r\n/******/ \t__webpack_require__.p = \"\";\r\n/******/\r\n/******/ \t// Load entry module and return exports\r\n/******/ \treturn __webpack_require__(__webpack_require__.s = 26);\r\n/******/ })\r\n/************************************************************************/\r\n/******/ ([\r\n/* 0 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nfunction LayoutConstants() {}\r\n\r\n/**\r\n * Layout Quality: 0:draft, 1:default, 2:proof\r\n */\r\nLayoutConstants.QUALITY = 1;\r\n\r\n/**\r\n * Default parameters\r\n */\r\nLayoutConstants.DEFAULT_CREATE_BENDS_AS_NEEDED = false;\r\nLayoutConstants.DEFAULT_INCREMENTAL = false;\r\nLayoutConstants.DEFAULT_ANIMATION_ON_LAYOUT = true;\r\nLayoutConstants.DEFAULT_ANIMATION_DURING_LAYOUT = false;\r\nLayoutConstants.DEFAULT_ANIMATION_PERIOD = 50;\r\nLayoutConstants.DEFAULT_UNIFORM_LEAF_NODE_SIZES = false;\r\n\r\n// -----------------------------------------------------------------------------\r\n// Section: General other constants\r\n// -----------------------------------------------------------------------------\r\n/*\r\n * Margins of a graph to be applied on bouding rectangle of its contents. We\r\n * assume margins on all four sides to be uniform.\r\n */\r\nLayoutConstants.DEFAULT_GRAPH_MARGIN = 15;\r\n\r\n/*\r\n * Whether to consider labels in node dimensions or not\r\n */\r\nLayoutConstants.NODE_DIMENSIONS_INCLUDE_LABELS = false;\r\n\r\n/*\r\n * Default dimension of a non-compound node.\r\n */\r\nLayoutConstants.SIMPLE_NODE_SIZE = 40;\r\n\r\n/*\r\n * Default dimension of a non-compound node.\r\n */\r\nLayoutConstants.SIMPLE_NODE_HALF_SIZE = LayoutConstants.SIMPLE_NODE_SIZE / 2;\r\n\r\n/*\r\n * Empty compound node size. When a compound node is empty, its both\r\n * dimensions should be of this value.\r\n */\r\nLayoutConstants.EMPTY_COMPOUND_NODE_SIZE = 40;\r\n\r\n/*\r\n * Minimum length that an edge should take during layout\r\n */\r\nLayoutConstants.MIN_EDGE_LENGTH = 1;\r\n\r\n/*\r\n * World boundaries that layout operates on\r\n */\r\nLayoutConstants.WORLD_BOUNDARY = 1000000;\r\n\r\n/*\r\n * World boundaries that random positioning can be performed with\r\n */\r\nLayoutConstants.INITIAL_WORLD_BOUNDARY = LayoutConstants.WORLD_BOUNDARY / 1000;\r\n\r\n/*\r\n * Coordinates of the world center\r\n */\r\nLayoutConstants.WORLD_CENTER_X = 1200;\r\nLayoutConstants.WORLD_CENTER_Y = 900;\r\n\r\nmodule.exports = LayoutConstants;\r\n\r\n/***/ }),\r\n/* 1 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nvar LGraphObject = __webpack_require__(2);\r\nvar IGeometry = __webpack_require__(8);\r\nvar IMath = __webpack_require__(9);\r\n\r\nfunction LEdge(source, target, vEdge) {\r\n  LGraphObject.call(this, vEdge);\r\n\r\n  this.isOverlapingSourceAndTarget = false;\r\n  this.vGraphObject = vEdge;\r\n  this.bendpoints = [];\r\n  this.source = source;\r\n  this.target = target;\r\n}\r\n\r\nLEdge.prototype = Object.create(LGraphObject.prototype);\r\n\r\nfor (var prop in LGraphObject) {\r\n  LEdge[prop] = LGraphObject[prop];\r\n}\r\n\r\nLEdge.prototype.getSource = function () {\r\n  return this.source;\r\n};\r\n\r\nLEdge.prototype.getTarget = function () {\r\n  return this.target;\r\n};\r\n\r\nLEdge.prototype.isInterGraph = function () {\r\n  return this.isInterGraph;\r\n};\r\n\r\nLEdge.prototype.getLength = function () {\r\n  return this.length;\r\n};\r\n\r\nLEdge.prototype.isOverlapingSourceAndTarget = function () {\r\n  return this.isOverlapingSourceAndTarget;\r\n};\r\n\r\nLEdge.prototype.getBendpoints = function () {\r\n  return this.bendpoints;\r\n};\r\n\r\nLEdge.prototype.getLca = function () {\r\n  return this.lca;\r\n};\r\n\r\nLEdge.prototype.getSourceInLca = function () {\r\n  return this.sourceInLca;\r\n};\r\n\r\nLEdge.prototype.getTargetInLca = function () {\r\n  return this.targetInLca;\r\n};\r\n\r\nLEdge.prototype.getOtherEnd = function (node) {\r\n  if (this.source === node) {\r\n    return this.target;\r\n  } else if (this.target === node) {\r\n    return this.source;\r\n  } else {\r\n    throw \"Node is not incident with this edge\";\r\n  }\r\n};\r\n\r\nLEdge.prototype.getOtherEndInGraph = function (node, graph) {\r\n  var otherEnd = this.getOtherEnd(node);\r\n  var root = graph.getGraphManager().getRoot();\r\n\r\n  while (true) {\r\n    if (otherEnd.getOwner() == graph) {\r\n      return otherEnd;\r\n    }\r\n\r\n    if (otherEnd.getOwner() == root) {\r\n      break;\r\n    }\r\n\r\n    otherEnd = otherEnd.getOwner().getParent();\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nLEdge.prototype.updateLength = function () {\r\n  var clipPointCoordinates = new Array(4);\r\n\r\n  this.isOverlapingSourceAndTarget = IGeometry.getIntersection(this.target.getRect(), this.source.getRect(), clipPointCoordinates);\r\n\r\n  if (!this.isOverlapingSourceAndTarget) {\r\n    this.lengthX = clipPointCoordinates[0] - clipPointCoordinates[2];\r\n    this.lengthY = clipPointCoordinates[1] - clipPointCoordinates[3];\r\n\r\n    if (Math.abs(this.lengthX) < 1.0) {\r\n      this.lengthX = IMath.sign(this.lengthX);\r\n    }\r\n\r\n    if (Math.abs(this.lengthY) < 1.0) {\r\n      this.lengthY = IMath.sign(this.lengthY);\r\n    }\r\n\r\n    this.length = Math.sqrt(this.lengthX * this.lengthX + this.lengthY * this.lengthY);\r\n  }\r\n};\r\n\r\nLEdge.prototype.updateLengthSimple = function () {\r\n  this.lengthX = this.target.getCenterX() - this.source.getCenterX();\r\n  this.lengthY = this.target.getCenterY() - this.source.getCenterY();\r\n\r\n  if (Math.abs(this.lengthX) < 1.0) {\r\n    this.lengthX = IMath.sign(this.lengthX);\r\n  }\r\n\r\n  if (Math.abs(this.lengthY) < 1.0) {\r\n    this.lengthY = IMath.sign(this.lengthY);\r\n  }\r\n\r\n  this.length = Math.sqrt(this.lengthX * this.lengthX + this.lengthY * this.lengthY);\r\n};\r\n\r\nmodule.exports = LEdge;\r\n\r\n/***/ }),\r\n/* 2 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nfunction LGraphObject(vGraphObject) {\r\n  this.vGraphObject = vGraphObject;\r\n}\r\n\r\nmodule.exports = LGraphObject;\r\n\r\n/***/ }),\r\n/* 3 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nvar LGraphObject = __webpack_require__(2);\r\nvar Integer = __webpack_require__(10);\r\nvar RectangleD = __webpack_require__(13);\r\nvar LayoutConstants = __webpack_require__(0);\r\nvar RandomSeed = __webpack_require__(16);\r\nvar PointD = __webpack_require__(4);\r\n\r\nfunction LNode(gm, loc, size, vNode) {\r\n  //Alternative constructor 1 : LNode(LGraphManager gm, Point loc, Dimension size, Object vNode)\r\n  if (size == null && vNode == null) {\r\n    vNode = loc;\r\n  }\r\n\r\n  LGraphObject.call(this, vNode);\r\n\r\n  //Alternative constructor 2 : LNode(Layout layout, Object vNode)\r\n  if (gm.graphManager != null) gm = gm.graphManager;\r\n\r\n  this.estimatedSize = Integer.MIN_VALUE;\r\n  this.inclusionTreeDepth = Integer.MAX_VALUE;\r\n  this.vGraphObject = vNode;\r\n  this.edges = [];\r\n  this.graphManager = gm;\r\n\r\n  if (size != null && loc != null) this.rect = new RectangleD(loc.x, loc.y, size.width, size.height);else this.rect = new RectangleD();\r\n}\r\n\r\nLNode.prototype = Object.create(LGraphObject.prototype);\r\nfor (var prop in LGraphObject) {\r\n  LNode[prop] = LGraphObject[prop];\r\n}\r\n\r\nLNode.prototype.getEdges = function () {\r\n  return this.edges;\r\n};\r\n\r\nLNode.prototype.getChild = function () {\r\n  return this.child;\r\n};\r\n\r\nLNode.prototype.getOwner = function () {\r\n  //  if (this.owner != null) {\r\n  //    if (!(this.owner == null || this.owner.getNodes().indexOf(this) > -1)) {\r\n  //      throw \"assert failed\";\r\n  //    }\r\n  //  }\r\n\r\n  return this.owner;\r\n};\r\n\r\nLNode.prototype.getWidth = function () {\r\n  return this.rect.width;\r\n};\r\n\r\nLNode.prototype.setWidth = function (width) {\r\n  this.rect.width = width;\r\n};\r\n\r\nLNode.prototype.getHeight = function () {\r\n  return this.rect.height;\r\n};\r\n\r\nLNode.prototype.setHeight = function (height) {\r\n  this.rect.height = height;\r\n};\r\n\r\nLNode.prototype.getCenterX = function () {\r\n  return this.rect.x + this.rect.width / 2;\r\n};\r\n\r\nLNode.prototype.getCenterY = function () {\r\n  return this.rect.y + this.rect.height / 2;\r\n};\r\n\r\nLNode.prototype.getCenter = function () {\r\n  return new PointD(this.rect.x + this.rect.width / 2, this.rect.y + this.rect.height / 2);\r\n};\r\n\r\nLNode.prototype.getLocation = function () {\r\n  return new PointD(this.rect.x, this.rect.y);\r\n};\r\n\r\nLNode.prototype.getRect = function () {\r\n  return this.rect;\r\n};\r\n\r\nLNode.prototype.getDiagonal = function () {\r\n  return Math.sqrt(this.rect.width * this.rect.width + this.rect.height * this.rect.height);\r\n};\r\n\r\n/**\r\n * This method returns half the diagonal length of this node.\r\n */\r\nLNode.prototype.getHalfTheDiagonal = function () {\r\n  return Math.sqrt(this.rect.height * this.rect.height + this.rect.width * this.rect.width) / 2;\r\n};\r\n\r\nLNode.prototype.setRect = function (upperLeft, dimension) {\r\n  this.rect.x = upperLeft.x;\r\n  this.rect.y = upperLeft.y;\r\n  this.rect.width = dimension.width;\r\n  this.rect.height = dimension.height;\r\n};\r\n\r\nLNode.prototype.setCenter = function (cx, cy) {\r\n  this.rect.x = cx - this.rect.width / 2;\r\n  this.rect.y = cy - this.rect.height / 2;\r\n};\r\n\r\nLNode.prototype.setLocation = function (x, y) {\r\n  this.rect.x = x;\r\n  this.rect.y = y;\r\n};\r\n\r\nLNode.prototype.moveBy = function (dx, dy) {\r\n  this.rect.x += dx;\r\n  this.rect.y += dy;\r\n};\r\n\r\nLNode.prototype.getEdgeListToNode = function (to) {\r\n  var edgeList = [];\r\n  var edge;\r\n  var self = this;\r\n\r\n  self.edges.forEach(function (edge) {\r\n\r\n    if (edge.target == to) {\r\n      if (edge.source != self) throw \"Incorrect edge source!\";\r\n\r\n      edgeList.push(edge);\r\n    }\r\n  });\r\n\r\n  return edgeList;\r\n};\r\n\r\nLNode.prototype.getEdgesBetween = function (other) {\r\n  var edgeList = [];\r\n  var edge;\r\n\r\n  var self = this;\r\n  self.edges.forEach(function (edge) {\r\n\r\n    if (!(edge.source == self || edge.target == self)) throw \"Incorrect edge source and/or target\";\r\n\r\n    if (edge.target == other || edge.source == other) {\r\n      edgeList.push(edge);\r\n    }\r\n  });\r\n\r\n  return edgeList;\r\n};\r\n\r\nLNode.prototype.getNeighborsList = function () {\r\n  var neighbors = new Set();\r\n\r\n  var self = this;\r\n  self.edges.forEach(function (edge) {\r\n\r\n    if (edge.source == self) {\r\n      neighbors.add(edge.target);\r\n    } else {\r\n      if (edge.target != self) {\r\n        throw \"Incorrect incidency!\";\r\n      }\r\n\r\n      neighbors.add(edge.source);\r\n    }\r\n  });\r\n\r\n  return neighbors;\r\n};\r\n\r\nLNode.prototype.withChildren = function () {\r\n  var withNeighborsList = new Set();\r\n  var childNode;\r\n  var children;\r\n\r\n  withNeighborsList.add(this);\r\n\r\n  if (this.child != null) {\r\n    var nodes = this.child.getNodes();\r\n    for (var i = 0; i < nodes.length; i++) {\r\n      childNode = nodes[i];\r\n      children = childNode.withChildren();\r\n      children.forEach(function (node) {\r\n        withNeighborsList.add(node);\r\n      });\r\n    }\r\n  }\r\n\r\n  return withNeighborsList;\r\n};\r\n\r\nLNode.prototype.getNoOfChildren = function () {\r\n  var noOfChildren = 0;\r\n  var childNode;\r\n\r\n  if (this.child == null) {\r\n    noOfChildren = 1;\r\n  } else {\r\n    var nodes = this.child.getNodes();\r\n    for (var i = 0; i < nodes.length; i++) {\r\n      childNode = nodes[i];\r\n\r\n      noOfChildren += childNode.getNoOfChildren();\r\n    }\r\n  }\r\n\r\n  if (noOfChildren == 0) {\r\n    noOfChildren = 1;\r\n  }\r\n  return noOfChildren;\r\n};\r\n\r\nLNode.prototype.getEstimatedSize = function () {\r\n  if (this.estimatedSize == Integer.MIN_VALUE) {\r\n    throw \"assert failed\";\r\n  }\r\n  return this.estimatedSize;\r\n};\r\n\r\nLNode.prototype.calcEstimatedSize = function () {\r\n  if (this.child == null) {\r\n    return this.estimatedSize = (this.rect.width + this.rect.height) / 2;\r\n  } else {\r\n    this.estimatedSize = this.child.calcEstimatedSize();\r\n    this.rect.width = this.estimatedSize;\r\n    this.rect.height = this.estimatedSize;\r\n\r\n    return this.estimatedSize;\r\n  }\r\n};\r\n\r\nLNode.prototype.scatter = function () {\r\n  var randomCenterX;\r\n  var randomCenterY;\r\n\r\n  var minX = -LayoutConstants.INITIAL_WORLD_BOUNDARY;\r\n  var maxX = LayoutConstants.INITIAL_WORLD_BOUNDARY;\r\n  randomCenterX = LayoutConstants.WORLD_CENTER_X + RandomSeed.nextDouble() * (maxX - minX) + minX;\r\n\r\n  var minY = -LayoutConstants.INITIAL_WORLD_BOUNDARY;\r\n  var maxY = LayoutConstants.INITIAL_WORLD_BOUNDARY;\r\n  randomCenterY = LayoutConstants.WORLD_CENTER_Y + RandomSeed.nextDouble() * (maxY - minY) + minY;\r\n\r\n  this.rect.x = randomCenterX;\r\n  this.rect.y = randomCenterY;\r\n};\r\n\r\nLNode.prototype.updateBounds = function () {\r\n  if (this.getChild() == null) {\r\n    throw \"assert failed\";\r\n  }\r\n  if (this.getChild().getNodes().length != 0) {\r\n    // wrap the children nodes by re-arranging the boundaries\r\n    var childGraph = this.getChild();\r\n    childGraph.updateBounds(true);\r\n\r\n    this.rect.x = childGraph.getLeft();\r\n    this.rect.y = childGraph.getTop();\r\n\r\n    this.setWidth(childGraph.getRight() - childGraph.getLeft());\r\n    this.setHeight(childGraph.getBottom() - childGraph.getTop());\r\n\r\n    // Update compound bounds considering its label properties    \r\n    if (LayoutConstants.NODE_DIMENSIONS_INCLUDE_LABELS) {\r\n\r\n      var width = childGraph.getRight() - childGraph.getLeft();\r\n      var height = childGraph.getBottom() - childGraph.getTop();\r\n\r\n      if (this.labelWidth > width) {\r\n        this.rect.x -= (this.labelWidth - width) / 2;\r\n        this.setWidth(this.labelWidth);\r\n      }\r\n\r\n      if (this.labelHeight > height) {\r\n        if (this.labelPos == \"center\") {\r\n          this.rect.y -= (this.labelHeight - height) / 2;\r\n        } else if (this.labelPos == \"top\") {\r\n          this.rect.y -= this.labelHeight - height;\r\n        }\r\n        this.setHeight(this.labelHeight);\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nLNode.prototype.getInclusionTreeDepth = function () {\r\n  if (this.inclusionTreeDepth == Integer.MAX_VALUE) {\r\n    throw \"assert failed\";\r\n  }\r\n  return this.inclusionTreeDepth;\r\n};\r\n\r\nLNode.prototype.transform = function (trans) {\r\n  var left = this.rect.x;\r\n\r\n  if (left > LayoutConstants.WORLD_BOUNDARY) {\r\n    left = LayoutConstants.WORLD_BOUNDARY;\r\n  } else if (left < -LayoutConstants.WORLD_BOUNDARY) {\r\n    left = -LayoutConstants.WORLD_BOUNDARY;\r\n  }\r\n\r\n  var top = this.rect.y;\r\n\r\n  if (top > LayoutConstants.WORLD_BOUNDARY) {\r\n    top = LayoutConstants.WORLD_BOUNDARY;\r\n  } else if (top < -LayoutConstants.WORLD_BOUNDARY) {\r\n    top = -LayoutConstants.WORLD_BOUNDARY;\r\n  }\r\n\r\n  var leftTop = new PointD(left, top);\r\n  var vLeftTop = trans.inverseTransformPoint(leftTop);\r\n\r\n  this.setLocation(vLeftTop.x, vLeftTop.y);\r\n};\r\n\r\nLNode.prototype.getLeft = function () {\r\n  return this.rect.x;\r\n};\r\n\r\nLNode.prototype.getRight = function () {\r\n  return this.rect.x + this.rect.width;\r\n};\r\n\r\nLNode.prototype.getTop = function () {\r\n  return this.rect.y;\r\n};\r\n\r\nLNode.prototype.getBottom = function () {\r\n  return this.rect.y + this.rect.height;\r\n};\r\n\r\nLNode.prototype.getParent = function () {\r\n  if (this.owner == null) {\r\n    return null;\r\n  }\r\n\r\n  return this.owner.getParent();\r\n};\r\n\r\nmodule.exports = LNode;\r\n\r\n/***/ }),\r\n/* 4 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nfunction PointD(x, y) {\r\n  if (x == null && y == null) {\r\n    this.x = 0;\r\n    this.y = 0;\r\n  } else {\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n}\r\n\r\nPointD.prototype.getX = function () {\r\n  return this.x;\r\n};\r\n\r\nPointD.prototype.getY = function () {\r\n  return this.y;\r\n};\r\n\r\nPointD.prototype.setX = function (x) {\r\n  this.x = x;\r\n};\r\n\r\nPointD.prototype.setY = function (y) {\r\n  this.y = y;\r\n};\r\n\r\nPointD.prototype.getDifference = function (pt) {\r\n  return new DimensionD(this.x - pt.x, this.y - pt.y);\r\n};\r\n\r\nPointD.prototype.getCopy = function () {\r\n  return new PointD(this.x, this.y);\r\n};\r\n\r\nPointD.prototype.translate = function (dim) {\r\n  this.x += dim.width;\r\n  this.y += dim.height;\r\n  return this;\r\n};\r\n\r\nmodule.exports = PointD;\r\n\r\n/***/ }),\r\n/* 5 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nvar LGraphObject = __webpack_require__(2);\r\nvar Integer = __webpack_require__(10);\r\nvar LayoutConstants = __webpack_require__(0);\r\nvar LGraphManager = __webpack_require__(6);\r\nvar LNode = __webpack_require__(3);\r\nvar LEdge = __webpack_require__(1);\r\nvar RectangleD = __webpack_require__(13);\r\nvar Point = __webpack_require__(12);\r\nvar LinkedList = __webpack_require__(11);\r\n\r\nfunction LGraph(parent, obj2, vGraph) {\r\n  LGraphObject.call(this, vGraph);\r\n  this.estimatedSize = Integer.MIN_VALUE;\r\n  this.margin = LayoutConstants.DEFAULT_GRAPH_MARGIN;\r\n  this.edges = [];\r\n  this.nodes = [];\r\n  this.isConnected = false;\r\n  this.parent = parent;\r\n\r\n  if (obj2 != null && obj2 instanceof LGraphManager) {\r\n    this.graphManager = obj2;\r\n  } else if (obj2 != null && obj2 instanceof Layout) {\r\n    this.graphManager = obj2.graphManager;\r\n  }\r\n}\r\n\r\nLGraph.prototype = Object.create(LGraphObject.prototype);\r\nfor (var prop in LGraphObject) {\r\n  LGraph[prop] = LGraphObject[prop];\r\n}\r\n\r\nLGraph.prototype.getNodes = function () {\r\n  return this.nodes;\r\n};\r\n\r\nLGraph.prototype.getEdges = function () {\r\n  return this.edges;\r\n};\r\n\r\nLGraph.prototype.getGraphManager = function () {\r\n  return this.graphManager;\r\n};\r\n\r\nLGraph.prototype.getParent = function () {\r\n  return this.parent;\r\n};\r\n\r\nLGraph.prototype.getLeft = function () {\r\n  return this.left;\r\n};\r\n\r\nLGraph.prototype.getRight = function () {\r\n  return this.right;\r\n};\r\n\r\nLGraph.prototype.getTop = function () {\r\n  return this.top;\r\n};\r\n\r\nLGraph.prototype.getBottom = function () {\r\n  return this.bottom;\r\n};\r\n\r\nLGraph.prototype.isConnected = function () {\r\n  return this.isConnected;\r\n};\r\n\r\nLGraph.prototype.add = function (obj1, sourceNode, targetNode) {\r\n  if (sourceNode == null && targetNode == null) {\r\n    var newNode = obj1;\r\n    if (this.graphManager == null) {\r\n      throw \"Graph has no graph mgr!\";\r\n    }\r\n    if (this.getNodes().indexOf(newNode) > -1) {\r\n      throw \"Node already in graph!\";\r\n    }\r\n    newNode.owner = this;\r\n    this.getNodes().push(newNode);\r\n\r\n    return newNode;\r\n  } else {\r\n    var newEdge = obj1;\r\n    if (!(this.getNodes().indexOf(sourceNode) > -1 && this.getNodes().indexOf(targetNode) > -1)) {\r\n      throw \"Source or target not in graph!\";\r\n    }\r\n\r\n    if (!(sourceNode.owner == targetNode.owner && sourceNode.owner == this)) {\r\n      throw \"Both owners must be this graph!\";\r\n    }\r\n\r\n    if (sourceNode.owner != targetNode.owner) {\r\n      return null;\r\n    }\r\n\r\n    // set source and target\r\n    newEdge.source = sourceNode;\r\n    newEdge.target = targetNode;\r\n\r\n    // set as intra-graph edge\r\n    newEdge.isInterGraph = false;\r\n\r\n    // add to graph edge list\r\n    this.getEdges().push(newEdge);\r\n\r\n    // add to incidency lists\r\n    sourceNode.edges.push(newEdge);\r\n\r\n    if (targetNode != sourceNode) {\r\n      targetNode.edges.push(newEdge);\r\n    }\r\n\r\n    return newEdge;\r\n  }\r\n};\r\n\r\nLGraph.prototype.remove = function (obj) {\r\n  var node = obj;\r\n  if (obj instanceof LNode) {\r\n    if (node == null) {\r\n      throw \"Node is null!\";\r\n    }\r\n    if (!(node.owner != null && node.owner == this)) {\r\n      throw \"Owner graph is invalid!\";\r\n    }\r\n    if (this.graphManager == null) {\r\n      throw \"Owner graph manager is invalid!\";\r\n    }\r\n    // remove incident edges first (make a copy to do it safely)\r\n    var edgesToBeRemoved = node.edges.slice();\r\n    var edge;\r\n    var s = edgesToBeRemoved.length;\r\n    for (var i = 0; i < s; i++) {\r\n      edge = edgesToBeRemoved[i];\r\n\r\n      if (edge.isInterGraph) {\r\n        this.graphManager.remove(edge);\r\n      } else {\r\n        edge.source.owner.remove(edge);\r\n      }\r\n    }\r\n\r\n    // now the node itself\r\n    var index = this.nodes.indexOf(node);\r\n    if (index == -1) {\r\n      throw \"Node not in owner node list!\";\r\n    }\r\n\r\n    this.nodes.splice(index, 1);\r\n  } else if (obj instanceof LEdge) {\r\n    var edge = obj;\r\n    if (edge == null) {\r\n      throw \"Edge is null!\";\r\n    }\r\n    if (!(edge.source != null && edge.target != null)) {\r\n      throw \"Source and/or target is null!\";\r\n    }\r\n    if (!(edge.source.owner != null && edge.target.owner != null && edge.source.owner == this && edge.target.owner == this)) {\r\n      throw \"Source and/or target owner is invalid!\";\r\n    }\r\n\r\n    var sourceIndex = edge.source.edges.indexOf(edge);\r\n    var targetIndex = edge.target.edges.indexOf(edge);\r\n    if (!(sourceIndex > -1 && targetIndex > -1)) {\r\n      throw \"Source and/or target doesn't know this edge!\";\r\n    }\r\n\r\n    edge.source.edges.splice(sourceIndex, 1);\r\n\r\n    if (edge.target != edge.source) {\r\n      edge.target.edges.splice(targetIndex, 1);\r\n    }\r\n\r\n    var index = edge.source.owner.getEdges().indexOf(edge);\r\n    if (index == -1) {\r\n      throw \"Not in owner's edge list!\";\r\n    }\r\n\r\n    edge.source.owner.getEdges().splice(index, 1);\r\n  }\r\n};\r\n\r\nLGraph.prototype.updateLeftTop = function () {\r\n  var top = Integer.MAX_VALUE;\r\n  var left = Integer.MAX_VALUE;\r\n  var nodeTop;\r\n  var nodeLeft;\r\n  var margin;\r\n\r\n  var nodes = this.getNodes();\r\n  var s = nodes.length;\r\n\r\n  for (var i = 0; i < s; i++) {\r\n    var lNode = nodes[i];\r\n    nodeTop = lNode.getTop();\r\n    nodeLeft = lNode.getLeft();\r\n\r\n    if (top > nodeTop) {\r\n      top = nodeTop;\r\n    }\r\n\r\n    if (left > nodeLeft) {\r\n      left = nodeLeft;\r\n    }\r\n  }\r\n\r\n  // Do we have any nodes in this graph?\r\n  if (top == Integer.MAX_VALUE) {\r\n    return null;\r\n  }\r\n\r\n  if (nodes[0].getParent().paddingLeft != undefined) {\r\n    margin = nodes[0].getParent().paddingLeft;\r\n  } else {\r\n    margin = this.margin;\r\n  }\r\n\r\n  this.left = left - margin;\r\n  this.top = top - margin;\r\n\r\n  // Apply the margins and return the result\r\n  return new Point(this.left, this.top);\r\n};\r\n\r\nLGraph.prototype.updateBounds = function (recursive) {\r\n  // calculate bounds\r\n  var left = Integer.MAX_VALUE;\r\n  var right = -Integer.MAX_VALUE;\r\n  var top = Integer.MAX_VALUE;\r\n  var bottom = -Integer.MAX_VALUE;\r\n  var nodeLeft;\r\n  var nodeRight;\r\n  var nodeTop;\r\n  var nodeBottom;\r\n  var margin;\r\n\r\n  var nodes = this.nodes;\r\n  var s = nodes.length;\r\n  for (var i = 0; i < s; i++) {\r\n    var lNode = nodes[i];\r\n\r\n    if (recursive && lNode.child != null) {\r\n      lNode.updateBounds();\r\n    }\r\n    nodeLeft = lNode.getLeft();\r\n    nodeRight = lNode.getRight();\r\n    nodeTop = lNode.getTop();\r\n    nodeBottom = lNode.getBottom();\r\n\r\n    if (left > nodeLeft) {\r\n      left = nodeLeft;\r\n    }\r\n\r\n    if (right < nodeRight) {\r\n      right = nodeRight;\r\n    }\r\n\r\n    if (top > nodeTop) {\r\n      top = nodeTop;\r\n    }\r\n\r\n    if (bottom < nodeBottom) {\r\n      bottom = nodeBottom;\r\n    }\r\n  }\r\n\r\n  var boundingRect = new RectangleD(left, top, right - left, bottom - top);\r\n  if (left == Integer.MAX_VALUE) {\r\n    this.left = this.parent.getLeft();\r\n    this.right = this.parent.getRight();\r\n    this.top = this.parent.getTop();\r\n    this.bottom = this.parent.getBottom();\r\n  }\r\n\r\n  if (nodes[0].getParent().paddingLeft != undefined) {\r\n    margin = nodes[0].getParent().paddingLeft;\r\n  } else {\r\n    margin = this.margin;\r\n  }\r\n\r\n  this.left = boundingRect.x - margin;\r\n  this.right = boundingRect.x + boundingRect.width + margin;\r\n  this.top = boundingRect.y - margin;\r\n  this.bottom = boundingRect.y + boundingRect.height + margin;\r\n};\r\n\r\nLGraph.calculateBounds = function (nodes) {\r\n  var left = Integer.MAX_VALUE;\r\n  var right = -Integer.MAX_VALUE;\r\n  var top = Integer.MAX_VALUE;\r\n  var bottom = -Integer.MAX_VALUE;\r\n  var nodeLeft;\r\n  var nodeRight;\r\n  var nodeTop;\r\n  var nodeBottom;\r\n\r\n  var s = nodes.length;\r\n\r\n  for (var i = 0; i < s; i++) {\r\n    var lNode = nodes[i];\r\n    nodeLeft = lNode.getLeft();\r\n    nodeRight = lNode.getRight();\r\n    nodeTop = lNode.getTop();\r\n    nodeBottom = lNode.getBottom();\r\n\r\n    if (left > nodeLeft) {\r\n      left = nodeLeft;\r\n    }\r\n\r\n    if (right < nodeRight) {\r\n      right = nodeRight;\r\n    }\r\n\r\n    if (top > nodeTop) {\r\n      top = nodeTop;\r\n    }\r\n\r\n    if (bottom < nodeBottom) {\r\n      bottom = nodeBottom;\r\n    }\r\n  }\r\n\r\n  var boundingRect = new RectangleD(left, top, right - left, bottom - top);\r\n\r\n  return boundingRect;\r\n};\r\n\r\nLGraph.prototype.getInclusionTreeDepth = function () {\r\n  if (this == this.graphManager.getRoot()) {\r\n    return 1;\r\n  } else {\r\n    return this.parent.getInclusionTreeDepth();\r\n  }\r\n};\r\n\r\nLGraph.prototype.getEstimatedSize = function () {\r\n  if (this.estimatedSize == Integer.MIN_VALUE) {\r\n    throw \"assert failed\";\r\n  }\r\n  return this.estimatedSize;\r\n};\r\n\r\nLGraph.prototype.calcEstimatedSize = function () {\r\n  var size = 0;\r\n  var nodes = this.nodes;\r\n  var s = nodes.length;\r\n\r\n  for (var i = 0; i < s; i++) {\r\n    var lNode = nodes[i];\r\n    size += lNode.calcEstimatedSize();\r\n  }\r\n\r\n  if (size == 0) {\r\n    this.estimatedSize = LayoutConstants.EMPTY_COMPOUND_NODE_SIZE;\r\n  } else {\r\n    this.estimatedSize = size / Math.sqrt(this.nodes.length);\r\n  }\r\n\r\n  return this.estimatedSize;\r\n};\r\n\r\nLGraph.prototype.updateConnected = function () {\r\n  var self = this;\r\n  if (this.nodes.length == 0) {\r\n    this.isConnected = true;\r\n    return;\r\n  }\r\n\r\n  var queue = new LinkedList();\r\n  var visited = new Set();\r\n  var currentNode = this.nodes[0];\r\n  var neighborEdges;\r\n  var currentNeighbor;\r\n  var childrenOfNode = currentNode.withChildren();\r\n  childrenOfNode.forEach(function (node) {\r\n    queue.push(node);\r\n    visited.add(node);\r\n  });\r\n\r\n  while (queue.length !== 0) {\r\n    currentNode = queue.shift();\r\n\r\n    // Traverse all neighbors of this node\r\n    neighborEdges = currentNode.getEdges();\r\n    var size = neighborEdges.length;\r\n    for (var i = 0; i < size; i++) {\r\n      var neighborEdge = neighborEdges[i];\r\n      currentNeighbor = neighborEdge.getOtherEndInGraph(currentNode, this);\r\n\r\n      // Add unvisited neighbors to the list to visit\r\n      if (currentNeighbor != null && !visited.has(currentNeighbor)) {\r\n        var childrenOfNeighbor = currentNeighbor.withChildren();\r\n\r\n        childrenOfNeighbor.forEach(function (node) {\r\n          queue.push(node);\r\n          visited.add(node);\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  this.isConnected = false;\r\n\r\n  if (visited.size >= this.nodes.length) {\r\n    var noOfVisitedInThisGraph = 0;\r\n\r\n    visited.forEach(function (visitedNode) {\r\n      if (visitedNode.owner == self) {\r\n        noOfVisitedInThisGraph++;\r\n      }\r\n    });\r\n\r\n    if (noOfVisitedInThisGraph == this.nodes.length) {\r\n      this.isConnected = true;\r\n    }\r\n  }\r\n};\r\n\r\nmodule.exports = LGraph;\r\n\r\n/***/ }),\r\n/* 6 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nvar LGraph;\r\nvar LEdge = __webpack_require__(1);\r\n\r\nfunction LGraphManager(layout) {\r\n  LGraph = __webpack_require__(5); // It may be better to initilize this out of this function but it gives an error (Right-hand side of 'instanceof' is not callable) now.\r\n  this.layout = layout;\r\n\r\n  this.graphs = [];\r\n  this.edges = [];\r\n}\r\n\r\nLGraphManager.prototype.addRoot = function () {\r\n  var ngraph = this.layout.newGraph();\r\n  var nnode = this.layout.newNode(null);\r\n  var root = this.add(ngraph, nnode);\r\n  this.setRootGraph(root);\r\n  return this.rootGraph;\r\n};\r\n\r\nLGraphManager.prototype.add = function (newGraph, parentNode, newEdge, sourceNode, targetNode) {\r\n  //there are just 2 parameters are passed then it adds an LGraph else it adds an LEdge\r\n  if (newEdge == null && sourceNode == null && targetNode == null) {\r\n    if (newGraph == null) {\r\n      throw \"Graph is null!\";\r\n    }\r\n    if (parentNode == null) {\r\n      throw \"Parent node is null!\";\r\n    }\r\n    if (this.graphs.indexOf(newGraph) > -1) {\r\n      throw \"Graph already in this graph mgr!\";\r\n    }\r\n\r\n    this.graphs.push(newGraph);\r\n\r\n    if (newGraph.parent != null) {\r\n      throw \"Already has a parent!\";\r\n    }\r\n    if (parentNode.child != null) {\r\n      throw \"Already has a child!\";\r\n    }\r\n\r\n    newGraph.parent = parentNode;\r\n    parentNode.child = newGraph;\r\n\r\n    return newGraph;\r\n  } else {\r\n    //change the order of the parameters\r\n    targetNode = newEdge;\r\n    sourceNode = parentNode;\r\n    newEdge = newGraph;\r\n    var sourceGraph = sourceNode.getOwner();\r\n    var targetGraph = targetNode.getOwner();\r\n\r\n    if (!(sourceGraph != null && sourceGraph.getGraphManager() == this)) {\r\n      throw \"Source not in this graph mgr!\";\r\n    }\r\n    if (!(targetGraph != null && targetGraph.getGraphManager() == this)) {\r\n      throw \"Target not in this graph mgr!\";\r\n    }\r\n\r\n    if (sourceGraph == targetGraph) {\r\n      newEdge.isInterGraph = false;\r\n      return sourceGraph.add(newEdge, sourceNode, targetNode);\r\n    } else {\r\n      newEdge.isInterGraph = true;\r\n\r\n      // set source and target\r\n      newEdge.source = sourceNode;\r\n      newEdge.target = targetNode;\r\n\r\n      // add edge to inter-graph edge list\r\n      if (this.edges.indexOf(newEdge) > -1) {\r\n        throw \"Edge already in inter-graph edge list!\";\r\n      }\r\n\r\n      this.edges.push(newEdge);\r\n\r\n      // add edge to source and target incidency lists\r\n      if (!(newEdge.source != null && newEdge.target != null)) {\r\n        throw \"Edge source and/or target is null!\";\r\n      }\r\n\r\n      if (!(newEdge.source.edges.indexOf(newEdge) == -1 && newEdge.target.edges.indexOf(newEdge) == -1)) {\r\n        throw \"Edge already in source and/or target incidency list!\";\r\n      }\r\n\r\n      newEdge.source.edges.push(newEdge);\r\n      newEdge.target.edges.push(newEdge);\r\n\r\n      return newEdge;\r\n    }\r\n  }\r\n};\r\n\r\nLGraphManager.prototype.remove = function (lObj) {\r\n  if (lObj instanceof LGraph) {\r\n    var graph = lObj;\r\n    if (graph.getGraphManager() != this) {\r\n      throw \"Graph not in this graph mgr\";\r\n    }\r\n    if (!(graph == this.rootGraph || graph.parent != null && graph.parent.graphManager == this)) {\r\n      throw \"Invalid parent node!\";\r\n    }\r\n\r\n    // first the edges (make a copy to do it safely)\r\n    var edgesToBeRemoved = [];\r\n\r\n    edgesToBeRemoved = edgesToBeRemoved.concat(graph.getEdges());\r\n\r\n    var edge;\r\n    var s = edgesToBeRemoved.length;\r\n    for (var i = 0; i < s; i++) {\r\n      edge = edgesToBeRemoved[i];\r\n      graph.remove(edge);\r\n    }\r\n\r\n    // then the nodes (make a copy to do it safely)\r\n    var nodesToBeRemoved = [];\r\n\r\n    nodesToBeRemoved = nodesToBeRemoved.concat(graph.getNodes());\r\n\r\n    var node;\r\n    s = nodesToBeRemoved.length;\r\n    for (var i = 0; i < s; i++) {\r\n      node = nodesToBeRemoved[i];\r\n      graph.remove(node);\r\n    }\r\n\r\n    // check if graph is the root\r\n    if (graph == this.rootGraph) {\r\n      this.setRootGraph(null);\r\n    }\r\n\r\n    // now remove the graph itself\r\n    var index = this.graphs.indexOf(graph);\r\n    this.graphs.splice(index, 1);\r\n\r\n    // also reset the parent of the graph\r\n    graph.parent = null;\r\n  } else if (lObj instanceof LEdge) {\r\n    edge = lObj;\r\n    if (edge == null) {\r\n      throw \"Edge is null!\";\r\n    }\r\n    if (!edge.isInterGraph) {\r\n      throw \"Not an inter-graph edge!\";\r\n    }\r\n    if (!(edge.source != null && edge.target != null)) {\r\n      throw \"Source and/or target is null!\";\r\n    }\r\n\r\n    // remove edge from source and target nodes' incidency lists\r\n\r\n    if (!(edge.source.edges.indexOf(edge) != -1 && edge.target.edges.indexOf(edge) != -1)) {\r\n      throw \"Source and/or target doesn't know this edge!\";\r\n    }\r\n\r\n    var index = edge.source.edges.indexOf(edge);\r\n    edge.source.edges.splice(index, 1);\r\n    index = edge.target.edges.indexOf(edge);\r\n    edge.target.edges.splice(index, 1);\r\n\r\n    // remove edge from owner graph manager's inter-graph edge list\r\n\r\n    if (!(edge.source.owner != null && edge.source.owner.getGraphManager() != null)) {\r\n      throw \"Edge owner graph or owner graph manager is null!\";\r\n    }\r\n    if (edge.source.owner.getGraphManager().edges.indexOf(edge) == -1) {\r\n      throw \"Not in owner graph manager's edge list!\";\r\n    }\r\n\r\n    var index = edge.source.owner.getGraphManager().edges.indexOf(edge);\r\n    edge.source.owner.getGraphManager().edges.splice(index, 1);\r\n  }\r\n};\r\n\r\nLGraphManager.prototype.updateBounds = function () {\r\n  this.rootGraph.updateBounds(true);\r\n};\r\n\r\nLGraphManager.prototype.getGraphs = function () {\r\n  return this.graphs;\r\n};\r\n\r\nLGraphManager.prototype.getAllNodes = function () {\r\n  if (this.allNodes == null) {\r\n    var nodeList = [];\r\n    var graphs = this.getGraphs();\r\n    var s = graphs.length;\r\n    for (var i = 0; i < s; i++) {\r\n      nodeList = nodeList.concat(graphs[i].getNodes());\r\n    }\r\n    this.allNodes = nodeList;\r\n  }\r\n  return this.allNodes;\r\n};\r\n\r\nLGraphManager.prototype.resetAllNodes = function () {\r\n  this.allNodes = null;\r\n};\r\n\r\nLGraphManager.prototype.resetAllEdges = function () {\r\n  this.allEdges = null;\r\n};\r\n\r\nLGraphManager.prototype.resetAllNodesToApplyGravitation = function () {\r\n  this.allNodesToApplyGravitation = null;\r\n};\r\n\r\nLGraphManager.prototype.getAllEdges = function () {\r\n  if (this.allEdges == null) {\r\n    var edgeList = [];\r\n    var graphs = this.getGraphs();\r\n    var s = graphs.length;\r\n    for (var i = 0; i < graphs.length; i++) {\r\n      edgeList = edgeList.concat(graphs[i].getEdges());\r\n    }\r\n\r\n    edgeList = edgeList.concat(this.edges);\r\n\r\n    this.allEdges = edgeList;\r\n  }\r\n  return this.allEdges;\r\n};\r\n\r\nLGraphManager.prototype.getAllNodesToApplyGravitation = function () {\r\n  return this.allNodesToApplyGravitation;\r\n};\r\n\r\nLGraphManager.prototype.setAllNodesToApplyGravitation = function (nodeList) {\r\n  if (this.allNodesToApplyGravitation != null) {\r\n    throw \"assert failed\";\r\n  }\r\n\r\n  this.allNodesToApplyGravitation = nodeList;\r\n};\r\n\r\nLGraphManager.prototype.getRoot = function () {\r\n  return this.rootGraph;\r\n};\r\n\r\nLGraphManager.prototype.setRootGraph = function (graph) {\r\n  if (graph.getGraphManager() != this) {\r\n    throw \"Root not in this graph mgr!\";\r\n  }\r\n\r\n  this.rootGraph = graph;\r\n  // root graph must have a root node associated with it for convenience\r\n  if (graph.parent == null) {\r\n    graph.parent = this.layout.newNode(\"Root node\");\r\n  }\r\n};\r\n\r\nLGraphManager.prototype.getLayout = function () {\r\n  return this.layout;\r\n};\r\n\r\nLGraphManager.prototype.isOneAncestorOfOther = function (firstNode, secondNode) {\r\n  if (!(firstNode != null && secondNode != null)) {\r\n    throw \"assert failed\";\r\n  }\r\n\r\n  if (firstNode == secondNode) {\r\n    return true;\r\n  }\r\n  // Is second node an ancestor of the first one?\r\n  var ownerGraph = firstNode.getOwner();\r\n  var parentNode;\r\n\r\n  do {\r\n    parentNode = ownerGraph.getParent();\r\n\r\n    if (parentNode == null) {\r\n      break;\r\n    }\r\n\r\n    if (parentNode == secondNode) {\r\n      return true;\r\n    }\r\n\r\n    ownerGraph = parentNode.getOwner();\r\n    if (ownerGraph == null) {\r\n      break;\r\n    }\r\n  } while (true);\r\n  // Is first node an ancestor of the second one?\r\n  ownerGraph = secondNode.getOwner();\r\n\r\n  do {\r\n    parentNode = ownerGraph.getParent();\r\n\r\n    if (parentNode == null) {\r\n      break;\r\n    }\r\n\r\n    if (parentNode == firstNode) {\r\n      return true;\r\n    }\r\n\r\n    ownerGraph = parentNode.getOwner();\r\n    if (ownerGraph == null) {\r\n      break;\r\n    }\r\n  } while (true);\r\n\r\n  return false;\r\n};\r\n\r\nLGraphManager.prototype.calcLowestCommonAncestors = function () {\r\n  var edge;\r\n  var sourceNode;\r\n  var targetNode;\r\n  var sourceAncestorGraph;\r\n  var targetAncestorGraph;\r\n\r\n  var edges = this.getAllEdges();\r\n  var s = edges.length;\r\n  for (var i = 0; i < s; i++) {\r\n    edge = edges[i];\r\n\r\n    sourceNode = edge.source;\r\n    targetNode = edge.target;\r\n    edge.lca = null;\r\n    edge.sourceInLca = sourceNode;\r\n    edge.targetInLca = targetNode;\r\n\r\n    if (sourceNode == targetNode) {\r\n      edge.lca = sourceNode.getOwner();\r\n      continue;\r\n    }\r\n\r\n    sourceAncestorGraph = sourceNode.getOwner();\r\n\r\n    while (edge.lca == null) {\r\n      edge.targetInLca = targetNode;\r\n      targetAncestorGraph = targetNode.getOwner();\r\n\r\n      while (edge.lca == null) {\r\n        if (targetAncestorGraph == sourceAncestorGraph) {\r\n          edge.lca = targetAncestorGraph;\r\n          break;\r\n        }\r\n\r\n        if (targetAncestorGraph == this.rootGraph) {\r\n          break;\r\n        }\r\n\r\n        if (edge.lca != null) {\r\n          throw \"assert failed\";\r\n        }\r\n        edge.targetInLca = targetAncestorGraph.getParent();\r\n        targetAncestorGraph = edge.targetInLca.getOwner();\r\n      }\r\n\r\n      if (sourceAncestorGraph == this.rootGraph) {\r\n        break;\r\n      }\r\n\r\n      if (edge.lca == null) {\r\n        edge.sourceInLca = sourceAncestorGraph.getParent();\r\n        sourceAncestorGraph = edge.sourceInLca.getOwner();\r\n      }\r\n    }\r\n\r\n    if (edge.lca == null) {\r\n      throw \"assert failed\";\r\n    }\r\n  }\r\n};\r\n\r\nLGraphManager.prototype.calcLowestCommonAncestor = function (firstNode, secondNode) {\r\n  if (firstNode == secondNode) {\r\n    return firstNode.getOwner();\r\n  }\r\n  var firstOwnerGraph = firstNode.getOwner();\r\n\r\n  do {\r\n    if (firstOwnerGraph == null) {\r\n      break;\r\n    }\r\n    var secondOwnerGraph = secondNode.getOwner();\r\n\r\n    do {\r\n      if (secondOwnerGraph == null) {\r\n        break;\r\n      }\r\n\r\n      if (secondOwnerGraph == firstOwnerGraph) {\r\n        return secondOwnerGraph;\r\n      }\r\n      secondOwnerGraph = secondOwnerGraph.getParent().getOwner();\r\n    } while (true);\r\n\r\n    firstOwnerGraph = firstOwnerGraph.getParent().getOwner();\r\n  } while (true);\r\n\r\n  return firstOwnerGraph;\r\n};\r\n\r\nLGraphManager.prototype.calcInclusionTreeDepths = function (graph, depth) {\r\n  if (graph == null && depth == null) {\r\n    graph = this.rootGraph;\r\n    depth = 1;\r\n  }\r\n  var node;\r\n\r\n  var nodes = graph.getNodes();\r\n  var s = nodes.length;\r\n  for (var i = 0; i < s; i++) {\r\n    node = nodes[i];\r\n    node.inclusionTreeDepth = depth;\r\n\r\n    if (node.child != null) {\r\n      this.calcInclusionTreeDepths(node.child, depth + 1);\r\n    }\r\n  }\r\n};\r\n\r\nLGraphManager.prototype.includesInvalidEdge = function () {\r\n  var edge;\r\n\r\n  var s = this.edges.length;\r\n  for (var i = 0; i < s; i++) {\r\n    edge = this.edges[i];\r\n\r\n    if (this.isOneAncestorOfOther(edge.source, edge.target)) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\nmodule.exports = LGraphManager;\r\n\r\n/***/ }),\r\n/* 7 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nvar LayoutConstants = __webpack_require__(0);\r\n\r\nfunction FDLayoutConstants() {}\r\n\r\n//FDLayoutConstants inherits static props in LayoutConstants\r\nfor (var prop in LayoutConstants) {\r\n  FDLayoutConstants[prop] = LayoutConstants[prop];\r\n}\r\n\r\nFDLayoutConstants.MAX_ITERATIONS = 2500;\r\n\r\nFDLayoutConstants.DEFAULT_EDGE_LENGTH = 50;\r\nFDLayoutConstants.DEFAULT_SPRING_STRENGTH = 0.45;\r\nFDLayoutConstants.DEFAULT_REPULSION_STRENGTH = 4500.0;\r\nFDLayoutConstants.DEFAULT_GRAVITY_STRENGTH = 0.4;\r\nFDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_STRENGTH = 1.0;\r\nFDLayoutConstants.DEFAULT_GRAVITY_RANGE_FACTOR = 3.8;\r\nFDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_RANGE_FACTOR = 1.5;\r\nFDLayoutConstants.DEFAULT_USE_SMART_IDEAL_EDGE_LENGTH_CALCULATION = true;\r\nFDLayoutConstants.DEFAULT_USE_SMART_REPULSION_RANGE_CALCULATION = true;\r\nFDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL = 0.3;\r\nFDLayoutConstants.COOLING_ADAPTATION_FACTOR = 0.33;\r\nFDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT = 1000;\r\nFDLayoutConstants.ADAPTATION_UPPER_NODE_LIMIT = 5000;\r\nFDLayoutConstants.MAX_NODE_DISPLACEMENT_INCREMENTAL = 100.0;\r\nFDLayoutConstants.MAX_NODE_DISPLACEMENT = FDLayoutConstants.MAX_NODE_DISPLACEMENT_INCREMENTAL * 3;\r\nFDLayoutConstants.MIN_REPULSION_DIST = FDLayoutConstants.DEFAULT_EDGE_LENGTH / 10.0;\r\nFDLayoutConstants.CONVERGENCE_CHECK_PERIOD = 100;\r\nFDLayoutConstants.PER_LEVEL_IDEAL_EDGE_LENGTH_FACTOR = 0.1;\r\nFDLayoutConstants.MIN_EDGE_LENGTH = 1;\r\nFDLayoutConstants.GRID_CALCULATION_CHECK_PERIOD = 10;\r\n\r\nmodule.exports = FDLayoutConstants;\r\n\r\n/***/ }),\r\n/* 8 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\n/**\r\n * This class maintains a list of static geometry related utility methods.\r\n *\r\n *\r\n * Copyright: i-Vis Research Group, Bilkent University, 2007 - present\r\n */\r\n\r\nvar Point = __webpack_require__(12);\r\n\r\nfunction IGeometry() {}\r\n\r\n/**\r\n * This method calculates *half* the amount in x and y directions of the two\r\n * input rectangles needed to separate them keeping their respective\r\n * positioning, and returns the result in the input array. An input\r\n * separation buffer added to the amount in both directions. We assume that\r\n * the two rectangles do intersect.\r\n */\r\nIGeometry.calcSeparationAmount = function (rectA, rectB, overlapAmount, separationBuffer) {\r\n  if (!rectA.intersects(rectB)) {\r\n    throw \"assert failed\";\r\n  }\r\n\r\n  var directions = new Array(2);\r\n\r\n  this.decideDirectionsForOverlappingNodes(rectA, rectB, directions);\r\n\r\n  overlapAmount[0] = Math.min(rectA.getRight(), rectB.getRight()) - Math.max(rectA.x, rectB.x);\r\n  overlapAmount[1] = Math.min(rectA.getBottom(), rectB.getBottom()) - Math.max(rectA.y, rectB.y);\r\n\r\n  // update the overlapping amounts for the following cases:\r\n  if (rectA.getX() <= rectB.getX() && rectA.getRight() >= rectB.getRight()) {\r\n    /* Case x.1:\r\n    *\r\n    * rectA\r\n    * \t|                       |\r\n    * \t|        _________      |\r\n    * \t|        |       |      |\r\n    * \t|________|_______|______|\r\n    * \t\t\t |       |\r\n    *           |       |\r\n    *        rectB\r\n    */\r\n    overlapAmount[0] += Math.min(rectB.getX() - rectA.getX(), rectA.getRight() - rectB.getRight());\r\n  } else if (rectB.getX() <= rectA.getX() && rectB.getRight() >= rectA.getRight()) {\r\n    /* Case x.2:\r\n    *\r\n    * rectB\r\n    * \t|                       |\r\n    * \t|        _________      |\r\n    * \t|        |       |      |\r\n    * \t|________|_______|______|\r\n    * \t\t\t |       |\r\n    *           |       |\r\n    *        rectA\r\n    */\r\n    overlapAmount[0] += Math.min(rectA.getX() - rectB.getX(), rectB.getRight() - rectA.getRight());\r\n  }\r\n  if (rectA.getY() <= rectB.getY() && rectA.getBottom() >= rectB.getBottom()) {\r\n    /* Case y.1:\r\n     *          ________ rectA\r\n     *         |\r\n     *         |\r\n     *   ______|____  rectB\r\n     *         |    |\r\n     *         |    |\r\n     *   ______|____|\r\n     *         |\r\n     *         |\r\n     *         |________\r\n     *\r\n     */\r\n    overlapAmount[1] += Math.min(rectB.getY() - rectA.getY(), rectA.getBottom() - rectB.getBottom());\r\n  } else if (rectB.getY() <= rectA.getY() && rectB.getBottom() >= rectA.getBottom()) {\r\n    /* Case y.2:\r\n    *          ________ rectB\r\n    *         |\r\n    *         |\r\n    *   ______|____  rectA\r\n    *         |    |\r\n    *         |    |\r\n    *   ______|____|\r\n    *         |\r\n    *         |\r\n    *         |________\r\n    *\r\n    */\r\n    overlapAmount[1] += Math.min(rectA.getY() - rectB.getY(), rectB.getBottom() - rectA.getBottom());\r\n  }\r\n\r\n  // find slope of the line passes two centers\r\n  var slope = Math.abs((rectB.getCenterY() - rectA.getCenterY()) / (rectB.getCenterX() - rectA.getCenterX()));\r\n  // if centers are overlapped\r\n  if (rectB.getCenterY() === rectA.getCenterY() && rectB.getCenterX() === rectA.getCenterX()) {\r\n    // assume the slope is 1 (45 degree)\r\n    slope = 1.0;\r\n  }\r\n\r\n  var moveByY = slope * overlapAmount[0];\r\n  var moveByX = overlapAmount[1] / slope;\r\n  if (overlapAmount[0] < moveByX) {\r\n    moveByX = overlapAmount[0];\r\n  } else {\r\n    moveByY = overlapAmount[1];\r\n  }\r\n  // return half the amount so that if each rectangle is moved by these\r\n  // amounts in opposite directions, overlap will be resolved\r\n  overlapAmount[0] = -1 * directions[0] * (moveByX / 2 + separationBuffer);\r\n  overlapAmount[1] = -1 * directions[1] * (moveByY / 2 + separationBuffer);\r\n};\r\n\r\n/**\r\n * This method decides the separation direction of overlapping nodes\r\n *\r\n * if directions[0] = -1, then rectA goes left\r\n * if directions[0] = 1,  then rectA goes right\r\n * if directions[1] = -1, then rectA goes up\r\n * if directions[1] = 1,  then rectA goes down\r\n */\r\nIGeometry.decideDirectionsForOverlappingNodes = function (rectA, rectB, directions) {\r\n  if (rectA.getCenterX() < rectB.getCenterX()) {\r\n    directions[0] = -1;\r\n  } else {\r\n    directions[0] = 1;\r\n  }\r\n\r\n  if (rectA.getCenterY() < rectB.getCenterY()) {\r\n    directions[1] = -1;\r\n  } else {\r\n    directions[1] = 1;\r\n  }\r\n};\r\n\r\n/**\r\n * This method calculates the intersection (clipping) points of the two\r\n * input rectangles with line segment defined by the centers of these two\r\n * rectangles. The clipping points are saved in the input double array and\r\n * whether or not the two rectangles overlap is returned.\r\n */\r\nIGeometry.getIntersection2 = function (rectA, rectB, result) {\r\n  //result[0-1] will contain clipPoint of rectA, result[2-3] will contain clipPoint of rectB\r\n  var p1x = rectA.getCenterX();\r\n  var p1y = rectA.getCenterY();\r\n  var p2x = rectB.getCenterX();\r\n  var p2y = rectB.getCenterY();\r\n\r\n  //if two rectangles intersect, then clipping points are centers\r\n  if (rectA.intersects(rectB)) {\r\n    result[0] = p1x;\r\n    result[1] = p1y;\r\n    result[2] = p2x;\r\n    result[3] = p2y;\r\n    return true;\r\n  }\r\n  //variables for rectA\r\n  var topLeftAx = rectA.getX();\r\n  var topLeftAy = rectA.getY();\r\n  var topRightAx = rectA.getRight();\r\n  var bottomLeftAx = rectA.getX();\r\n  var bottomLeftAy = rectA.getBottom();\r\n  var bottomRightAx = rectA.getRight();\r\n  var halfWidthA = rectA.getWidthHalf();\r\n  var halfHeightA = rectA.getHeightHalf();\r\n  //variables for rectB\r\n  var topLeftBx = rectB.getX();\r\n  var topLeftBy = rectB.getY();\r\n  var topRightBx = rectB.getRight();\r\n  var bottomLeftBx = rectB.getX();\r\n  var bottomLeftBy = rectB.getBottom();\r\n  var bottomRightBx = rectB.getRight();\r\n  var halfWidthB = rectB.getWidthHalf();\r\n  var halfHeightB = rectB.getHeightHalf();\r\n\r\n  //flag whether clipping points are found\r\n  var clipPointAFound = false;\r\n  var clipPointBFound = false;\r\n\r\n  // line is vertical\r\n  if (p1x === p2x) {\r\n    if (p1y > p2y) {\r\n      result[0] = p1x;\r\n      result[1] = topLeftAy;\r\n      result[2] = p2x;\r\n      result[3] = bottomLeftBy;\r\n      return false;\r\n    } else if (p1y < p2y) {\r\n      result[0] = p1x;\r\n      result[1] = bottomLeftAy;\r\n      result[2] = p2x;\r\n      result[3] = topLeftBy;\r\n      return false;\r\n    } else {\r\n      //not line, return null;\r\n    }\r\n  }\r\n  // line is horizontal\r\n  else if (p1y === p2y) {\r\n      if (p1x > p2x) {\r\n        result[0] = topLeftAx;\r\n        result[1] = p1y;\r\n        result[2] = topRightBx;\r\n        result[3] = p2y;\r\n        return false;\r\n      } else if (p1x < p2x) {\r\n        result[0] = topRightAx;\r\n        result[1] = p1y;\r\n        result[2] = topLeftBx;\r\n        result[3] = p2y;\r\n        return false;\r\n      } else {\r\n        //not valid line, return null;\r\n      }\r\n    } else {\r\n      //slopes of rectA's and rectB's diagonals\r\n      var slopeA = rectA.height / rectA.width;\r\n      var slopeB = rectB.height / rectB.width;\r\n\r\n      //slope of line between center of rectA and center of rectB\r\n      var slopePrime = (p2y - p1y) / (p2x - p1x);\r\n      var cardinalDirectionA = void 0;\r\n      var cardinalDirectionB = void 0;\r\n      var tempPointAx = void 0;\r\n      var tempPointAy = void 0;\r\n      var tempPointBx = void 0;\r\n      var tempPointBy = void 0;\r\n\r\n      //determine whether clipping point is the corner of nodeA\r\n      if (-slopeA === slopePrime) {\r\n        if (p1x > p2x) {\r\n          result[0] = bottomLeftAx;\r\n          result[1] = bottomLeftAy;\r\n          clipPointAFound = true;\r\n        } else {\r\n          result[0] = topRightAx;\r\n          result[1] = topLeftAy;\r\n          clipPointAFound = true;\r\n        }\r\n      } else if (slopeA === slopePrime) {\r\n        if (p1x > p2x) {\r\n          result[0] = topLeftAx;\r\n          result[1] = topLeftAy;\r\n          clipPointAFound = true;\r\n        } else {\r\n          result[0] = bottomRightAx;\r\n          result[1] = bottomLeftAy;\r\n          clipPointAFound = true;\r\n        }\r\n      }\r\n\r\n      //determine whether clipping point is the corner of nodeB\r\n      if (-slopeB === slopePrime) {\r\n        if (p2x > p1x) {\r\n          result[2] = bottomLeftBx;\r\n          result[3] = bottomLeftBy;\r\n          clipPointBFound = true;\r\n        } else {\r\n          result[2] = topRightBx;\r\n          result[3] = topLeftBy;\r\n          clipPointBFound = true;\r\n        }\r\n      } else if (slopeB === slopePrime) {\r\n        if (p2x > p1x) {\r\n          result[2] = topLeftBx;\r\n          result[3] = topLeftBy;\r\n          clipPointBFound = true;\r\n        } else {\r\n          result[2] = bottomRightBx;\r\n          result[3] = bottomLeftBy;\r\n          clipPointBFound = true;\r\n        }\r\n      }\r\n\r\n      //if both clipping points are corners\r\n      if (clipPointAFound && clipPointBFound) {\r\n        return false;\r\n      }\r\n\r\n      //determine Cardinal Direction of rectangles\r\n      if (p1x > p2x) {\r\n        if (p1y > p2y) {\r\n          cardinalDirectionA = this.getCardinalDirection(slopeA, slopePrime, 4);\r\n          cardinalDirectionB = this.getCardinalDirection(slopeB, slopePrime, 2);\r\n        } else {\r\n          cardinalDirectionA = this.getCardinalDirection(-slopeA, slopePrime, 3);\r\n          cardinalDirectionB = this.getCardinalDirection(-slopeB, slopePrime, 1);\r\n        }\r\n      } else {\r\n        if (p1y > p2y) {\r\n          cardinalDirectionA = this.getCardinalDirection(-slopeA, slopePrime, 1);\r\n          cardinalDirectionB = this.getCardinalDirection(-slopeB, slopePrime, 3);\r\n        } else {\r\n          cardinalDirectionA = this.getCardinalDirection(slopeA, slopePrime, 2);\r\n          cardinalDirectionB = this.getCardinalDirection(slopeB, slopePrime, 4);\r\n        }\r\n      }\r\n      //calculate clipping Point if it is not found before\r\n      if (!clipPointAFound) {\r\n        switch (cardinalDirectionA) {\r\n          case 1:\r\n            tempPointAy = topLeftAy;\r\n            tempPointAx = p1x + -halfHeightA / slopePrime;\r\n            result[0] = tempPointAx;\r\n            result[1] = tempPointAy;\r\n            break;\r\n          case 2:\r\n            tempPointAx = bottomRightAx;\r\n            tempPointAy = p1y + halfWidthA * slopePrime;\r\n            result[0] = tempPointAx;\r\n            result[1] = tempPointAy;\r\n            break;\r\n          case 3:\r\n            tempPointAy = bottomLeftAy;\r\n            tempPointAx = p1x + halfHeightA / slopePrime;\r\n            result[0] = tempPointAx;\r\n            result[1] = tempPointAy;\r\n            break;\r\n          case 4:\r\n            tempPointAx = bottomLeftAx;\r\n            tempPointAy = p1y + -halfWidthA * slopePrime;\r\n            result[0] = tempPointAx;\r\n            result[1] = tempPointAy;\r\n            break;\r\n        }\r\n      }\r\n      if (!clipPointBFound) {\r\n        switch (cardinalDirectionB) {\r\n          case 1:\r\n            tempPointBy = topLeftBy;\r\n            tempPointBx = p2x + -halfHeightB / slopePrime;\r\n            result[2] = tempPointBx;\r\n            result[3] = tempPointBy;\r\n            break;\r\n          case 2:\r\n            tempPointBx = bottomRightBx;\r\n            tempPointBy = p2y + halfWidthB * slopePrime;\r\n            result[2] = tempPointBx;\r\n            result[3] = tempPointBy;\r\n            break;\r\n          case 3:\r\n            tempPointBy = bottomLeftBy;\r\n            tempPointBx = p2x + halfHeightB / slopePrime;\r\n            result[2] = tempPointBx;\r\n            result[3] = tempPointBy;\r\n            break;\r\n          case 4:\r\n            tempPointBx = bottomLeftBx;\r\n            tempPointBy = p2y + -halfWidthB * slopePrime;\r\n            result[2] = tempPointBx;\r\n            result[3] = tempPointBy;\r\n            break;\r\n        }\r\n      }\r\n    }\r\n  return false;\r\n};\r\n\r\n/**\r\n * This method returns in which cardinal direction does input point stays\r\n * 1: North\r\n * 2: East\r\n * 3: South\r\n * 4: West\r\n */\r\nIGeometry.getCardinalDirection = function (slope, slopePrime, line) {\r\n  if (slope > slopePrime) {\r\n    return line;\r\n  } else {\r\n    return 1 + line % 4;\r\n  }\r\n};\r\n\r\n/**\r\n * This method calculates the intersection of the two lines defined by\r\n * point pairs (s1,s2) and (f1,f2).\r\n */\r\nIGeometry.getIntersection = function (s1, s2, f1, f2) {\r\n  if (f2 == null) {\r\n    return this.getIntersection2(s1, s2, f1);\r\n  }\r\n\r\n  var x1 = s1.x;\r\n  var y1 = s1.y;\r\n  var x2 = s2.x;\r\n  var y2 = s2.y;\r\n  var x3 = f1.x;\r\n  var y3 = f1.y;\r\n  var x4 = f2.x;\r\n  var y4 = f2.y;\r\n  var x = void 0,\r\n      y = void 0; // intersection point\r\n  var a1 = void 0,\r\n      a2 = void 0,\r\n      b1 = void 0,\r\n      b2 = void 0,\r\n      c1 = void 0,\r\n      c2 = void 0; // coefficients of line eqns.\r\n  var denom = void 0;\r\n\r\n  a1 = y2 - y1;\r\n  b1 = x1 - x2;\r\n  c1 = x2 * y1 - x1 * y2; // { a1*x + b1*y + c1 = 0 is line 1 }\r\n\r\n  a2 = y4 - y3;\r\n  b2 = x3 - x4;\r\n  c2 = x4 * y3 - x3 * y4; // { a2*x + b2*y + c2 = 0 is line 2 }\r\n\r\n  denom = a1 * b2 - a2 * b1;\r\n\r\n  if (denom === 0) {\r\n    return null;\r\n  }\r\n\r\n  x = (b1 * c2 - b2 * c1) / denom;\r\n  y = (a2 * c1 - a1 * c2) / denom;\r\n\r\n  return new Point(x, y);\r\n};\r\n\r\n/**\r\n * This method finds and returns the angle of the vector from the + x-axis\r\n * in clockwise direction (compatible w/ Java coordinate system!).\r\n */\r\nIGeometry.angleOfVector = function (Cx, Cy, Nx, Ny) {\r\n  var C_angle = void 0;\r\n\r\n  if (Cx !== Nx) {\r\n    C_angle = Math.atan((Ny - Cy) / (Nx - Cx));\r\n\r\n    if (Nx < Cx) {\r\n      C_angle += Math.PI;\r\n    } else if (Ny < Cy) {\r\n      C_angle += this.TWO_PI;\r\n    }\r\n  } else if (Ny < Cy) {\r\n    C_angle = this.ONE_AND_HALF_PI; // 270 degrees\r\n  } else {\r\n    C_angle = this.HALF_PI; // 90 degrees\r\n  }\r\n\r\n  return C_angle;\r\n};\r\n\r\n/**\r\n * This method checks whether the given two line segments (one with point\r\n * p1 and p2, the other with point p3 and p4) intersect at a point other\r\n * than these points.\r\n */\r\nIGeometry.doIntersect = function (p1, p2, p3, p4) {\r\n  var a = p1.x;\r\n  var b = p1.y;\r\n  var c = p2.x;\r\n  var d = p2.y;\r\n  var p = p3.x;\r\n  var q = p3.y;\r\n  var r = p4.x;\r\n  var s = p4.y;\r\n  var det = (c - a) * (s - q) - (r - p) * (d - b);\r\n\r\n  if (det === 0) {\r\n    return false;\r\n  } else {\r\n    var lambda = ((s - q) * (r - a) + (p - r) * (s - b)) / det;\r\n    var gamma = ((b - d) * (r - a) + (c - a) * (s - b)) / det;\r\n    return 0 < lambda && lambda < 1 && 0 < gamma && gamma < 1;\r\n  }\r\n};\r\n\r\n// -----------------------------------------------------------------------------\r\n// Section: Class Constants\r\n// -----------------------------------------------------------------------------\r\n/**\r\n * Some useful pre-calculated constants\r\n */\r\nIGeometry.HALF_PI = 0.5 * Math.PI;\r\nIGeometry.ONE_AND_HALF_PI = 1.5 * Math.PI;\r\nIGeometry.TWO_PI = 2.0 * Math.PI;\r\nIGeometry.THREE_PI = 3.0 * Math.PI;\r\n\r\nmodule.exports = IGeometry;\r\n\r\n/***/ }),\r\n/* 9 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nfunction IMath() {}\r\n\r\n/**\r\n * This method returns the sign of the input value.\r\n */\r\nIMath.sign = function (value) {\r\n  if (value > 0) {\r\n    return 1;\r\n  } else if (value < 0) {\r\n    return -1;\r\n  } else {\r\n    return 0;\r\n  }\r\n};\r\n\r\nIMath.floor = function (value) {\r\n  return value < 0 ? Math.ceil(value) : Math.floor(value);\r\n};\r\n\r\nIMath.ceil = function (value) {\r\n  return value < 0 ? Math.floor(value) : Math.ceil(value);\r\n};\r\n\r\nmodule.exports = IMath;\r\n\r\n/***/ }),\r\n/* 10 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nfunction Integer() {}\r\n\r\nInteger.MAX_VALUE = 2147483647;\r\nInteger.MIN_VALUE = -2147483648;\r\n\r\nmodule.exports = Integer;\r\n\r\n/***/ }),\r\n/* 11 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\r\n\r\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\r\n\r\nvar nodeFrom = function nodeFrom(value) {\r\n  return { value: value, next: null, prev: null };\r\n};\r\n\r\nvar add = function add(prev, node, next, list) {\r\n  if (prev !== null) {\r\n    prev.next = node;\r\n  } else {\r\n    list.head = node;\r\n  }\r\n\r\n  if (next !== null) {\r\n    next.prev = node;\r\n  } else {\r\n    list.tail = node;\r\n  }\r\n\r\n  node.prev = prev;\r\n  node.next = next;\r\n\r\n  list.length++;\r\n\r\n  return node;\r\n};\r\n\r\nvar _remove = function _remove(node, list) {\r\n  var prev = node.prev,\r\n      next = node.next;\r\n\r\n\r\n  if (prev !== null) {\r\n    prev.next = next;\r\n  } else {\r\n    list.head = next;\r\n  }\r\n\r\n  if (next !== null) {\r\n    next.prev = prev;\r\n  } else {\r\n    list.tail = prev;\r\n  }\r\n\r\n  node.prev = node.next = null;\r\n\r\n  list.length--;\r\n\r\n  return node;\r\n};\r\n\r\nvar LinkedList = function () {\r\n  function LinkedList(vals) {\r\n    var _this = this;\r\n\r\n    _classCallCheck(this, LinkedList);\r\n\r\n    this.length = 0;\r\n    this.head = null;\r\n    this.tail = null;\r\n\r\n    if (vals != null) {\r\n      vals.forEach(function (v) {\r\n        return _this.push(v);\r\n      });\r\n    }\r\n  }\r\n\r\n  _createClass(LinkedList, [{\r\n    key: \"size\",\r\n    value: function size() {\r\n      return this.length;\r\n    }\r\n  }, {\r\n    key: \"insertBefore\",\r\n    value: function insertBefore(val, otherNode) {\r\n      return add(otherNode.prev, nodeFrom(val), otherNode, this);\r\n    }\r\n  }, {\r\n    key: \"insertAfter\",\r\n    value: function insertAfter(val, otherNode) {\r\n      return add(otherNode, nodeFrom(val), otherNode.next, this);\r\n    }\r\n  }, {\r\n    key: \"insertNodeBefore\",\r\n    value: function insertNodeBefore(newNode, otherNode) {\r\n      return add(otherNode.prev, newNode, otherNode, this);\r\n    }\r\n  }, {\r\n    key: \"insertNodeAfter\",\r\n    value: function insertNodeAfter(newNode, otherNode) {\r\n      return add(otherNode, newNode, otherNode.next, this);\r\n    }\r\n  }, {\r\n    key: \"push\",\r\n    value: function push(val) {\r\n      return add(this.tail, nodeFrom(val), null, this);\r\n    }\r\n  }, {\r\n    key: \"unshift\",\r\n    value: function unshift(val) {\r\n      return add(null, nodeFrom(val), this.head, this);\r\n    }\r\n  }, {\r\n    key: \"remove\",\r\n    value: function remove(node) {\r\n      return _remove(node, this);\r\n    }\r\n  }, {\r\n    key: \"pop\",\r\n    value: function pop() {\r\n      return _remove(this.tail, this).value;\r\n    }\r\n  }, {\r\n    key: \"popNode\",\r\n    value: function popNode() {\r\n      return _remove(this.tail, this);\r\n    }\r\n  }, {\r\n    key: \"shift\",\r\n    value: function shift() {\r\n      return _remove(this.head, this).value;\r\n    }\r\n  }, {\r\n    key: \"shiftNode\",\r\n    value: function shiftNode() {\r\n      return _remove(this.head, this);\r\n    }\r\n  }, {\r\n    key: \"get_object_at\",\r\n    value: function get_object_at(index) {\r\n      if (index <= this.length()) {\r\n        var i = 1;\r\n        var current = this.head;\r\n        while (i < index) {\r\n          current = current.next;\r\n          i++;\r\n        }\r\n        return current.value;\r\n      }\r\n    }\r\n  }, {\r\n    key: \"set_object_at\",\r\n    value: function set_object_at(index, value) {\r\n      if (index <= this.length()) {\r\n        var i = 1;\r\n        var current = this.head;\r\n        while (i < index) {\r\n          current = current.next;\r\n          i++;\r\n        }\r\n        current.value = value;\r\n      }\r\n    }\r\n  }]);\r\n\r\n  return LinkedList;\r\n}();\r\n\r\nmodule.exports = LinkedList;\r\n\r\n/***/ }),\r\n/* 12 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\n/*\r\n *This class is the javascript implementation of the Point.java class in jdk\r\n */\r\nfunction Point(x, y, p) {\r\n  this.x = null;\r\n  this.y = null;\r\n  if (x == null && y == null && p == null) {\r\n    this.x = 0;\r\n    this.y = 0;\r\n  } else if (typeof x == 'number' && typeof y == 'number' && p == null) {\r\n    this.x = x;\r\n    this.y = y;\r\n  } else if (x.constructor.name == 'Point' && y == null && p == null) {\r\n    p = x;\r\n    this.x = p.x;\r\n    this.y = p.y;\r\n  }\r\n}\r\n\r\nPoint.prototype.getX = function () {\r\n  return this.x;\r\n};\r\n\r\nPoint.prototype.getY = function () {\r\n  return this.y;\r\n};\r\n\r\nPoint.prototype.getLocation = function () {\r\n  return new Point(this.x, this.y);\r\n};\r\n\r\nPoint.prototype.setLocation = function (x, y, p) {\r\n  if (x.constructor.name == 'Point' && y == null && p == null) {\r\n    p = x;\r\n    this.setLocation(p.x, p.y);\r\n  } else if (typeof x == 'number' && typeof y == 'number' && p == null) {\r\n    //if both parameters are integer just move (x,y) location\r\n    if (parseInt(x) == x && parseInt(y) == y) {\r\n      this.move(x, y);\r\n    } else {\r\n      this.x = Math.floor(x + 0.5);\r\n      this.y = Math.floor(y + 0.5);\r\n    }\r\n  }\r\n};\r\n\r\nPoint.prototype.move = function (x, y) {\r\n  this.x = x;\r\n  this.y = y;\r\n};\r\n\r\nPoint.prototype.translate = function (dx, dy) {\r\n  this.x += dx;\r\n  this.y += dy;\r\n};\r\n\r\nPoint.prototype.equals = function (obj) {\r\n  if (obj.constructor.name == \"Point\") {\r\n    var pt = obj;\r\n    return this.x == pt.x && this.y == pt.y;\r\n  }\r\n  return this == obj;\r\n};\r\n\r\nPoint.prototype.toString = function () {\r\n  return new Point().constructor.name + \"[x=\" + this.x + \",y=\" + this.y + \"]\";\r\n};\r\n\r\nmodule.exports = Point;\r\n\r\n/***/ }),\r\n/* 13 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nfunction RectangleD(x, y, width, height) {\r\n  this.x = 0;\r\n  this.y = 0;\r\n  this.width = 0;\r\n  this.height = 0;\r\n\r\n  if (x != null && y != null && width != null && height != null) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.width = width;\r\n    this.height = height;\r\n  }\r\n}\r\n\r\nRectangleD.prototype.getX = function () {\r\n  return this.x;\r\n};\r\n\r\nRectangleD.prototype.setX = function (x) {\r\n  this.x = x;\r\n};\r\n\r\nRectangleD.prototype.getY = function () {\r\n  return this.y;\r\n};\r\n\r\nRectangleD.prototype.setY = function (y) {\r\n  this.y = y;\r\n};\r\n\r\nRectangleD.prototype.getWidth = function () {\r\n  return this.width;\r\n};\r\n\r\nRectangleD.prototype.setWidth = function (width) {\r\n  this.width = width;\r\n};\r\n\r\nRectangleD.prototype.getHeight = function () {\r\n  return this.height;\r\n};\r\n\r\nRectangleD.prototype.setHeight = function (height) {\r\n  this.height = height;\r\n};\r\n\r\nRectangleD.prototype.getRight = function () {\r\n  return this.x + this.width;\r\n};\r\n\r\nRectangleD.prototype.getBottom = function () {\r\n  return this.y + this.height;\r\n};\r\n\r\nRectangleD.prototype.intersects = function (a) {\r\n  if (this.getRight() < a.x) {\r\n    return false;\r\n  }\r\n\r\n  if (this.getBottom() < a.y) {\r\n    return false;\r\n  }\r\n\r\n  if (a.getRight() < this.x) {\r\n    return false;\r\n  }\r\n\r\n  if (a.getBottom() < this.y) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nRectangleD.prototype.getCenterX = function () {\r\n  return this.x + this.width / 2;\r\n};\r\n\r\nRectangleD.prototype.getMinX = function () {\r\n  return this.getX();\r\n};\r\n\r\nRectangleD.prototype.getMaxX = function () {\r\n  return this.getX() + this.width;\r\n};\r\n\r\nRectangleD.prototype.getCenterY = function () {\r\n  return this.y + this.height / 2;\r\n};\r\n\r\nRectangleD.prototype.getMinY = function () {\r\n  return this.getY();\r\n};\r\n\r\nRectangleD.prototype.getMaxY = function () {\r\n  return this.getY() + this.height;\r\n};\r\n\r\nRectangleD.prototype.getWidthHalf = function () {\r\n  return this.width / 2;\r\n};\r\n\r\nRectangleD.prototype.getHeightHalf = function () {\r\n  return this.height / 2;\r\n};\r\n\r\nmodule.exports = RectangleD;\r\n\r\n/***/ }),\r\n/* 14 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\r\n\r\nfunction UniqueIDGeneretor() {}\r\n\r\nUniqueIDGeneretor.lastID = 0;\r\n\r\nUniqueIDGeneretor.createID = function (obj) {\r\n  if (UniqueIDGeneretor.isPrimitive(obj)) {\r\n    return obj;\r\n  }\r\n  if (obj.uniqueID != null) {\r\n    return obj.uniqueID;\r\n  }\r\n  obj.uniqueID = UniqueIDGeneretor.getString();\r\n  UniqueIDGeneretor.lastID++;\r\n  return obj.uniqueID;\r\n};\r\n\r\nUniqueIDGeneretor.getString = function (id) {\r\n  if (id == null) id = UniqueIDGeneretor.lastID;\r\n  return \"Object#\" + id + \"\";\r\n};\r\n\r\nUniqueIDGeneretor.isPrimitive = function (arg) {\r\n  var type = typeof arg === \"undefined\" ? \"undefined\" : _typeof(arg);\r\n  return arg == null || type != \"object\" && type != \"function\";\r\n};\r\n\r\nmodule.exports = UniqueIDGeneretor;\r\n\r\n/***/ }),\r\n/* 15 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\r\n\r\nvar LayoutConstants = __webpack_require__(0);\r\nvar LGraphManager = __webpack_require__(6);\r\nvar LNode = __webpack_require__(3);\r\nvar LEdge = __webpack_require__(1);\r\nvar LGraph = __webpack_require__(5);\r\nvar PointD = __webpack_require__(4);\r\nvar Transform = __webpack_require__(17);\r\nvar Emitter = __webpack_require__(27);\r\n\r\nfunction Layout(isRemoteUse) {\r\n  Emitter.call(this);\r\n\r\n  //Layout Quality: 0:draft, 1:default, 2:proof\r\n  this.layoutQuality = LayoutConstants.QUALITY;\r\n  //Whether layout should create bendpoints as needed or not\r\n  this.createBendsAsNeeded = LayoutConstants.DEFAULT_CREATE_BENDS_AS_NEEDED;\r\n  //Whether layout should be incremental or not\r\n  this.incremental = LayoutConstants.DEFAULT_INCREMENTAL;\r\n  //Whether we animate from before to after layout node positions\r\n  this.animationOnLayout = LayoutConstants.DEFAULT_ANIMATION_ON_LAYOUT;\r\n  //Whether we animate the layout process or not\r\n  this.animationDuringLayout = LayoutConstants.DEFAULT_ANIMATION_DURING_LAYOUT;\r\n  //Number iterations that should be done between two successive animations\r\n  this.animationPeriod = LayoutConstants.DEFAULT_ANIMATION_PERIOD;\r\n  /**\r\n   * Whether or not leaf nodes (non-compound nodes) are of uniform sizes. When\r\n   * they are, both spring and repulsion forces between two leaf nodes can be\r\n   * calculated without the expensive clipping point calculations, resulting\r\n   * in major speed-up.\r\n   */\r\n  this.uniformLeafNodeSizes = LayoutConstants.DEFAULT_UNIFORM_LEAF_NODE_SIZES;\r\n  /**\r\n   * This is used for creation of bendpoints by using dummy nodes and edges.\r\n   * Maps an LEdge to its dummy bendpoint path.\r\n   */\r\n  this.edgeToDummyNodes = new Map();\r\n  this.graphManager = new LGraphManager(this);\r\n  this.isLayoutFinished = false;\r\n  this.isSubLayout = false;\r\n  this.isRemoteUse = false;\r\n\r\n  if (isRemoteUse != null) {\r\n    this.isRemoteUse = isRemoteUse;\r\n  }\r\n}\r\n\r\nLayout.RANDOM_SEED = 1;\r\n\r\nLayout.prototype = Object.create(Emitter.prototype);\r\n\r\nLayout.prototype.getGraphManager = function () {\r\n  return this.graphManager;\r\n};\r\n\r\nLayout.prototype.getAllNodes = function () {\r\n  return this.graphManager.getAllNodes();\r\n};\r\n\r\nLayout.prototype.getAllEdges = function () {\r\n  return this.graphManager.getAllEdges();\r\n};\r\n\r\nLayout.prototype.getAllNodesToApplyGravitation = function () {\r\n  return this.graphManager.getAllNodesToApplyGravitation();\r\n};\r\n\r\nLayout.prototype.newGraphManager = function () {\r\n  var gm = new LGraphManager(this);\r\n  this.graphManager = gm;\r\n  return gm;\r\n};\r\n\r\nLayout.prototype.newGraph = function (vGraph) {\r\n  return new LGraph(null, this.graphManager, vGraph);\r\n};\r\n\r\nLayout.prototype.newNode = function (vNode) {\r\n  return new LNode(this.graphManager, vNode);\r\n};\r\n\r\nLayout.prototype.newEdge = function (vEdge) {\r\n  return new LEdge(null, null, vEdge);\r\n};\r\n\r\nLayout.prototype.checkLayoutSuccess = function () {\r\n  return this.graphManager.getRoot() == null || this.graphManager.getRoot().getNodes().length == 0 || this.graphManager.includesInvalidEdge();\r\n};\r\n\r\nLayout.prototype.runLayout = function () {\r\n  this.isLayoutFinished = false;\r\n\r\n  if (this.tilingPreLayout) {\r\n    this.tilingPreLayout();\r\n  }\r\n\r\n  this.initParameters();\r\n  var isLayoutSuccessfull;\r\n\r\n  if (this.checkLayoutSuccess()) {\r\n    isLayoutSuccessfull = false;\r\n  } else {\r\n    isLayoutSuccessfull = this.layout();\r\n  }\r\n\r\n  if (LayoutConstants.ANIMATE === 'during') {\r\n    // If this is a 'during' layout animation. Layout is not finished yet. \r\n    // We need to perform these in index.js when layout is really finished.\r\n    return false;\r\n  }\r\n\r\n  if (isLayoutSuccessfull) {\r\n    if (!this.isSubLayout) {\r\n      this.doPostLayout();\r\n    }\r\n  }\r\n\r\n  if (this.tilingPostLayout) {\r\n    this.tilingPostLayout();\r\n  }\r\n\r\n  this.isLayoutFinished = true;\r\n\r\n  return isLayoutSuccessfull;\r\n};\r\n\r\n/**\r\n * This method performs the operations required after layout.\r\n */\r\nLayout.prototype.doPostLayout = function () {\r\n  //assert !isSubLayout : \"Should not be called on sub-layout!\";\r\n  // Propagate geometric changes to v-level objects\r\n  if (!this.incremental) {\r\n    this.transform();\r\n  }\r\n  this.update();\r\n};\r\n\r\n/**\r\n * This method updates the geometry of the target graph according to\r\n * calculated layout.\r\n */\r\nLayout.prototype.update2 = function () {\r\n  // update bend points\r\n  if (this.createBendsAsNeeded) {\r\n    this.createBendpointsFromDummyNodes();\r\n\r\n    // reset all edges, since the topology has changed\r\n    this.graphManager.resetAllEdges();\r\n  }\r\n\r\n  // perform edge, node and root updates if layout is not called\r\n  // remotely\r\n  if (!this.isRemoteUse) {\r\n    // update all edges\r\n    var edge;\r\n    var allEdges = this.graphManager.getAllEdges();\r\n    for (var i = 0; i < allEdges.length; i++) {\r\n      edge = allEdges[i];\r\n      //      this.update(edge);\r\n    }\r\n\r\n    // recursively update nodes\r\n    var node;\r\n    var nodes = this.graphManager.getRoot().getNodes();\r\n    for (var i = 0; i < nodes.length; i++) {\r\n      node = nodes[i];\r\n      //      this.update(node);\r\n    }\r\n\r\n    // update root graph\r\n    this.update(this.graphManager.getRoot());\r\n  }\r\n};\r\n\r\nLayout.prototype.update = function (obj) {\r\n  if (obj == null) {\r\n    this.update2();\r\n  } else if (obj instanceof LNode) {\r\n    var node = obj;\r\n    if (node.getChild() != null) {\r\n      // since node is compound, recursively update child nodes\r\n      var nodes = node.getChild().getNodes();\r\n      for (var i = 0; i < nodes.length; i++) {\r\n        update(nodes[i]);\r\n      }\r\n    }\r\n\r\n    // if the l-level node is associated with a v-level graph object,\r\n    // then it is assumed that the v-level node implements the\r\n    // interface Updatable.\r\n    if (node.vGraphObject != null) {\r\n      // cast to Updatable without any type check\r\n      var vNode = node.vGraphObject;\r\n\r\n      // call the update method of the interface\r\n      vNode.update(node);\r\n    }\r\n  } else if (obj instanceof LEdge) {\r\n    var edge = obj;\r\n    // if the l-level edge is associated with a v-level graph object,\r\n    // then it is assumed that the v-level edge implements the\r\n    // interface Updatable.\r\n\r\n    if (edge.vGraphObject != null) {\r\n      // cast to Updatable without any type check\r\n      var vEdge = edge.vGraphObject;\r\n\r\n      // call the update method of the interface\r\n      vEdge.update(edge);\r\n    }\r\n  } else if (obj instanceof LGraph) {\r\n    var graph = obj;\r\n    // if the l-level graph is associated with a v-level graph object,\r\n    // then it is assumed that the v-level object implements the\r\n    // interface Updatable.\r\n\r\n    if (graph.vGraphObject != null) {\r\n      // cast to Updatable without any type check\r\n      var vGraph = graph.vGraphObject;\r\n\r\n      // call the update method of the interface\r\n      vGraph.update(graph);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * This method is used to set all layout parameters to default values\r\n * determined at compile time.\r\n */\r\nLayout.prototype.initParameters = function () {\r\n  if (!this.isSubLayout) {\r\n    this.layoutQuality = LayoutConstants.QUALITY;\r\n    this.animationDuringLayout = LayoutConstants.DEFAULT_ANIMATION_DURING_LAYOUT;\r\n    this.animationPeriod = LayoutConstants.DEFAULT_ANIMATION_PERIOD;\r\n    this.animationOnLayout = LayoutConstants.DEFAULT_ANIMATION_ON_LAYOUT;\r\n    this.incremental = LayoutConstants.DEFAULT_INCREMENTAL;\r\n    this.createBendsAsNeeded = LayoutConstants.DEFAULT_CREATE_BENDS_AS_NEEDED;\r\n    this.uniformLeafNodeSizes = LayoutConstants.DEFAULT_UNIFORM_LEAF_NODE_SIZES;\r\n  }\r\n\r\n  if (this.animationDuringLayout) {\r\n    this.animationOnLayout = false;\r\n  }\r\n};\r\n\r\nLayout.prototype.transform = function (newLeftTop) {\r\n  if (newLeftTop == undefined) {\r\n    this.transform(new PointD(0, 0));\r\n  } else {\r\n    // create a transformation object (from Eclipse to layout). When an\r\n    // inverse transform is applied, we get upper-left coordinate of the\r\n    // drawing or the root graph at given input coordinate (some margins\r\n    // already included in calculation of left-top).\r\n\r\n    var trans = new Transform();\r\n    var leftTop = this.graphManager.getRoot().updateLeftTop();\r\n\r\n    if (leftTop != null) {\r\n      trans.setWorldOrgX(newLeftTop.x);\r\n      trans.setWorldOrgY(newLeftTop.y);\r\n\r\n      trans.setDeviceOrgX(leftTop.x);\r\n      trans.setDeviceOrgY(leftTop.y);\r\n\r\n      var nodes = this.getAllNodes();\r\n      var node;\r\n\r\n      for (var i = 0; i < nodes.length; i++) {\r\n        node = nodes[i];\r\n        node.transform(trans);\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nLayout.prototype.positionNodesRandomly = function (graph) {\r\n\r\n  if (graph == undefined) {\r\n    //assert !this.incremental;\r\n    this.positionNodesRandomly(this.getGraphManager().getRoot());\r\n    this.getGraphManager().getRoot().updateBounds(true);\r\n  } else {\r\n    var lNode;\r\n    var childGraph;\r\n\r\n    var nodes = graph.getNodes();\r\n    for (var i = 0; i < nodes.length; i++) {\r\n      lNode = nodes[i];\r\n      childGraph = lNode.getChild();\r\n\r\n      if (childGraph == null) {\r\n        lNode.scatter();\r\n      } else if (childGraph.getNodes().length == 0) {\r\n        lNode.scatter();\r\n      } else {\r\n        this.positionNodesRandomly(childGraph);\r\n        lNode.updateBounds();\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * This method returns a list of trees where each tree is represented as a\r\n * list of l-nodes. The method returns a list of size 0 when:\r\n * - The graph is not flat or\r\n * - One of the component(s) of the graph is not a tree.\r\n */\r\nLayout.prototype.getFlatForest = function () {\r\n  var flatForest = [];\r\n  var isForest = true;\r\n\r\n  // Quick reference for all nodes in the graph manager associated with\r\n  // this layout. The list should not be changed.\r\n  var allNodes = this.graphManager.getRoot().getNodes();\r\n\r\n  // First be sure that the graph is flat\r\n  var isFlat = true;\r\n\r\n  for (var i = 0; i < allNodes.length; i++) {\r\n    if (allNodes[i].getChild() != null) {\r\n      isFlat = false;\r\n    }\r\n  }\r\n\r\n  // Return empty forest if the graph is not flat.\r\n  if (!isFlat) {\r\n    return flatForest;\r\n  }\r\n\r\n  // Run BFS for each component of the graph.\r\n\r\n  var visited = new Set();\r\n  var toBeVisited = [];\r\n  var parents = new Map();\r\n  var unProcessedNodes = [];\r\n\r\n  unProcessedNodes = unProcessedNodes.concat(allNodes);\r\n\r\n  // Each iteration of this loop finds a component of the graph and\r\n  // decides whether it is a tree or not. If it is a tree, adds it to the\r\n  // forest and continued with the next component.\r\n\r\n  while (unProcessedNodes.length > 0 && isForest) {\r\n    toBeVisited.push(unProcessedNodes[0]);\r\n\r\n    // Start the BFS. Each iteration of this loop visits a node in a\r\n    // BFS manner.\r\n    while (toBeVisited.length > 0 && isForest) {\r\n      //pool operation\r\n      var currentNode = toBeVisited[0];\r\n      toBeVisited.splice(0, 1);\r\n      visited.add(currentNode);\r\n\r\n      // Traverse all neighbors of this node\r\n      var neighborEdges = currentNode.getEdges();\r\n\r\n      for (var i = 0; i < neighborEdges.length; i++) {\r\n        var currentNeighbor = neighborEdges[i].getOtherEnd(currentNode);\r\n\r\n        // If BFS is not growing from this neighbor.\r\n        if (parents.get(currentNode) != currentNeighbor) {\r\n          // We haven't previously visited this neighbor.\r\n          if (!visited.has(currentNeighbor)) {\r\n            toBeVisited.push(currentNeighbor);\r\n            parents.set(currentNeighbor, currentNode);\r\n          }\r\n          // Since we have previously visited this neighbor and\r\n          // this neighbor is not parent of currentNode, given\r\n          // graph contains a component that is not tree, hence\r\n          // it is not a forest.\r\n          else {\r\n              isForest = false;\r\n              break;\r\n            }\r\n        }\r\n      }\r\n    }\r\n\r\n    // The graph contains a component that is not a tree. Empty\r\n    // previously found trees. The method will end.\r\n    if (!isForest) {\r\n      flatForest = [];\r\n    }\r\n    // Save currently visited nodes as a tree in our forest. Reset\r\n    // visited and parents lists. Continue with the next component of\r\n    // the graph, if any.\r\n    else {\r\n        var temp = [].concat(_toConsumableArray(visited));\r\n        flatForest.push(temp);\r\n        //flatForest = flatForest.concat(temp);\r\n        //unProcessedNodes.removeAll(visited);\r\n        for (var i = 0; i < temp.length; i++) {\r\n          var value = temp[i];\r\n          var index = unProcessedNodes.indexOf(value);\r\n          if (index > -1) {\r\n            unProcessedNodes.splice(index, 1);\r\n          }\r\n        }\r\n        visited = new Set();\r\n        parents = new Map();\r\n      }\r\n  }\r\n\r\n  return flatForest;\r\n};\r\n\r\n/**\r\n * This method creates dummy nodes (an l-level node with minimal dimensions)\r\n * for the given edge (one per bendpoint). The existing l-level structure\r\n * is updated accordingly.\r\n */\r\nLayout.prototype.createDummyNodesForBendpoints = function (edge) {\r\n  var dummyNodes = [];\r\n  var prev = edge.source;\r\n\r\n  var graph = this.graphManager.calcLowestCommonAncestor(edge.source, edge.target);\r\n\r\n  for (var i = 0; i < edge.bendpoints.length; i++) {\r\n    // create new dummy node\r\n    var dummyNode = this.newNode(null);\r\n    dummyNode.setRect(new Point(0, 0), new Dimension(1, 1));\r\n\r\n    graph.add(dummyNode);\r\n\r\n    // create new dummy edge between prev and dummy node\r\n    var dummyEdge = this.newEdge(null);\r\n    this.graphManager.add(dummyEdge, prev, dummyNode);\r\n\r\n    dummyNodes.add(dummyNode);\r\n    prev = dummyNode;\r\n  }\r\n\r\n  var dummyEdge = this.newEdge(null);\r\n  this.graphManager.add(dummyEdge, prev, edge.target);\r\n\r\n  this.edgeToDummyNodes.set(edge, dummyNodes);\r\n\r\n  // remove real edge from graph manager if it is inter-graph\r\n  if (edge.isInterGraph()) {\r\n    this.graphManager.remove(edge);\r\n  }\r\n  // else, remove the edge from the current graph\r\n  else {\r\n      graph.remove(edge);\r\n    }\r\n\r\n  return dummyNodes;\r\n};\r\n\r\n/**\r\n * This method creates bendpoints for edges from the dummy nodes\r\n * at l-level.\r\n */\r\nLayout.prototype.createBendpointsFromDummyNodes = function () {\r\n  var edges = [];\r\n  edges = edges.concat(this.graphManager.getAllEdges());\r\n  edges = [].concat(_toConsumableArray(this.edgeToDummyNodes.keys())).concat(edges);\r\n\r\n  for (var k = 0; k < edges.length; k++) {\r\n    var lEdge = edges[k];\r\n\r\n    if (lEdge.bendpoints.length > 0) {\r\n      var path = this.edgeToDummyNodes.get(lEdge);\r\n\r\n      for (var i = 0; i < path.length; i++) {\r\n        var dummyNode = path[i];\r\n        var p = new PointD(dummyNode.getCenterX(), dummyNode.getCenterY());\r\n\r\n        // update bendpoint's location according to dummy node\r\n        var ebp = lEdge.bendpoints.get(i);\r\n        ebp.x = p.x;\r\n        ebp.y = p.y;\r\n\r\n        // remove the dummy node, dummy edges incident with this\r\n        // dummy node is also removed (within the remove method)\r\n        dummyNode.getOwner().remove(dummyNode);\r\n      }\r\n\r\n      // add the real edge to graph\r\n      this.graphManager.add(lEdge, lEdge.source, lEdge.target);\r\n    }\r\n  }\r\n};\r\n\r\nLayout.transform = function (sliderValue, defaultValue, minDiv, maxMul) {\r\n  if (minDiv != undefined && maxMul != undefined) {\r\n    var value = defaultValue;\r\n\r\n    if (sliderValue <= 50) {\r\n      var minValue = defaultValue / minDiv;\r\n      value -= (defaultValue - minValue) / 50 * (50 - sliderValue);\r\n    } else {\r\n      var maxValue = defaultValue * maxMul;\r\n      value += (maxValue - defaultValue) / 50 * (sliderValue - 50);\r\n    }\r\n\r\n    return value;\r\n  } else {\r\n    var a, b;\r\n\r\n    if (sliderValue <= 50) {\r\n      a = 9.0 * defaultValue / 500.0;\r\n      b = defaultValue / 10.0;\r\n    } else {\r\n      a = 9.0 * defaultValue / 50.0;\r\n      b = -8 * defaultValue;\r\n    }\r\n\r\n    return a * sliderValue + b;\r\n  }\r\n};\r\n\r\n/**\r\n * This method finds and returns the center of the given nodes, assuming\r\n * that the given nodes form a tree in themselves.\r\n */\r\nLayout.findCenterOfTree = function (nodes) {\r\n  var list = [];\r\n  list = list.concat(nodes);\r\n\r\n  var removedNodes = [];\r\n  var remainingDegrees = new Map();\r\n  var foundCenter = false;\r\n  var centerNode = null;\r\n\r\n  if (list.length == 1 || list.length == 2) {\r\n    foundCenter = true;\r\n    centerNode = list[0];\r\n  }\r\n\r\n  for (var i = 0; i < list.length; i++) {\r\n    var node = list[i];\r\n    var degree = node.getNeighborsList().size;\r\n    remainingDegrees.set(node, node.getNeighborsList().size);\r\n\r\n    if (degree == 1) {\r\n      removedNodes.push(node);\r\n    }\r\n  }\r\n\r\n  var tempList = [];\r\n  tempList = tempList.concat(removedNodes);\r\n\r\n  while (!foundCenter) {\r\n    var tempList2 = [];\r\n    tempList2 = tempList2.concat(tempList);\r\n    tempList = [];\r\n\r\n    for (var i = 0; i < list.length; i++) {\r\n      var node = list[i];\r\n\r\n      var index = list.indexOf(node);\r\n      if (index >= 0) {\r\n        list.splice(index, 1);\r\n      }\r\n\r\n      var neighbours = node.getNeighborsList();\r\n\r\n      neighbours.forEach(function (neighbour) {\r\n        if (removedNodes.indexOf(neighbour) < 0) {\r\n          var otherDegree = remainingDegrees.get(neighbour);\r\n          var newDegree = otherDegree - 1;\r\n\r\n          if (newDegree == 1) {\r\n            tempList.push(neighbour);\r\n          }\r\n\r\n          remainingDegrees.set(neighbour, newDegree);\r\n        }\r\n      });\r\n    }\r\n\r\n    removedNodes = removedNodes.concat(tempList);\r\n\r\n    if (list.length == 1 || list.length == 2) {\r\n      foundCenter = true;\r\n      centerNode = list[0];\r\n    }\r\n  }\r\n\r\n  return centerNode;\r\n};\r\n\r\n/**\r\n * During the coarsening process, this layout may be referenced by two graph managers\r\n * this setter function grants access to change the currently being used graph manager\r\n */\r\nLayout.prototype.setGraphManager = function (gm) {\r\n  this.graphManager = gm;\r\n};\r\n\r\nmodule.exports = Layout;\r\n\r\n/***/ }),\r\n/* 16 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nfunction RandomSeed() {}\r\n// adapted from: https://stackoverflow.com/a/19303725\r\nRandomSeed.seed = 1;\r\nRandomSeed.x = 0;\r\n\r\nRandomSeed.nextDouble = function () {\r\n  RandomSeed.x = Math.sin(RandomSeed.seed++) * 10000;\r\n  return RandomSeed.x - Math.floor(RandomSeed.x);\r\n};\r\n\r\nmodule.exports = RandomSeed;\r\n\r\n/***/ }),\r\n/* 17 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nvar PointD = __webpack_require__(4);\r\n\r\nfunction Transform(x, y) {\r\n  this.lworldOrgX = 0.0;\r\n  this.lworldOrgY = 0.0;\r\n  this.ldeviceOrgX = 0.0;\r\n  this.ldeviceOrgY = 0.0;\r\n  this.lworldExtX = 1.0;\r\n  this.lworldExtY = 1.0;\r\n  this.ldeviceExtX = 1.0;\r\n  this.ldeviceExtY = 1.0;\r\n}\r\n\r\nTransform.prototype.getWorldOrgX = function () {\r\n  return this.lworldOrgX;\r\n};\r\n\r\nTransform.prototype.setWorldOrgX = function (wox) {\r\n  this.lworldOrgX = wox;\r\n};\r\n\r\nTransform.prototype.getWorldOrgY = function () {\r\n  return this.lworldOrgY;\r\n};\r\n\r\nTransform.prototype.setWorldOrgY = function (woy) {\r\n  this.lworldOrgY = woy;\r\n};\r\n\r\nTransform.prototype.getWorldExtX = function () {\r\n  return this.lworldExtX;\r\n};\r\n\r\nTransform.prototype.setWorldExtX = function (wex) {\r\n  this.lworldExtX = wex;\r\n};\r\n\r\nTransform.prototype.getWorldExtY = function () {\r\n  return this.lworldExtY;\r\n};\r\n\r\nTransform.prototype.setWorldExtY = function (wey) {\r\n  this.lworldExtY = wey;\r\n};\r\n\r\n/* Device related */\r\n\r\nTransform.prototype.getDeviceOrgX = function () {\r\n  return this.ldeviceOrgX;\r\n};\r\n\r\nTransform.prototype.setDeviceOrgX = function (dox) {\r\n  this.ldeviceOrgX = dox;\r\n};\r\n\r\nTransform.prototype.getDeviceOrgY = function () {\r\n  return this.ldeviceOrgY;\r\n};\r\n\r\nTransform.prototype.setDeviceOrgY = function (doy) {\r\n  this.ldeviceOrgY = doy;\r\n};\r\n\r\nTransform.prototype.getDeviceExtX = function () {\r\n  return this.ldeviceExtX;\r\n};\r\n\r\nTransform.prototype.setDeviceExtX = function (dex) {\r\n  this.ldeviceExtX = dex;\r\n};\r\n\r\nTransform.prototype.getDeviceExtY = function () {\r\n  return this.ldeviceExtY;\r\n};\r\n\r\nTransform.prototype.setDeviceExtY = function (dey) {\r\n  this.ldeviceExtY = dey;\r\n};\r\n\r\nTransform.prototype.transformX = function (x) {\r\n  var xDevice = 0.0;\r\n  var worldExtX = this.lworldExtX;\r\n  if (worldExtX != 0.0) {\r\n    xDevice = this.ldeviceOrgX + (x - this.lworldOrgX) * this.ldeviceExtX / worldExtX;\r\n  }\r\n\r\n  return xDevice;\r\n};\r\n\r\nTransform.prototype.transformY = function (y) {\r\n  var yDevice = 0.0;\r\n  var worldExtY = this.lworldExtY;\r\n  if (worldExtY != 0.0) {\r\n    yDevice = this.ldeviceOrgY + (y - this.lworldOrgY) * this.ldeviceExtY / worldExtY;\r\n  }\r\n\r\n  return yDevice;\r\n};\r\n\r\nTransform.prototype.inverseTransformX = function (x) {\r\n  var xWorld = 0.0;\r\n  var deviceExtX = this.ldeviceExtX;\r\n  if (deviceExtX != 0.0) {\r\n    xWorld = this.lworldOrgX + (x - this.ldeviceOrgX) * this.lworldExtX / deviceExtX;\r\n  }\r\n\r\n  return xWorld;\r\n};\r\n\r\nTransform.prototype.inverseTransformY = function (y) {\r\n  var yWorld = 0.0;\r\n  var deviceExtY = this.ldeviceExtY;\r\n  if (deviceExtY != 0.0) {\r\n    yWorld = this.lworldOrgY + (y - this.ldeviceOrgY) * this.lworldExtY / deviceExtY;\r\n  }\r\n  return yWorld;\r\n};\r\n\r\nTransform.prototype.inverseTransformPoint = function (inPoint) {\r\n  var outPoint = new PointD(this.inverseTransformX(inPoint.x), this.inverseTransformY(inPoint.y));\r\n  return outPoint;\r\n};\r\n\r\nmodule.exports = Transform;\r\n\r\n/***/ }),\r\n/* 18 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\r\n\r\nvar Layout = __webpack_require__(15);\r\nvar FDLayoutConstants = __webpack_require__(7);\r\nvar LayoutConstants = __webpack_require__(0);\r\nvar IGeometry = __webpack_require__(8);\r\nvar IMath = __webpack_require__(9);\r\n\r\nfunction FDLayout() {\r\n  Layout.call(this);\r\n\r\n  this.useSmartIdealEdgeLengthCalculation = FDLayoutConstants.DEFAULT_USE_SMART_IDEAL_EDGE_LENGTH_CALCULATION;\r\n  this.idealEdgeLength = FDLayoutConstants.DEFAULT_EDGE_LENGTH;\r\n  this.springConstant = FDLayoutConstants.DEFAULT_SPRING_STRENGTH;\r\n  this.repulsionConstant = FDLayoutConstants.DEFAULT_REPULSION_STRENGTH;\r\n  this.gravityConstant = FDLayoutConstants.DEFAULT_GRAVITY_STRENGTH;\r\n  this.compoundGravityConstant = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_STRENGTH;\r\n  this.gravityRangeFactor = FDLayoutConstants.DEFAULT_GRAVITY_RANGE_FACTOR;\r\n  this.compoundGravityRangeFactor = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_RANGE_FACTOR;\r\n  this.displacementThresholdPerNode = 3.0 * FDLayoutConstants.DEFAULT_EDGE_LENGTH / 100;\r\n  this.coolingFactor = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL;\r\n  this.initialCoolingFactor = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL;\r\n  this.totalDisplacement = 0.0;\r\n  this.oldTotalDisplacement = 0.0;\r\n  this.maxIterations = FDLayoutConstants.MAX_ITERATIONS;\r\n}\r\n\r\nFDLayout.prototype = Object.create(Layout.prototype);\r\n\r\nfor (var prop in Layout) {\r\n  FDLayout[prop] = Layout[prop];\r\n}\r\n\r\nFDLayout.prototype.initParameters = function () {\r\n  Layout.prototype.initParameters.call(this, arguments);\r\n\r\n  this.totalIterations = 0;\r\n  this.notAnimatedIterations = 0;\r\n\r\n  this.useFRGridVariant = FDLayoutConstants.DEFAULT_USE_SMART_REPULSION_RANGE_CALCULATION;\r\n\r\n  this.grid = [];\r\n};\r\n\r\nFDLayout.prototype.calcIdealEdgeLengths = function () {\r\n  var edge;\r\n  var lcaDepth;\r\n  var source;\r\n  var target;\r\n  var sizeOfSourceInLca;\r\n  var sizeOfTargetInLca;\r\n\r\n  var allEdges = this.getGraphManager().getAllEdges();\r\n  for (var i = 0; i < allEdges.length; i++) {\r\n    edge = allEdges[i];\r\n\r\n    edge.idealLength = this.idealEdgeLength;\r\n\r\n    if (edge.isInterGraph) {\r\n      source = edge.getSource();\r\n      target = edge.getTarget();\r\n\r\n      sizeOfSourceInLca = edge.getSourceInLca().getEstimatedSize();\r\n      sizeOfTargetInLca = edge.getTargetInLca().getEstimatedSize();\r\n\r\n      if (this.useSmartIdealEdgeLengthCalculation) {\r\n        edge.idealLength += sizeOfSourceInLca + sizeOfTargetInLca - 2 * LayoutConstants.SIMPLE_NODE_SIZE;\r\n      }\r\n\r\n      lcaDepth = edge.getLca().getInclusionTreeDepth();\r\n\r\n      edge.idealLength += FDLayoutConstants.DEFAULT_EDGE_LENGTH * FDLayoutConstants.PER_LEVEL_IDEAL_EDGE_LENGTH_FACTOR * (source.getInclusionTreeDepth() + target.getInclusionTreeDepth() - 2 * lcaDepth);\r\n    }\r\n  }\r\n};\r\n\r\nFDLayout.prototype.initSpringEmbedder = function () {\r\n\r\n  var s = this.getAllNodes().length;\r\n  if (this.incremental) {\r\n    if (s > FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) {\r\n      this.coolingFactor = Math.max(this.coolingFactor * FDLayoutConstants.COOLING_ADAPTATION_FACTOR, this.coolingFactor - (s - FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) / (FDLayoutConstants.ADAPTATION_UPPER_NODE_LIMIT - FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) * this.coolingFactor * (1 - FDLayoutConstants.COOLING_ADAPTATION_FACTOR));\r\n    }\r\n    this.maxNodeDisplacement = FDLayoutConstants.MAX_NODE_DISPLACEMENT_INCREMENTAL;\r\n  } else {\r\n    if (s > FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) {\r\n      this.coolingFactor = Math.max(FDLayoutConstants.COOLING_ADAPTATION_FACTOR, 1.0 - (s - FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) / (FDLayoutConstants.ADAPTATION_UPPER_NODE_LIMIT - FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) * (1 - FDLayoutConstants.COOLING_ADAPTATION_FACTOR));\r\n    } else {\r\n      this.coolingFactor = 1.0;\r\n    }\r\n    this.initialCoolingFactor = this.coolingFactor;\r\n    this.maxNodeDisplacement = FDLayoutConstants.MAX_NODE_DISPLACEMENT;\r\n  }\r\n\r\n  this.maxIterations = Math.max(this.getAllNodes().length * 5, this.maxIterations);\r\n\r\n  this.totalDisplacementThreshold = this.displacementThresholdPerNode * this.getAllNodes().length;\r\n\r\n  this.repulsionRange = this.calcRepulsionRange();\r\n};\r\n\r\nFDLayout.prototype.calcSpringForces = function () {\r\n  var lEdges = this.getAllEdges();\r\n  var edge;\r\n\r\n  for (var i = 0; i < lEdges.length; i++) {\r\n    edge = lEdges[i];\r\n\r\n    this.calcSpringForce(edge, edge.idealLength);\r\n  }\r\n};\r\n\r\nFDLayout.prototype.calcRepulsionForces = function () {\r\n  var gridUpdateAllowed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\r\n  var forceToNodeSurroundingUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\r\n\r\n  var i, j;\r\n  var nodeA, nodeB;\r\n  var lNodes = this.getAllNodes();\r\n  var processedNodeSet;\r\n\r\n  if (this.useFRGridVariant) {\r\n    if (this.totalIterations % FDLayoutConstants.GRID_CALCULATION_CHECK_PERIOD == 1 && gridUpdateAllowed) {\r\n      this.updateGrid();\r\n    }\r\n\r\n    processedNodeSet = new Set();\r\n\r\n    // calculate repulsion forces between each nodes and its surrounding\r\n    for (i = 0; i < lNodes.length; i++) {\r\n      nodeA = lNodes[i];\r\n      this.calculateRepulsionForceOfANode(nodeA, processedNodeSet, gridUpdateAllowed, forceToNodeSurroundingUpdate);\r\n      processedNodeSet.add(nodeA);\r\n    }\r\n  } else {\r\n    for (i = 0; i < lNodes.length; i++) {\r\n      nodeA = lNodes[i];\r\n\r\n      for (j = i + 1; j < lNodes.length; j++) {\r\n        nodeB = lNodes[j];\r\n\r\n        // If both nodes are not members of the same graph, skip.\r\n        if (nodeA.getOwner() != nodeB.getOwner()) {\r\n          continue;\r\n        }\r\n\r\n        this.calcRepulsionForce(nodeA, nodeB);\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nFDLayout.prototype.calcGravitationalForces = function () {\r\n  var node;\r\n  var lNodes = this.getAllNodesToApplyGravitation();\r\n\r\n  for (var i = 0; i < lNodes.length; i++) {\r\n    node = lNodes[i];\r\n    this.calcGravitationalForce(node);\r\n  }\r\n};\r\n\r\nFDLayout.prototype.moveNodes = function () {\r\n  var lNodes = this.getAllNodes();\r\n  var node;\r\n\r\n  for (var i = 0; i < lNodes.length; i++) {\r\n    node = lNodes[i];\r\n    node.move();\r\n  }\r\n};\r\n\r\nFDLayout.prototype.calcSpringForce = function (edge, idealLength) {\r\n  var sourceNode = edge.getSource();\r\n  var targetNode = edge.getTarget();\r\n\r\n  var length;\r\n  var springForce;\r\n  var springForceX;\r\n  var springForceY;\r\n\r\n  // Update edge length\r\n  if (this.uniformLeafNodeSizes && sourceNode.getChild() == null && targetNode.getChild() == null) {\r\n    edge.updateLengthSimple();\r\n  } else {\r\n    edge.updateLength();\r\n\r\n    if (edge.isOverlapingSourceAndTarget) {\r\n      return;\r\n    }\r\n  }\r\n\r\n  length = edge.getLength();\r\n\r\n  if (length == 0) return;\r\n\r\n  // Calculate spring forces\r\n  springForce = this.springConstant * (length - idealLength);\r\n\r\n  // Project force onto x and y axes\r\n  springForceX = springForce * (edge.lengthX / length);\r\n  springForceY = springForce * (edge.lengthY / length);\r\n\r\n  // Apply forces on the end nodes\r\n  sourceNode.springForceX += springForceX;\r\n  sourceNode.springForceY += springForceY;\r\n  targetNode.springForceX -= springForceX;\r\n  targetNode.springForceY -= springForceY;\r\n};\r\n\r\nFDLayout.prototype.calcRepulsionForce = function (nodeA, nodeB) {\r\n  var rectA = nodeA.getRect();\r\n  var rectB = nodeB.getRect();\r\n  var overlapAmount = new Array(2);\r\n  var clipPoints = new Array(4);\r\n  var distanceX;\r\n  var distanceY;\r\n  var distanceSquared;\r\n  var distance;\r\n  var repulsionForce;\r\n  var repulsionForceX;\r\n  var repulsionForceY;\r\n\r\n  if (rectA.intersects(rectB)) // two nodes overlap\r\n    {\r\n      // calculate separation amount in x and y directions\r\n      IGeometry.calcSeparationAmount(rectA, rectB, overlapAmount, FDLayoutConstants.DEFAULT_EDGE_LENGTH / 2.0);\r\n\r\n      repulsionForceX = 2 * overlapAmount[0];\r\n      repulsionForceY = 2 * overlapAmount[1];\r\n\r\n      var childrenConstant = nodeA.noOfChildren * nodeB.noOfChildren / (nodeA.noOfChildren + nodeB.noOfChildren);\r\n\r\n      // Apply forces on the two nodes\r\n      nodeA.repulsionForceX -= childrenConstant * repulsionForceX;\r\n      nodeA.repulsionForceY -= childrenConstant * repulsionForceY;\r\n      nodeB.repulsionForceX += childrenConstant * repulsionForceX;\r\n      nodeB.repulsionForceY += childrenConstant * repulsionForceY;\r\n    } else // no overlap\r\n    {\r\n      // calculate distance\r\n\r\n      if (this.uniformLeafNodeSizes && nodeA.getChild() == null && nodeB.getChild() == null) // simply base repulsion on distance of node centers\r\n        {\r\n          distanceX = rectB.getCenterX() - rectA.getCenterX();\r\n          distanceY = rectB.getCenterY() - rectA.getCenterY();\r\n        } else // use clipping points\r\n        {\r\n          IGeometry.getIntersection(rectA, rectB, clipPoints);\r\n\r\n          distanceX = clipPoints[2] - clipPoints[0];\r\n          distanceY = clipPoints[3] - clipPoints[1];\r\n        }\r\n\r\n      // No repulsion range. FR grid variant should take care of this.\r\n      if (Math.abs(distanceX) < FDLayoutConstants.MIN_REPULSION_DIST) {\r\n        distanceX = IMath.sign(distanceX) * FDLayoutConstants.MIN_REPULSION_DIST;\r\n      }\r\n\r\n      if (Math.abs(distanceY) < FDLayoutConstants.MIN_REPULSION_DIST) {\r\n        distanceY = IMath.sign(distanceY) * FDLayoutConstants.MIN_REPULSION_DIST;\r\n      }\r\n\r\n      distanceSquared = distanceX * distanceX + distanceY * distanceY;\r\n      distance = Math.sqrt(distanceSquared);\r\n\r\n      repulsionForce = this.repulsionConstant * nodeA.noOfChildren * nodeB.noOfChildren / distanceSquared;\r\n\r\n      // Project force onto x and y axes\r\n      repulsionForceX = repulsionForce * distanceX / distance;\r\n      repulsionForceY = repulsionForce * distanceY / distance;\r\n\r\n      // Apply forces on the two nodes    \r\n      nodeA.repulsionForceX -= repulsionForceX;\r\n      nodeA.repulsionForceY -= repulsionForceY;\r\n      nodeB.repulsionForceX += repulsionForceX;\r\n      nodeB.repulsionForceY += repulsionForceY;\r\n    }\r\n};\r\n\r\nFDLayout.prototype.calcGravitationalForce = function (node) {\r\n  var ownerGraph;\r\n  var ownerCenterX;\r\n  var ownerCenterY;\r\n  var distanceX;\r\n  var distanceY;\r\n  var absDistanceX;\r\n  var absDistanceY;\r\n  var estimatedSize;\r\n  ownerGraph = node.getOwner();\r\n\r\n  ownerCenterX = (ownerGraph.getRight() + ownerGraph.getLeft()) / 2;\r\n  ownerCenterY = (ownerGraph.getTop() + ownerGraph.getBottom()) / 2;\r\n  distanceX = node.getCenterX() - ownerCenterX;\r\n  distanceY = node.getCenterY() - ownerCenterY;\r\n  absDistanceX = Math.abs(distanceX) + node.getWidth() / 2;\r\n  absDistanceY = Math.abs(distanceY) + node.getHeight() / 2;\r\n\r\n  if (node.getOwner() == this.graphManager.getRoot()) // in the root graph\r\n    {\r\n      estimatedSize = ownerGraph.getEstimatedSize() * this.gravityRangeFactor;\r\n\r\n      if (absDistanceX > estimatedSize || absDistanceY > estimatedSize) {\r\n        node.gravitationForceX = -this.gravityConstant * distanceX;\r\n        node.gravitationForceY = -this.gravityConstant * distanceY;\r\n      }\r\n    } else // inside a compound\r\n    {\r\n      estimatedSize = ownerGraph.getEstimatedSize() * this.compoundGravityRangeFactor;\r\n\r\n      if (absDistanceX > estimatedSize || absDistanceY > estimatedSize) {\r\n        node.gravitationForceX = -this.gravityConstant * distanceX * this.compoundGravityConstant;\r\n        node.gravitationForceY = -this.gravityConstant * distanceY * this.compoundGravityConstant;\r\n      }\r\n    }\r\n};\r\n\r\nFDLayout.prototype.isConverged = function () {\r\n  var converged;\r\n  var oscilating = false;\r\n\r\n  if (this.totalIterations > this.maxIterations / 3) {\r\n    oscilating = Math.abs(this.totalDisplacement - this.oldTotalDisplacement) < 2;\r\n  }\r\n\r\n  converged = this.totalDisplacement < this.totalDisplacementThreshold;\r\n\r\n  this.oldTotalDisplacement = this.totalDisplacement;\r\n\r\n  return converged || oscilating;\r\n};\r\n\r\nFDLayout.prototype.animate = function () {\r\n  if (this.animationDuringLayout && !this.isSubLayout) {\r\n    if (this.notAnimatedIterations == this.animationPeriod) {\r\n      this.update();\r\n      this.notAnimatedIterations = 0;\r\n    } else {\r\n      this.notAnimatedIterations++;\r\n    }\r\n  }\r\n};\r\n\r\n//This method calculates the number of children (weight) for all nodes\r\nFDLayout.prototype.calcNoOfChildrenForAllNodes = function () {\r\n  var node;\r\n  var allNodes = this.graphManager.getAllNodes();\r\n\r\n  for (var i = 0; i < allNodes.length; i++) {\r\n    node = allNodes[i];\r\n    node.noOfChildren = node.getNoOfChildren();\r\n  }\r\n};\r\n\r\n// -----------------------------------------------------------------------------\r\n// Section: FR-Grid Variant Repulsion Force Calculation\r\n// -----------------------------------------------------------------------------\r\n\r\nFDLayout.prototype.calcGrid = function (graph) {\r\n\r\n  var sizeX = 0;\r\n  var sizeY = 0;\r\n\r\n  sizeX = parseInt(Math.ceil((graph.getRight() - graph.getLeft()) / this.repulsionRange));\r\n  sizeY = parseInt(Math.ceil((graph.getBottom() - graph.getTop()) / this.repulsionRange));\r\n\r\n  var grid = new Array(sizeX);\r\n\r\n  for (var i = 0; i < sizeX; i++) {\r\n    grid[i] = new Array(sizeY);\r\n  }\r\n\r\n  for (var i = 0; i < sizeX; i++) {\r\n    for (var j = 0; j < sizeY; j++) {\r\n      grid[i][j] = new Array();\r\n    }\r\n  }\r\n\r\n  return grid;\r\n};\r\n\r\nFDLayout.prototype.addNodeToGrid = function (v, left, top) {\r\n\r\n  var startX = 0;\r\n  var finishX = 0;\r\n  var startY = 0;\r\n  var finishY = 0;\r\n\r\n  startX = parseInt(Math.floor((v.getRect().x - left) / this.repulsionRange));\r\n  finishX = parseInt(Math.floor((v.getRect().width + v.getRect().x - left) / this.repulsionRange));\r\n  startY = parseInt(Math.floor((v.getRect().y - top) / this.repulsionRange));\r\n  finishY = parseInt(Math.floor((v.getRect().height + v.getRect().y - top) / this.repulsionRange));\r\n\r\n  for (var i = startX; i <= finishX; i++) {\r\n    for (var j = startY; j <= finishY; j++) {\r\n      this.grid[i][j].push(v);\r\n      v.setGridCoordinates(startX, finishX, startY, finishY);\r\n    }\r\n  }\r\n};\r\n\r\nFDLayout.prototype.updateGrid = function () {\r\n  var i;\r\n  var nodeA;\r\n  var lNodes = this.getAllNodes();\r\n\r\n  this.grid = this.calcGrid(this.graphManager.getRoot());\r\n\r\n  // put all nodes to proper grid cells\r\n  for (i = 0; i < lNodes.length; i++) {\r\n    nodeA = lNodes[i];\r\n    this.addNodeToGrid(nodeA, this.graphManager.getRoot().getLeft(), this.graphManager.getRoot().getTop());\r\n  }\r\n};\r\n\r\nFDLayout.prototype.calculateRepulsionForceOfANode = function (nodeA, processedNodeSet, gridUpdateAllowed, forceToNodeSurroundingUpdate) {\r\n\r\n  if (this.totalIterations % FDLayoutConstants.GRID_CALCULATION_CHECK_PERIOD == 1 && gridUpdateAllowed || forceToNodeSurroundingUpdate) {\r\n    var surrounding = new Set();\r\n    nodeA.surrounding = new Array();\r\n    var nodeB;\r\n    var grid = this.grid;\r\n\r\n    for (var i = nodeA.startX - 1; i < nodeA.finishX + 2; i++) {\r\n      for (var j = nodeA.startY - 1; j < nodeA.finishY + 2; j++) {\r\n        if (!(i < 0 || j < 0 || i >= grid.length || j >= grid[0].length)) {\r\n          for (var k = 0; k < grid[i][j].length; k++) {\r\n            nodeB = grid[i][j][k];\r\n\r\n            // If both nodes are not members of the same graph, \r\n            // or both nodes are the same, skip.\r\n            if (nodeA.getOwner() != nodeB.getOwner() || nodeA == nodeB) {\r\n              continue;\r\n            }\r\n\r\n            // check if the repulsion force between\r\n            // nodeA and nodeB has already been calculated\r\n            if (!processedNodeSet.has(nodeB) && !surrounding.has(nodeB)) {\r\n              var distanceX = Math.abs(nodeA.getCenterX() - nodeB.getCenterX()) - (nodeA.getWidth() / 2 + nodeB.getWidth() / 2);\r\n              var distanceY = Math.abs(nodeA.getCenterY() - nodeB.getCenterY()) - (nodeA.getHeight() / 2 + nodeB.getHeight() / 2);\r\n\r\n              // if the distance between nodeA and nodeB \r\n              // is less then calculation range\r\n              if (distanceX <= this.repulsionRange && distanceY <= this.repulsionRange) {\r\n                //then add nodeB to surrounding of nodeA\r\n                surrounding.add(nodeB);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    nodeA.surrounding = [].concat(_toConsumableArray(surrounding));\r\n  }\r\n  for (i = 0; i < nodeA.surrounding.length; i++) {\r\n    this.calcRepulsionForce(nodeA, nodeA.surrounding[i]);\r\n  }\r\n};\r\n\r\nFDLayout.prototype.calcRepulsionRange = function () {\r\n  return 0.0;\r\n};\r\n\r\nmodule.exports = FDLayout;\r\n\r\n/***/ }),\r\n/* 19 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nvar LEdge = __webpack_require__(1);\r\nvar FDLayoutConstants = __webpack_require__(7);\r\n\r\nfunction FDLayoutEdge(source, target, vEdge) {\r\n  LEdge.call(this, source, target, vEdge);\r\n  this.idealLength = FDLayoutConstants.DEFAULT_EDGE_LENGTH;\r\n}\r\n\r\nFDLayoutEdge.prototype = Object.create(LEdge.prototype);\r\n\r\nfor (var prop in LEdge) {\r\n  FDLayoutEdge[prop] = LEdge[prop];\r\n}\r\n\r\nmodule.exports = FDLayoutEdge;\r\n\r\n/***/ }),\r\n/* 20 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nvar LNode = __webpack_require__(3);\r\n\r\nfunction FDLayoutNode(gm, loc, size, vNode) {\r\n  // alternative constructor is handled inside LNode\r\n  LNode.call(this, gm, loc, size, vNode);\r\n  //Spring, repulsion and gravitational forces acting on this node\r\n  this.springForceX = 0;\r\n  this.springForceY = 0;\r\n  this.repulsionForceX = 0;\r\n  this.repulsionForceY = 0;\r\n  this.gravitationForceX = 0;\r\n  this.gravitationForceY = 0;\r\n  //Amount by which this node is to be moved in this iteration\r\n  this.displacementX = 0;\r\n  this.displacementY = 0;\r\n\r\n  //Start and finish grid coordinates that this node is fallen into\r\n  this.startX = 0;\r\n  this.finishX = 0;\r\n  this.startY = 0;\r\n  this.finishY = 0;\r\n\r\n  //Geometric neighbors of this node\r\n  this.surrounding = [];\r\n}\r\n\r\nFDLayoutNode.prototype = Object.create(LNode.prototype);\r\n\r\nfor (var prop in LNode) {\r\n  FDLayoutNode[prop] = LNode[prop];\r\n}\r\n\r\nFDLayoutNode.prototype.setGridCoordinates = function (_startX, _finishX, _startY, _finishY) {\r\n  this.startX = _startX;\r\n  this.finishX = _finishX;\r\n  this.startY = _startY;\r\n  this.finishY = _finishY;\r\n};\r\n\r\nmodule.exports = FDLayoutNode;\r\n\r\n/***/ }),\r\n/* 21 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nfunction DimensionD(width, height) {\r\n  this.width = 0;\r\n  this.height = 0;\r\n  if (width !== null && height !== null) {\r\n    this.height = height;\r\n    this.width = width;\r\n  }\r\n}\r\n\r\nDimensionD.prototype.getWidth = function () {\r\n  return this.width;\r\n};\r\n\r\nDimensionD.prototype.setWidth = function (width) {\r\n  this.width = width;\r\n};\r\n\r\nDimensionD.prototype.getHeight = function () {\r\n  return this.height;\r\n};\r\n\r\nDimensionD.prototype.setHeight = function (height) {\r\n  this.height = height;\r\n};\r\n\r\nmodule.exports = DimensionD;\r\n\r\n/***/ }),\r\n/* 22 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nvar UniqueIDGeneretor = __webpack_require__(14);\r\n\r\nfunction HashMap() {\r\n  this.map = {};\r\n  this.keys = [];\r\n}\r\n\r\nHashMap.prototype.put = function (key, value) {\r\n  var theId = UniqueIDGeneretor.createID(key);\r\n  if (!this.contains(theId)) {\r\n    this.map[theId] = value;\r\n    this.keys.push(key);\r\n  }\r\n};\r\n\r\nHashMap.prototype.contains = function (key) {\r\n  var theId = UniqueIDGeneretor.createID(key);\r\n  return this.map[key] != null;\r\n};\r\n\r\nHashMap.prototype.get = function (key) {\r\n  var theId = UniqueIDGeneretor.createID(key);\r\n  return this.map[theId];\r\n};\r\n\r\nHashMap.prototype.keySet = function () {\r\n  return this.keys;\r\n};\r\n\r\nmodule.exports = HashMap;\r\n\r\n/***/ }),\r\n/* 23 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nvar UniqueIDGeneretor = __webpack_require__(14);\r\n\r\nfunction HashSet() {\r\n  this.set = {};\r\n}\r\n;\r\n\r\nHashSet.prototype.add = function (obj) {\r\n  var theId = UniqueIDGeneretor.createID(obj);\r\n  if (!this.contains(theId)) this.set[theId] = obj;\r\n};\r\n\r\nHashSet.prototype.remove = function (obj) {\r\n  delete this.set[UniqueIDGeneretor.createID(obj)];\r\n};\r\n\r\nHashSet.prototype.clear = function () {\r\n  this.set = {};\r\n};\r\n\r\nHashSet.prototype.contains = function (obj) {\r\n  return this.set[UniqueIDGeneretor.createID(obj)] == obj;\r\n};\r\n\r\nHashSet.prototype.isEmpty = function () {\r\n  return this.size() === 0;\r\n};\r\n\r\nHashSet.prototype.size = function () {\r\n  return Object.keys(this.set).length;\r\n};\r\n\r\n//concats this.set to the given list\r\nHashSet.prototype.addAllTo = function (list) {\r\n  var keys = Object.keys(this.set);\r\n  var length = keys.length;\r\n  for (var i = 0; i < length; i++) {\r\n    list.push(this.set[keys[i]]);\r\n  }\r\n};\r\n\r\nHashSet.prototype.size = function () {\r\n  return Object.keys(this.set).length;\r\n};\r\n\r\nHashSet.prototype.addAll = function (list) {\r\n  var s = list.length;\r\n  for (var i = 0; i < s; i++) {\r\n    var v = list[i];\r\n    this.add(v);\r\n  }\r\n};\r\n\r\nmodule.exports = HashSet;\r\n\r\n/***/ }),\r\n/* 24 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\r\n\r\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\r\n\r\n/**\r\n * A classic Quicksort algorithm with Hoare's partition\r\n * - Works also on LinkedList objects\r\n *\r\n * Copyright: i-Vis Research Group, Bilkent University, 2007 - present\r\n */\r\n\r\nvar LinkedList = __webpack_require__(11);\r\n\r\nvar Quicksort = function () {\r\n    function Quicksort(A, compareFunction) {\r\n        _classCallCheck(this, Quicksort);\r\n\r\n        if (compareFunction !== null || compareFunction !== undefined) this.compareFunction = this._defaultCompareFunction;\r\n\r\n        var length = void 0;\r\n        if (A instanceof LinkedList) length = A.size();else length = A.length;\r\n\r\n        this._quicksort(A, 0, length - 1);\r\n    }\r\n\r\n    _createClass(Quicksort, [{\r\n        key: '_quicksort',\r\n        value: function _quicksort(A, p, r) {\r\n            if (p < r) {\r\n                var q = this._partition(A, p, r);\r\n                this._quicksort(A, p, q);\r\n                this._quicksort(A, q + 1, r);\r\n            }\r\n        }\r\n    }, {\r\n        key: '_partition',\r\n        value: function _partition(A, p, r) {\r\n            var x = this._get(A, p);\r\n            var i = p;\r\n            var j = r;\r\n            while (true) {\r\n                while (this.compareFunction(x, this._get(A, j))) {\r\n                    j--;\r\n                }while (this.compareFunction(this._get(A, i), x)) {\r\n                    i++;\r\n                }if (i < j) {\r\n                    this._swap(A, i, j);\r\n                    i++;\r\n                    j--;\r\n                } else return j;\r\n            }\r\n        }\r\n    }, {\r\n        key: '_get',\r\n        value: function _get(object, index) {\r\n            if (object instanceof LinkedList) return object.get_object_at(index);else return object[index];\r\n        }\r\n    }, {\r\n        key: '_set',\r\n        value: function _set(object, index, value) {\r\n            if (object instanceof LinkedList) object.set_object_at(index, value);else object[index] = value;\r\n        }\r\n    }, {\r\n        key: '_swap',\r\n        value: function _swap(A, i, j) {\r\n            var temp = this._get(A, i);\r\n            this._set(A, i, this._get(A, j));\r\n            this._set(A, j, temp);\r\n        }\r\n    }, {\r\n        key: '_defaultCompareFunction',\r\n        value: function _defaultCompareFunction(a, b) {\r\n            return b > a;\r\n        }\r\n    }]);\r\n\r\n    return Quicksort;\r\n}();\r\n\r\nmodule.exports = Quicksort;\r\n\r\n/***/ }),\r\n/* 25 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\r\n\r\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\r\n\r\n/**\r\n *   Needleman-Wunsch algorithm is an procedure to compute the optimal global alignment of two string\r\n *   sequences by S.B.Needleman and C.D.Wunsch (1970).\r\n *\r\n *   Aside from the inputs, you can assign the scores for,\r\n *   - Match: The two characters at the current index are same.\r\n *   - Mismatch: The two characters at the current index are different.\r\n *   - Insertion/Deletion(gaps): The best alignment involves one letter aligning to a gap in the other string.\r\n */\r\n\r\nvar NeedlemanWunsch = function () {\r\n    function NeedlemanWunsch(sequence1, sequence2) {\r\n        var match_score = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\r\n        var mismatch_penalty = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;\r\n        var gap_penalty = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : -1;\r\n\r\n        _classCallCheck(this, NeedlemanWunsch);\r\n\r\n        this.sequence1 = sequence1;\r\n        this.sequence2 = sequence2;\r\n        this.match_score = match_score;\r\n        this.mismatch_penalty = mismatch_penalty;\r\n        this.gap_penalty = gap_penalty;\r\n\r\n        // Just the remove redundancy\r\n        this.iMax = sequence1.length + 1;\r\n        this.jMax = sequence2.length + 1;\r\n\r\n        // Grid matrix of scores\r\n        this.grid = new Array(this.iMax);\r\n        for (var i = 0; i < this.iMax; i++) {\r\n            this.grid[i] = new Array(this.jMax);\r\n\r\n            for (var j = 0; j < this.jMax; j++) {\r\n                this.grid[i][j] = 0;\r\n            }\r\n        }\r\n\r\n        // Traceback matrix (2D array, each cell is an array of boolean values for [`Diag`, `Up`, `Left`] positions)\r\n        this.tracebackGrid = new Array(this.iMax);\r\n        for (var _i = 0; _i < this.iMax; _i++) {\r\n            this.tracebackGrid[_i] = new Array(this.jMax);\r\n\r\n            for (var _j = 0; _j < this.jMax; _j++) {\r\n                this.tracebackGrid[_i][_j] = [null, null, null];\r\n            }\r\n        }\r\n\r\n        // The aligned sequences (return multiple possibilities)\r\n        this.alignments = [];\r\n\r\n        // Final alignment score\r\n        this.score = -1;\r\n\r\n        // Calculate scores and tracebacks\r\n        this.computeGrids();\r\n    }\r\n\r\n    _createClass(NeedlemanWunsch, [{\r\n        key: \"getScore\",\r\n        value: function getScore() {\r\n            return this.score;\r\n        }\r\n    }, {\r\n        key: \"getAlignments\",\r\n        value: function getAlignments() {\r\n            return this.alignments;\r\n        }\r\n\r\n        // Main dynamic programming procedure\r\n\r\n    }, {\r\n        key: \"computeGrids\",\r\n        value: function computeGrids() {\r\n            // Fill in the first row\r\n            for (var j = 1; j < this.jMax; j++) {\r\n                this.grid[0][j] = this.grid[0][j - 1] + this.gap_penalty;\r\n                this.tracebackGrid[0][j] = [false, false, true];\r\n            }\r\n\r\n            // Fill in the first column\r\n            for (var i = 1; i < this.iMax; i++) {\r\n                this.grid[i][0] = this.grid[i - 1][0] + this.gap_penalty;\r\n                this.tracebackGrid[i][0] = [false, true, false];\r\n            }\r\n\r\n            // Fill the rest of the grid\r\n            for (var _i2 = 1; _i2 < this.iMax; _i2++) {\r\n                for (var _j2 = 1; _j2 < this.jMax; _j2++) {\r\n                    // Find the max score(s) among [`Diag`, `Up`, `Left`]\r\n                    var diag = void 0;\r\n                    if (this.sequence1[_i2 - 1] === this.sequence2[_j2 - 1]) diag = this.grid[_i2 - 1][_j2 - 1] + this.match_score;else diag = this.grid[_i2 - 1][_j2 - 1] + this.mismatch_penalty;\r\n\r\n                    var up = this.grid[_i2 - 1][_j2] + this.gap_penalty;\r\n                    var left = this.grid[_i2][_j2 - 1] + this.gap_penalty;\r\n\r\n                    // If there exists multiple max values, capture them for multiple paths\r\n                    var maxOf = [diag, up, left];\r\n                    var indices = this.arrayAllMaxIndexes(maxOf);\r\n\r\n                    // Update Grids\r\n                    this.grid[_i2][_j2] = maxOf[indices[0]];\r\n                    this.tracebackGrid[_i2][_j2] = [indices.includes(0), indices.includes(1), indices.includes(2)];\r\n                }\r\n            }\r\n\r\n            // Update alignment score\r\n            this.score = this.grid[this.iMax - 1][this.jMax - 1];\r\n        }\r\n\r\n        // Gets all possible valid sequence combinations\r\n\r\n    }, {\r\n        key: \"alignmentTraceback\",\r\n        value: function alignmentTraceback() {\r\n            var inProcessAlignments = [];\r\n\r\n            inProcessAlignments.push({ pos: [this.sequence1.length, this.sequence2.length],\r\n                seq1: \"\",\r\n                seq2: \"\"\r\n            });\r\n\r\n            while (inProcessAlignments[0]) {\r\n                var current = inProcessAlignments[0];\r\n                var directions = this.tracebackGrid[current.pos[0]][current.pos[1]];\r\n\r\n                if (directions[0]) {\r\n                    inProcessAlignments.push({ pos: [current.pos[0] - 1, current.pos[1] - 1],\r\n                        seq1: this.sequence1[current.pos[0] - 1] + current.seq1,\r\n                        seq2: this.sequence2[current.pos[1] - 1] + current.seq2\r\n                    });\r\n                }\r\n                if (directions[1]) {\r\n                    inProcessAlignments.push({ pos: [current.pos[0] - 1, current.pos[1]],\r\n                        seq1: this.sequence1[current.pos[0] - 1] + current.seq1,\r\n                        seq2: '-' + current.seq2\r\n                    });\r\n                }\r\n                if (directions[2]) {\r\n                    inProcessAlignments.push({ pos: [current.pos[0], current.pos[1] - 1],\r\n                        seq1: '-' + current.seq1,\r\n                        seq2: this.sequence2[current.pos[1] - 1] + current.seq2\r\n                    });\r\n                }\r\n\r\n                if (current.pos[0] === 0 && current.pos[1] === 0) this.alignments.push({ sequence1: current.seq1,\r\n                    sequence2: current.seq2\r\n                });\r\n\r\n                inProcessAlignments.shift();\r\n            }\r\n\r\n            return this.alignments;\r\n        }\r\n\r\n        // Helper Functions\r\n\r\n    }, {\r\n        key: \"getAllIndexes\",\r\n        value: function getAllIndexes(arr, val) {\r\n            var indexes = [],\r\n                i = -1;\r\n            while ((i = arr.indexOf(val, i + 1)) !== -1) {\r\n                indexes.push(i);\r\n            }\r\n            return indexes;\r\n        }\r\n    }, {\r\n        key: \"arrayAllMaxIndexes\",\r\n        value: function arrayAllMaxIndexes(array) {\r\n            return this.getAllIndexes(array, Math.max.apply(null, array));\r\n        }\r\n    }]);\r\n\r\n    return NeedlemanWunsch;\r\n}();\r\n\r\nmodule.exports = NeedlemanWunsch;\r\n\r\n/***/ }),\r\n/* 26 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nvar layoutBase = function layoutBase() {\r\n  return;\r\n};\r\n\r\nlayoutBase.FDLayout = __webpack_require__(18);\r\nlayoutBase.FDLayoutConstants = __webpack_require__(7);\r\nlayoutBase.FDLayoutEdge = __webpack_require__(19);\r\nlayoutBase.FDLayoutNode = __webpack_require__(20);\r\nlayoutBase.DimensionD = __webpack_require__(21);\r\nlayoutBase.HashMap = __webpack_require__(22);\r\nlayoutBase.HashSet = __webpack_require__(23);\r\nlayoutBase.IGeometry = __webpack_require__(8);\r\nlayoutBase.IMath = __webpack_require__(9);\r\nlayoutBase.Integer = __webpack_require__(10);\r\nlayoutBase.Point = __webpack_require__(12);\r\nlayoutBase.PointD = __webpack_require__(4);\r\nlayoutBase.RandomSeed = __webpack_require__(16);\r\nlayoutBase.RectangleD = __webpack_require__(13);\r\nlayoutBase.Transform = __webpack_require__(17);\r\nlayoutBase.UniqueIDGeneretor = __webpack_require__(14);\r\nlayoutBase.Quicksort = __webpack_require__(24);\r\nlayoutBase.LinkedList = __webpack_require__(11);\r\nlayoutBase.LGraphObject = __webpack_require__(2);\r\nlayoutBase.LGraph = __webpack_require__(5);\r\nlayoutBase.LEdge = __webpack_require__(1);\r\nlayoutBase.LGraphManager = __webpack_require__(6);\r\nlayoutBase.LNode = __webpack_require__(3);\r\nlayoutBase.Layout = __webpack_require__(15);\r\nlayoutBase.LayoutConstants = __webpack_require__(0);\r\nlayoutBase.NeedlemanWunsch = __webpack_require__(25);\r\n\r\nmodule.exports = layoutBase;\r\n\r\n/***/ }),\r\n/* 27 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nfunction Emitter() {\r\n  this.listeners = [];\r\n}\r\n\r\nvar p = Emitter.prototype;\r\n\r\np.addListener = function (event, callback) {\r\n  this.listeners.push({\r\n    event: event,\r\n    callback: callback\r\n  });\r\n};\r\n\r\np.removeListener = function (event, callback) {\r\n  for (var i = this.listeners.length; i >= 0; i--) {\r\n    var l = this.listeners[i];\r\n\r\n    if (l.event === event && l.callback === callback) {\r\n      this.listeners.splice(i, 1);\r\n    }\r\n  }\r\n};\r\n\r\np.emit = function (event, data) {\r\n  for (var i = 0; i < this.listeners.length; i++) {\r\n    var l = this.listeners[i];\r\n\r\n    if (event === l.event) {\r\n      l.callback(data);\r\n    }\r\n  }\r\n};\r\n\r\nmodule.exports = Emitter;\r\n\r\n/***/ })\r\n/******/ ]);\r\n});", "(function webpackUniversalModuleDefinition(root, factory) {\r\n\tif(typeof exports === 'object' && typeof module === 'object')\r\n\t\tmodule.exports = factory(require(\"layout-base\"));\r\n\telse if(typeof define === 'function' && define.amd)\r\n\t\tdefine([\"layout-base\"], factory);\r\n\telse if(typeof exports === 'object')\r\n\t\texports[\"coseBase\"] = factory(require(\"layout-base\"));\r\n\telse\r\n\t\troot[\"coseBase\"] = factory(root[\"layoutBase\"]);\r\n})(this, function(__WEBPACK_EXTERNAL_MODULE_0__) {\r\nreturn /******/ (function(modules) { // webpackBootstrap\r\n/******/ \t// The module cache\r\n/******/ \tvar installedModules = {};\r\n/******/\r\n/******/ \t// The require function\r\n/******/ \tfunction __webpack_require__(moduleId) {\r\n/******/\r\n/******/ \t\t// Check if module is in cache\r\n/******/ \t\tif(installedModules[moduleId]) {\r\n/******/ \t\t\treturn installedModules[moduleId].exports;\r\n/******/ \t\t}\r\n/******/ \t\t// Create a new module (and put it into the cache)\r\n/******/ \t\tvar module = installedModules[moduleId] = {\r\n/******/ \t\t\ti: moduleId,\r\n/******/ \t\t\tl: false,\r\n/******/ \t\t\texports: {}\r\n/******/ \t\t};\r\n/******/\r\n/******/ \t\t// Execute the module function\r\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\r\n/******/\r\n/******/ \t\t// Flag the module as loaded\r\n/******/ \t\tmodule.l = true;\r\n/******/\r\n/******/ \t\t// Return the exports of the module\r\n/******/ \t\treturn module.exports;\r\n/******/ \t}\r\n/******/\r\n/******/\r\n/******/ \t// expose the modules object (__webpack_modules__)\r\n/******/ \t__webpack_require__.m = modules;\r\n/******/\r\n/******/ \t// expose the module cache\r\n/******/ \t__webpack_require__.c = installedModules;\r\n/******/\r\n/******/ \t// identity function for calling harmony imports with the correct context\r\n/******/ \t__webpack_require__.i = function(value) { return value; };\r\n/******/\r\n/******/ \t// define getter function for harmony exports\r\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\r\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\r\n/******/ \t\t\tObject.defineProperty(exports, name, {\r\n/******/ \t\t\t\tconfigurable: false,\r\n/******/ \t\t\t\tenumerable: true,\r\n/******/ \t\t\t\tget: getter\r\n/******/ \t\t\t});\r\n/******/ \t\t}\r\n/******/ \t};\r\n/******/\r\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\r\n/******/ \t__webpack_require__.n = function(module) {\r\n/******/ \t\tvar getter = module && module.__esModule ?\r\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\r\n/******/ \t\t\tfunction getModuleExports() { return module; };\r\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\r\n/******/ \t\treturn getter;\r\n/******/ \t};\r\n/******/\r\n/******/ \t// Object.prototype.hasOwnProperty.call\r\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\r\n/******/\r\n/******/ \t// __webpack_public_path__\r\n/******/ \t__webpack_require__.p = \"\";\r\n/******/\r\n/******/ \t// Load entry module and return exports\r\n/******/ \treturn __webpack_require__(__webpack_require__.s = 7);\r\n/******/ })\r\n/************************************************************************/\r\n/******/ ([\r\n/* 0 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_0__;\r\n\r\n/***/ }),\r\n/* 1 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nvar FDLayoutConstants = __webpack_require__(0).FDLayoutConstants;\r\n\r\nfunction CoSEConstants() {}\r\n\r\n//CoSEConstants inherits static props in FDLayoutConstants\r\nfor (var prop in FDLayoutConstants) {\r\n  CoSEConstants[prop] = FDLayoutConstants[prop];\r\n}\r\n\r\nCoSEConstants.DEFAULT_USE_MULTI_LEVEL_SCALING = false;\r\nCoSEConstants.DEFAULT_RADIAL_SEPARATION = FDLayoutConstants.DEFAULT_EDGE_LENGTH;\r\nCoSEConstants.DEFAULT_COMPONENT_SEPERATION = 60;\r\nCoSEConstants.TILE = true;\r\nCoSEConstants.TILING_PADDING_VERTICAL = 10;\r\nCoSEConstants.TILING_PADDING_HORIZONTAL = 10;\r\nCoSEConstants.TREE_REDUCTION_ON_INCREMENTAL = false; // make this true when cose is used incrementally as a part of other non-incremental layout\r\n\r\nmodule.exports = CoSEConstants;\r\n\r\n/***/ }),\r\n/* 2 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nvar FDLayoutEdge = __webpack_require__(0).FDLayoutEdge;\r\n\r\nfunction CoSEEdge(source, target, vEdge) {\r\n  FDLayoutEdge.call(this, source, target, vEdge);\r\n}\r\n\r\nCoSEEdge.prototype = Object.create(FDLayoutEdge.prototype);\r\nfor (var prop in FDLayoutEdge) {\r\n  CoSEEdge[prop] = FDLayoutEdge[prop];\r\n}\r\n\r\nmodule.exports = CoSEEdge;\r\n\r\n/***/ }),\r\n/* 3 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nvar LGraph = __webpack_require__(0).LGraph;\r\n\r\nfunction CoSEGraph(parent, graphMgr, vGraph) {\r\n  LGraph.call(this, parent, graphMgr, vGraph);\r\n}\r\n\r\nCoSEGraph.prototype = Object.create(LGraph.prototype);\r\nfor (var prop in LGraph) {\r\n  CoSEGraph[prop] = LGraph[prop];\r\n}\r\n\r\nmodule.exports = CoSEGraph;\r\n\r\n/***/ }),\r\n/* 4 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nvar LGraphManager = __webpack_require__(0).LGraphManager;\r\n\r\nfunction CoSEGraphManager(layout) {\r\n  LGraphManager.call(this, layout);\r\n}\r\n\r\nCoSEGraphManager.prototype = Object.create(LGraphManager.prototype);\r\nfor (var prop in LGraphManager) {\r\n  CoSEGraphManager[prop] = LGraphManager[prop];\r\n}\r\n\r\nmodule.exports = CoSEGraphManager;\r\n\r\n/***/ }),\r\n/* 5 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nvar FDLayoutNode = __webpack_require__(0).FDLayoutNode;\r\nvar IMath = __webpack_require__(0).IMath;\r\n\r\nfunction CoSENode(gm, loc, size, vNode) {\r\n  FDLayoutNode.call(this, gm, loc, size, vNode);\r\n}\r\n\r\nCoSENode.prototype = Object.create(FDLayoutNode.prototype);\r\nfor (var prop in FDLayoutNode) {\r\n  CoSENode[prop] = FDLayoutNode[prop];\r\n}\r\n\r\nCoSENode.prototype.move = function () {\r\n  var layout = this.graphManager.getLayout();\r\n  this.displacementX = layout.coolingFactor * (this.springForceX + this.repulsionForceX + this.gravitationForceX) / this.noOfChildren;\r\n  this.displacementY = layout.coolingFactor * (this.springForceY + this.repulsionForceY + this.gravitationForceY) / this.noOfChildren;\r\n\r\n  if (Math.abs(this.displacementX) > layout.coolingFactor * layout.maxNodeDisplacement) {\r\n    this.displacementX = layout.coolingFactor * layout.maxNodeDisplacement * IMath.sign(this.displacementX);\r\n  }\r\n\r\n  if (Math.abs(this.displacementY) > layout.coolingFactor * layout.maxNodeDisplacement) {\r\n    this.displacementY = layout.coolingFactor * layout.maxNodeDisplacement * IMath.sign(this.displacementY);\r\n  }\r\n\r\n  // a simple node, just move it\r\n  if (this.child == null) {\r\n    this.moveBy(this.displacementX, this.displacementY);\r\n  }\r\n  // an empty compound node, again just move it\r\n  else if (this.child.getNodes().length == 0) {\r\n      this.moveBy(this.displacementX, this.displacementY);\r\n    }\r\n    // non-empty compound node, propogate movement to children as well\r\n    else {\r\n        this.propogateDisplacementToChildren(this.displacementX, this.displacementY);\r\n      }\r\n\r\n  layout.totalDisplacement += Math.abs(this.displacementX) + Math.abs(this.displacementY);\r\n\r\n  this.springForceX = 0;\r\n  this.springForceY = 0;\r\n  this.repulsionForceX = 0;\r\n  this.repulsionForceY = 0;\r\n  this.gravitationForceX = 0;\r\n  this.gravitationForceY = 0;\r\n  this.displacementX = 0;\r\n  this.displacementY = 0;\r\n};\r\n\r\nCoSENode.prototype.propogateDisplacementToChildren = function (dX, dY) {\r\n  var nodes = this.getChild().getNodes();\r\n  var node;\r\n  for (var i = 0; i < nodes.length; i++) {\r\n    node = nodes[i];\r\n    if (node.getChild() == null) {\r\n      node.moveBy(dX, dY);\r\n      node.displacementX += dX;\r\n      node.displacementY += dY;\r\n    } else {\r\n      node.propogateDisplacementToChildren(dX, dY);\r\n    }\r\n  }\r\n};\r\n\r\nCoSENode.prototype.setPred1 = function (pred1) {\r\n  this.pred1 = pred1;\r\n};\r\n\r\nCoSENode.prototype.getPred1 = function () {\r\n  return pred1;\r\n};\r\n\r\nCoSENode.prototype.getPred2 = function () {\r\n  return pred2;\r\n};\r\n\r\nCoSENode.prototype.setNext = function (next) {\r\n  this.next = next;\r\n};\r\n\r\nCoSENode.prototype.getNext = function () {\r\n  return next;\r\n};\r\n\r\nCoSENode.prototype.setProcessed = function (processed) {\r\n  this.processed = processed;\r\n};\r\n\r\nCoSENode.prototype.isProcessed = function () {\r\n  return processed;\r\n};\r\n\r\nmodule.exports = CoSENode;\r\n\r\n/***/ }),\r\n/* 6 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nvar FDLayout = __webpack_require__(0).FDLayout;\r\nvar CoSEGraphManager = __webpack_require__(4);\r\nvar CoSEGraph = __webpack_require__(3);\r\nvar CoSENode = __webpack_require__(5);\r\nvar CoSEEdge = __webpack_require__(2);\r\nvar CoSEConstants = __webpack_require__(1);\r\nvar FDLayoutConstants = __webpack_require__(0).FDLayoutConstants;\r\nvar LayoutConstants = __webpack_require__(0).LayoutConstants;\r\nvar Point = __webpack_require__(0).Point;\r\nvar PointD = __webpack_require__(0).PointD;\r\nvar Layout = __webpack_require__(0).Layout;\r\nvar Integer = __webpack_require__(0).Integer;\r\nvar IGeometry = __webpack_require__(0).IGeometry;\r\nvar LGraph = __webpack_require__(0).LGraph;\r\nvar Transform = __webpack_require__(0).Transform;\r\n\r\nfunction CoSELayout() {\r\n  FDLayout.call(this);\r\n\r\n  this.toBeTiled = {}; // Memorize if a node is to be tiled or is tiled\r\n}\r\n\r\nCoSELayout.prototype = Object.create(FDLayout.prototype);\r\n\r\nfor (var prop in FDLayout) {\r\n  CoSELayout[prop] = FDLayout[prop];\r\n}\r\n\r\nCoSELayout.prototype.newGraphManager = function () {\r\n  var gm = new CoSEGraphManager(this);\r\n  this.graphManager = gm;\r\n  return gm;\r\n};\r\n\r\nCoSELayout.prototype.newGraph = function (vGraph) {\r\n  return new CoSEGraph(null, this.graphManager, vGraph);\r\n};\r\n\r\nCoSELayout.prototype.newNode = function (vNode) {\r\n  return new CoSENode(this.graphManager, vNode);\r\n};\r\n\r\nCoSELayout.prototype.newEdge = function (vEdge) {\r\n  return new CoSEEdge(null, null, vEdge);\r\n};\r\n\r\nCoSELayout.prototype.initParameters = function () {\r\n  FDLayout.prototype.initParameters.call(this, arguments);\r\n  if (!this.isSubLayout) {\r\n    if (CoSEConstants.DEFAULT_EDGE_LENGTH < 10) {\r\n      this.idealEdgeLength = 10;\r\n    } else {\r\n      this.idealEdgeLength = CoSEConstants.DEFAULT_EDGE_LENGTH;\r\n    }\r\n\r\n    this.useSmartIdealEdgeLengthCalculation = CoSEConstants.DEFAULT_USE_SMART_IDEAL_EDGE_LENGTH_CALCULATION;\r\n    this.springConstant = FDLayoutConstants.DEFAULT_SPRING_STRENGTH;\r\n    this.repulsionConstant = FDLayoutConstants.DEFAULT_REPULSION_STRENGTH;\r\n    this.gravityConstant = FDLayoutConstants.DEFAULT_GRAVITY_STRENGTH;\r\n    this.compoundGravityConstant = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_STRENGTH;\r\n    this.gravityRangeFactor = FDLayoutConstants.DEFAULT_GRAVITY_RANGE_FACTOR;\r\n    this.compoundGravityRangeFactor = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_RANGE_FACTOR;\r\n\r\n    // variables for tree reduction support\r\n    this.prunedNodesAll = [];\r\n    this.growTreeIterations = 0;\r\n    this.afterGrowthIterations = 0;\r\n    this.isTreeGrowing = false;\r\n    this.isGrowthFinished = false;\r\n\r\n    // variables for cooling\r\n    this.coolingCycle = 0;\r\n    this.maxCoolingCycle = this.maxIterations / FDLayoutConstants.CONVERGENCE_CHECK_PERIOD;\r\n    this.finalTemperature = FDLayoutConstants.CONVERGENCE_CHECK_PERIOD / this.maxIterations;\r\n    this.coolingAdjuster = 1;\r\n  }\r\n};\r\n\r\nCoSELayout.prototype.layout = function () {\r\n  var createBendsAsNeeded = LayoutConstants.DEFAULT_CREATE_BENDS_AS_NEEDED;\r\n  if (createBendsAsNeeded) {\r\n    this.createBendpoints();\r\n    this.graphManager.resetAllEdges();\r\n  }\r\n\r\n  this.level = 0;\r\n  return this.classicLayout();\r\n};\r\n\r\nCoSELayout.prototype.classicLayout = function () {\r\n  this.nodesWithGravity = this.calculateNodesToApplyGravitationTo();\r\n  this.graphManager.setAllNodesToApplyGravitation(this.nodesWithGravity);\r\n  this.calcNoOfChildrenForAllNodes();\r\n  this.graphManager.calcLowestCommonAncestors();\r\n  this.graphManager.calcInclusionTreeDepths();\r\n  this.graphManager.getRoot().calcEstimatedSize();\r\n  this.calcIdealEdgeLengths();\r\n\r\n  if (!this.incremental) {\r\n    var forest = this.getFlatForest();\r\n\r\n    // The graph associated with this layout is flat and a forest\r\n    if (forest.length > 0) {\r\n      this.positionNodesRadially(forest);\r\n    }\r\n    // The graph associated with this layout is not flat or a forest\r\n    else {\r\n        // Reduce the trees when incremental mode is not enabled and graph is not a forest \r\n        this.reduceTrees();\r\n        // Update nodes that gravity will be applied\r\n        this.graphManager.resetAllNodesToApplyGravitation();\r\n        var allNodes = new Set(this.getAllNodes());\r\n        var intersection = this.nodesWithGravity.filter(function (x) {\r\n          return allNodes.has(x);\r\n        });\r\n        this.graphManager.setAllNodesToApplyGravitation(intersection);\r\n\r\n        this.positionNodesRandomly();\r\n      }\r\n  } else {\r\n    if (CoSEConstants.TREE_REDUCTION_ON_INCREMENTAL) {\r\n      // Reduce the trees in incremental mode if only this constant is set to true \r\n      this.reduceTrees();\r\n      // Update nodes that gravity will be applied\r\n      this.graphManager.resetAllNodesToApplyGravitation();\r\n      var allNodes = new Set(this.getAllNodes());\r\n      var intersection = this.nodesWithGravity.filter(function (x) {\r\n        return allNodes.has(x);\r\n      });\r\n      this.graphManager.setAllNodesToApplyGravitation(intersection);\r\n    }\r\n  }\r\n\r\n  this.initSpringEmbedder();\r\n  this.runSpringEmbedder();\r\n\r\n  return true;\r\n};\r\n\r\nCoSELayout.prototype.tick = function () {\r\n  this.totalIterations++;\r\n\r\n  if (this.totalIterations === this.maxIterations && !this.isTreeGrowing && !this.isGrowthFinished) {\r\n    if (this.prunedNodesAll.length > 0) {\r\n      this.isTreeGrowing = true;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  if (this.totalIterations % FDLayoutConstants.CONVERGENCE_CHECK_PERIOD == 0 && !this.isTreeGrowing && !this.isGrowthFinished) {\r\n    if (this.isConverged()) {\r\n      if (this.prunedNodesAll.length > 0) {\r\n        this.isTreeGrowing = true;\r\n      } else {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    this.coolingCycle++;\r\n\r\n    if (this.layoutQuality == 0) {\r\n      // quality - \"draft\"\r\n      this.coolingAdjuster = this.coolingCycle;\r\n    } else if (this.layoutQuality == 1) {\r\n      // quality - \"default\"\r\n      this.coolingAdjuster = this.coolingCycle / 3;\r\n    }\r\n\r\n    // cooling schedule is based on http://www.btluke.com/simanf1.html -> cooling schedule 3\r\n    this.coolingFactor = Math.max(this.initialCoolingFactor - Math.pow(this.coolingCycle, Math.log(100 * (this.initialCoolingFactor - this.finalTemperature)) / Math.log(this.maxCoolingCycle)) / 100 * this.coolingAdjuster, this.finalTemperature);\r\n    this.animationPeriod = Math.ceil(this.initialAnimationPeriod * Math.sqrt(this.coolingFactor));\r\n  }\r\n  // Operations while tree is growing again \r\n  if (this.isTreeGrowing) {\r\n    if (this.growTreeIterations % 10 == 0) {\r\n      if (this.prunedNodesAll.length > 0) {\r\n        this.graphManager.updateBounds();\r\n        this.updateGrid();\r\n        this.growTree(this.prunedNodesAll);\r\n        // Update nodes that gravity will be applied\r\n        this.graphManager.resetAllNodesToApplyGravitation();\r\n        var allNodes = new Set(this.getAllNodes());\r\n        var intersection = this.nodesWithGravity.filter(function (x) {\r\n          return allNodes.has(x);\r\n        });\r\n        this.graphManager.setAllNodesToApplyGravitation(intersection);\r\n\r\n        this.graphManager.updateBounds();\r\n        this.updateGrid();\r\n        this.coolingFactor = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL;\r\n      } else {\r\n        this.isTreeGrowing = false;\r\n        this.isGrowthFinished = true;\r\n      }\r\n    }\r\n    this.growTreeIterations++;\r\n  }\r\n  // Operations after growth is finished\r\n  if (this.isGrowthFinished) {\r\n    if (this.isConverged()) {\r\n      return true;\r\n    }\r\n    if (this.afterGrowthIterations % 10 == 0) {\r\n      this.graphManager.updateBounds();\r\n      this.updateGrid();\r\n    }\r\n    this.coolingFactor = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL * ((100 - this.afterGrowthIterations) / 100);\r\n    this.afterGrowthIterations++;\r\n  }\r\n\r\n  var gridUpdateAllowed = !this.isTreeGrowing && !this.isGrowthFinished;\r\n  var forceToNodeSurroundingUpdate = this.growTreeIterations % 10 == 1 && this.isTreeGrowing || this.afterGrowthIterations % 10 == 1 && this.isGrowthFinished;\r\n\r\n  this.totalDisplacement = 0;\r\n  this.graphManager.updateBounds();\r\n  this.calcSpringForces();\r\n  this.calcRepulsionForces(gridUpdateAllowed, forceToNodeSurroundingUpdate);\r\n  this.calcGravitationalForces();\r\n  this.moveNodes();\r\n  this.animate();\r\n\r\n  return false; // Layout is not ended yet return false\r\n};\r\n\r\nCoSELayout.prototype.getPositionsData = function () {\r\n  var allNodes = this.graphManager.getAllNodes();\r\n  var pData = {};\r\n  for (var i = 0; i < allNodes.length; i++) {\r\n    var rect = allNodes[i].rect;\r\n    var id = allNodes[i].id;\r\n    pData[id] = {\r\n      id: id,\r\n      x: rect.getCenterX(),\r\n      y: rect.getCenterY(),\r\n      w: rect.width,\r\n      h: rect.height\r\n    };\r\n  }\r\n\r\n  return pData;\r\n};\r\n\r\nCoSELayout.prototype.runSpringEmbedder = function () {\r\n  this.initialAnimationPeriod = 25;\r\n  this.animationPeriod = this.initialAnimationPeriod;\r\n  var layoutEnded = false;\r\n\r\n  // If aminate option is 'during' signal that layout is supposed to start iterating\r\n  if (FDLayoutConstants.ANIMATE === 'during') {\r\n    this.emit('layoutstarted');\r\n  } else {\r\n    // If aminate option is 'during' tick() function will be called on index.js\r\n    while (!layoutEnded) {\r\n      layoutEnded = this.tick();\r\n    }\r\n\r\n    this.graphManager.updateBounds();\r\n  }\r\n};\r\n\r\nCoSELayout.prototype.calculateNodesToApplyGravitationTo = function () {\r\n  var nodeList = [];\r\n  var graph;\r\n\r\n  var graphs = this.graphManager.getGraphs();\r\n  var size = graphs.length;\r\n  var i;\r\n  for (i = 0; i < size; i++) {\r\n    graph = graphs[i];\r\n\r\n    graph.updateConnected();\r\n\r\n    if (!graph.isConnected) {\r\n      nodeList = nodeList.concat(graph.getNodes());\r\n    }\r\n  }\r\n\r\n  return nodeList;\r\n};\r\n\r\nCoSELayout.prototype.createBendpoints = function () {\r\n  var edges = [];\r\n  edges = edges.concat(this.graphManager.getAllEdges());\r\n  var visited = new Set();\r\n  var i;\r\n  for (i = 0; i < edges.length; i++) {\r\n    var edge = edges[i];\r\n\r\n    if (!visited.has(edge)) {\r\n      var source = edge.getSource();\r\n      var target = edge.getTarget();\r\n\r\n      if (source == target) {\r\n        edge.getBendpoints().push(new PointD());\r\n        edge.getBendpoints().push(new PointD());\r\n        this.createDummyNodesForBendpoints(edge);\r\n        visited.add(edge);\r\n      } else {\r\n        var edgeList = [];\r\n\r\n        edgeList = edgeList.concat(source.getEdgeListToNode(target));\r\n        edgeList = edgeList.concat(target.getEdgeListToNode(source));\r\n\r\n        if (!visited.has(edgeList[0])) {\r\n          if (edgeList.length > 1) {\r\n            var k;\r\n            for (k = 0; k < edgeList.length; k++) {\r\n              var multiEdge = edgeList[k];\r\n              multiEdge.getBendpoints().push(new PointD());\r\n              this.createDummyNodesForBendpoints(multiEdge);\r\n            }\r\n          }\r\n          edgeList.forEach(function (edge) {\r\n            visited.add(edge);\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    if (visited.size == edges.length) {\r\n      break;\r\n    }\r\n  }\r\n};\r\n\r\nCoSELayout.prototype.positionNodesRadially = function (forest) {\r\n  // We tile the trees to a grid row by row; first tree starts at (0,0)\r\n  var currentStartingPoint = new Point(0, 0);\r\n  var numberOfColumns = Math.ceil(Math.sqrt(forest.length));\r\n  var height = 0;\r\n  var currentY = 0;\r\n  var currentX = 0;\r\n  var point = new PointD(0, 0);\r\n\r\n  for (var i = 0; i < forest.length; i++) {\r\n    if (i % numberOfColumns == 0) {\r\n      // Start of a new row, make the x coordinate 0, increment the\r\n      // y coordinate with the max height of the previous row\r\n      currentX = 0;\r\n      currentY = height;\r\n\r\n      if (i != 0) {\r\n        currentY += CoSEConstants.DEFAULT_COMPONENT_SEPERATION;\r\n      }\r\n\r\n      height = 0;\r\n    }\r\n\r\n    var tree = forest[i];\r\n\r\n    // Find the center of the tree\r\n    var centerNode = Layout.findCenterOfTree(tree);\r\n\r\n    // Set the staring point of the next tree\r\n    currentStartingPoint.x = currentX;\r\n    currentStartingPoint.y = currentY;\r\n\r\n    // Do a radial layout starting with the center\r\n    point = CoSELayout.radialLayout(tree, centerNode, currentStartingPoint);\r\n\r\n    if (point.y > height) {\r\n      height = Math.floor(point.y);\r\n    }\r\n\r\n    currentX = Math.floor(point.x + CoSEConstants.DEFAULT_COMPONENT_SEPERATION);\r\n  }\r\n\r\n  this.transform(new PointD(LayoutConstants.WORLD_CENTER_X - point.x / 2, LayoutConstants.WORLD_CENTER_Y - point.y / 2));\r\n};\r\n\r\nCoSELayout.radialLayout = function (tree, centerNode, startingPoint) {\r\n  var radialSep = Math.max(this.maxDiagonalInTree(tree), CoSEConstants.DEFAULT_RADIAL_SEPARATION);\r\n  CoSELayout.branchRadialLayout(centerNode, null, 0, 359, 0, radialSep);\r\n  var bounds = LGraph.calculateBounds(tree);\r\n\r\n  var transform = new Transform();\r\n  transform.setDeviceOrgX(bounds.getMinX());\r\n  transform.setDeviceOrgY(bounds.getMinY());\r\n  transform.setWorldOrgX(startingPoint.x);\r\n  transform.setWorldOrgY(startingPoint.y);\r\n\r\n  for (var i = 0; i < tree.length; i++) {\r\n    var node = tree[i];\r\n    node.transform(transform);\r\n  }\r\n\r\n  var bottomRight = new PointD(bounds.getMaxX(), bounds.getMaxY());\r\n\r\n  return transform.inverseTransformPoint(bottomRight);\r\n};\r\n\r\nCoSELayout.branchRadialLayout = function (node, parentOfNode, startAngle, endAngle, distance, radialSeparation) {\r\n  // First, position this node by finding its angle.\r\n  var halfInterval = (endAngle - startAngle + 1) / 2;\r\n\r\n  if (halfInterval < 0) {\r\n    halfInterval += 180;\r\n  }\r\n\r\n  var nodeAngle = (halfInterval + startAngle) % 360;\r\n  var teta = nodeAngle * IGeometry.TWO_PI / 360;\r\n\r\n  // Make polar to java cordinate conversion.\r\n  var cos_teta = Math.cos(teta);\r\n  var x_ = distance * Math.cos(teta);\r\n  var y_ = distance * Math.sin(teta);\r\n\r\n  node.setCenter(x_, y_);\r\n\r\n  // Traverse all neighbors of this node and recursively call this\r\n  // function.\r\n  var neighborEdges = [];\r\n  neighborEdges = neighborEdges.concat(node.getEdges());\r\n  var childCount = neighborEdges.length;\r\n\r\n  if (parentOfNode != null) {\r\n    childCount--;\r\n  }\r\n\r\n  var branchCount = 0;\r\n\r\n  var incEdgesCount = neighborEdges.length;\r\n  var startIndex;\r\n\r\n  var edges = node.getEdgesBetween(parentOfNode);\r\n\r\n  // If there are multiple edges, prune them until there remains only one\r\n  // edge.\r\n  while (edges.length > 1) {\r\n    //neighborEdges.remove(edges.remove(0));\r\n    var temp = edges[0];\r\n    edges.splice(0, 1);\r\n    var index = neighborEdges.indexOf(temp);\r\n    if (index >= 0) {\r\n      neighborEdges.splice(index, 1);\r\n    }\r\n    incEdgesCount--;\r\n    childCount--;\r\n  }\r\n\r\n  if (parentOfNode != null) {\r\n    //assert edges.length == 1;\r\n    startIndex = (neighborEdges.indexOf(edges[0]) + 1) % incEdgesCount;\r\n  } else {\r\n    startIndex = 0;\r\n  }\r\n\r\n  var stepAngle = Math.abs(endAngle - startAngle) / childCount;\r\n\r\n  for (var i = startIndex; branchCount != childCount; i = ++i % incEdgesCount) {\r\n    var currentNeighbor = neighborEdges[i].getOtherEnd(node);\r\n\r\n    // Don't back traverse to root node in current tree.\r\n    if (currentNeighbor == parentOfNode) {\r\n      continue;\r\n    }\r\n\r\n    var childStartAngle = (startAngle + branchCount * stepAngle) % 360;\r\n    var childEndAngle = (childStartAngle + stepAngle) % 360;\r\n\r\n    CoSELayout.branchRadialLayout(currentNeighbor, node, childStartAngle, childEndAngle, distance + radialSeparation, radialSeparation);\r\n\r\n    branchCount++;\r\n  }\r\n};\r\n\r\nCoSELayout.maxDiagonalInTree = function (tree) {\r\n  var maxDiagonal = Integer.MIN_VALUE;\r\n\r\n  for (var i = 0; i < tree.length; i++) {\r\n    var node = tree[i];\r\n    var diagonal = node.getDiagonal();\r\n\r\n    if (diagonal > maxDiagonal) {\r\n      maxDiagonal = diagonal;\r\n    }\r\n  }\r\n\r\n  return maxDiagonal;\r\n};\r\n\r\nCoSELayout.prototype.calcRepulsionRange = function () {\r\n  // formula is 2 x (level + 1) x idealEdgeLength\r\n  return 2 * (this.level + 1) * this.idealEdgeLength;\r\n};\r\n\r\n// Tiling methods\r\n\r\n// Group zero degree members whose parents are not to be tiled, create dummy parents where needed and fill memberGroups by their dummp parent id's\r\nCoSELayout.prototype.groupZeroDegreeMembers = function () {\r\n  var self = this;\r\n  // array of [parent_id x oneDegreeNode_id]\r\n  var tempMemberGroups = {}; // A temporary map of parent node and its zero degree members\r\n  this.memberGroups = {}; // A map of dummy parent node and its zero degree members whose parents are not to be tiled\r\n  this.idToDummyNode = {}; // A map of id to dummy node \r\n\r\n  var zeroDegree = []; // List of zero degree nodes whose parents are not to be tiled\r\n  var allNodes = this.graphManager.getAllNodes();\r\n\r\n  // Fill zero degree list\r\n  for (var i = 0; i < allNodes.length; i++) {\r\n    var node = allNodes[i];\r\n    var parent = node.getParent();\r\n    // If a node has zero degree and its parent is not to be tiled if exists add that node to zeroDegres list\r\n    if (this.getNodeDegreeWithChildren(node) === 0 && (parent.id == undefined || !this.getToBeTiled(parent))) {\r\n      zeroDegree.push(node);\r\n    }\r\n  }\r\n\r\n  // Create a map of parent node and its zero degree members\r\n  for (var i = 0; i < zeroDegree.length; i++) {\r\n    var node = zeroDegree[i]; // Zero degree node itself\r\n    var p_id = node.getParent().id; // Parent id\r\n\r\n    if (typeof tempMemberGroups[p_id] === \"undefined\") tempMemberGroups[p_id] = [];\r\n\r\n    tempMemberGroups[p_id] = tempMemberGroups[p_id].concat(node); // Push node to the list belongs to its parent in tempMemberGroups\r\n  }\r\n\r\n  // If there are at least two nodes at a level, create a dummy compound for them\r\n  Object.keys(tempMemberGroups).forEach(function (p_id) {\r\n    if (tempMemberGroups[p_id].length > 1) {\r\n      var dummyCompoundId = \"DummyCompound_\" + p_id; // The id of dummy compound which will be created soon\r\n      self.memberGroups[dummyCompoundId] = tempMemberGroups[p_id]; // Add dummy compound to memberGroups\r\n\r\n      var parent = tempMemberGroups[p_id][0].getParent(); // The parent of zero degree nodes will be the parent of new dummy compound\r\n\r\n      // Create a dummy compound with calculated id\r\n      var dummyCompound = new CoSENode(self.graphManager);\r\n      dummyCompound.id = dummyCompoundId;\r\n      dummyCompound.paddingLeft = parent.paddingLeft || 0;\r\n      dummyCompound.paddingRight = parent.paddingRight || 0;\r\n      dummyCompound.paddingBottom = parent.paddingBottom || 0;\r\n      dummyCompound.paddingTop = parent.paddingTop || 0;\r\n\r\n      self.idToDummyNode[dummyCompoundId] = dummyCompound;\r\n\r\n      var dummyParentGraph = self.getGraphManager().add(self.newGraph(), dummyCompound);\r\n      var parentGraph = parent.getChild();\r\n\r\n      // Add dummy compound to parent the graph\r\n      parentGraph.add(dummyCompound);\r\n\r\n      // For each zero degree node in this level remove it from its parent graph and add it to the graph of dummy parent\r\n      for (var i = 0; i < tempMemberGroups[p_id].length; i++) {\r\n        var node = tempMemberGroups[p_id][i];\r\n\r\n        parentGraph.remove(node);\r\n        dummyParentGraph.add(node);\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\nCoSELayout.prototype.clearCompounds = function () {\r\n  var childGraphMap = {};\r\n  var idToNode = {};\r\n\r\n  // Get compound ordering by finding the inner one first\r\n  this.performDFSOnCompounds();\r\n\r\n  for (var i = 0; i < this.compoundOrder.length; i++) {\r\n\r\n    idToNode[this.compoundOrder[i].id] = this.compoundOrder[i];\r\n    childGraphMap[this.compoundOrder[i].id] = [].concat(this.compoundOrder[i].getChild().getNodes());\r\n\r\n    // Remove children of compounds\r\n    this.graphManager.remove(this.compoundOrder[i].getChild());\r\n    this.compoundOrder[i].child = null;\r\n  }\r\n\r\n  this.graphManager.resetAllNodes();\r\n\r\n  // Tile the removed children\r\n  this.tileCompoundMembers(childGraphMap, idToNode);\r\n};\r\n\r\nCoSELayout.prototype.clearZeroDegreeMembers = function () {\r\n  var self = this;\r\n  var tiledZeroDegreePack = this.tiledZeroDegreePack = [];\r\n\r\n  Object.keys(this.memberGroups).forEach(function (id) {\r\n    var compoundNode = self.idToDummyNode[id]; // Get the dummy compound\r\n\r\n    tiledZeroDegreePack[id] = self.tileNodes(self.memberGroups[id], compoundNode.paddingLeft + compoundNode.paddingRight);\r\n\r\n    // Set the width and height of the dummy compound as calculated\r\n    compoundNode.rect.width = tiledZeroDegreePack[id].width;\r\n    compoundNode.rect.height = tiledZeroDegreePack[id].height;\r\n  });\r\n};\r\n\r\nCoSELayout.prototype.repopulateCompounds = function () {\r\n  for (var i = this.compoundOrder.length - 1; i >= 0; i--) {\r\n    var lCompoundNode = this.compoundOrder[i];\r\n    var id = lCompoundNode.id;\r\n    var horizontalMargin = lCompoundNode.paddingLeft;\r\n    var verticalMargin = lCompoundNode.paddingTop;\r\n\r\n    this.adjustLocations(this.tiledMemberPack[id], lCompoundNode.rect.x, lCompoundNode.rect.y, horizontalMargin, verticalMargin);\r\n  }\r\n};\r\n\r\nCoSELayout.prototype.repopulateZeroDegreeMembers = function () {\r\n  var self = this;\r\n  var tiledPack = this.tiledZeroDegreePack;\r\n\r\n  Object.keys(tiledPack).forEach(function (id) {\r\n    var compoundNode = self.idToDummyNode[id]; // Get the dummy compound by its id\r\n    var horizontalMargin = compoundNode.paddingLeft;\r\n    var verticalMargin = compoundNode.paddingTop;\r\n\r\n    // Adjust the positions of nodes wrt its compound\r\n    self.adjustLocations(tiledPack[id], compoundNode.rect.x, compoundNode.rect.y, horizontalMargin, verticalMargin);\r\n  });\r\n};\r\n\r\nCoSELayout.prototype.getToBeTiled = function (node) {\r\n  var id = node.id;\r\n  //firstly check the previous results\r\n  if (this.toBeTiled[id] != null) {\r\n    return this.toBeTiled[id];\r\n  }\r\n\r\n  //only compound nodes are to be tiled\r\n  var childGraph = node.getChild();\r\n  if (childGraph == null) {\r\n    this.toBeTiled[id] = false;\r\n    return false;\r\n  }\r\n\r\n  var children = childGraph.getNodes(); // Get the children nodes\r\n\r\n  //a compound node is not to be tiled if all of its compound children are not to be tiled\r\n  for (var i = 0; i < children.length; i++) {\r\n    var theChild = children[i];\r\n\r\n    if (this.getNodeDegree(theChild) > 0) {\r\n      this.toBeTiled[id] = false;\r\n      return false;\r\n    }\r\n\r\n    //pass the children not having the compound structure\r\n    if (theChild.getChild() == null) {\r\n      this.toBeTiled[theChild.id] = false;\r\n      continue;\r\n    }\r\n\r\n    if (!this.getToBeTiled(theChild)) {\r\n      this.toBeTiled[id] = false;\r\n      return false;\r\n    }\r\n  }\r\n  this.toBeTiled[id] = true;\r\n  return true;\r\n};\r\n\r\n// Get degree of a node depending of its edges and independent of its children\r\nCoSELayout.prototype.getNodeDegree = function (node) {\r\n  var id = node.id;\r\n  var edges = node.getEdges();\r\n  var degree = 0;\r\n\r\n  // For the edges connected\r\n  for (var i = 0; i < edges.length; i++) {\r\n    var edge = edges[i];\r\n    if (edge.getSource().id !== edge.getTarget().id) {\r\n      degree = degree + 1;\r\n    }\r\n  }\r\n  return degree;\r\n};\r\n\r\n// Get degree of a node with its children\r\nCoSELayout.prototype.getNodeDegreeWithChildren = function (node) {\r\n  var degree = this.getNodeDegree(node);\r\n  if (node.getChild() == null) {\r\n    return degree;\r\n  }\r\n  var children = node.getChild().getNodes();\r\n  for (var i = 0; i < children.length; i++) {\r\n    var child = children[i];\r\n    degree += this.getNodeDegreeWithChildren(child);\r\n  }\r\n  return degree;\r\n};\r\n\r\nCoSELayout.prototype.performDFSOnCompounds = function () {\r\n  this.compoundOrder = [];\r\n  this.fillCompexOrderByDFS(this.graphManager.getRoot().getNodes());\r\n};\r\n\r\nCoSELayout.prototype.fillCompexOrderByDFS = function (children) {\r\n  for (var i = 0; i < children.length; i++) {\r\n    var child = children[i];\r\n    if (child.getChild() != null) {\r\n      this.fillCompexOrderByDFS(child.getChild().getNodes());\r\n    }\r\n    if (this.getToBeTiled(child)) {\r\n      this.compoundOrder.push(child);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n* This method places each zero degree member wrt given (x,y) coordinates (top left).\r\n*/\r\nCoSELayout.prototype.adjustLocations = function (organization, x, y, compoundHorizontalMargin, compoundVerticalMargin) {\r\n  x += compoundHorizontalMargin;\r\n  y += compoundVerticalMargin;\r\n\r\n  var left = x;\r\n\r\n  for (var i = 0; i < organization.rows.length; i++) {\r\n    var row = organization.rows[i];\r\n    x = left;\r\n    var maxHeight = 0;\r\n\r\n    for (var j = 0; j < row.length; j++) {\r\n      var lnode = row[j];\r\n\r\n      lnode.rect.x = x; // + lnode.rect.width / 2;\r\n      lnode.rect.y = y; // + lnode.rect.height / 2;\r\n\r\n      x += lnode.rect.width + organization.horizontalPadding;\r\n\r\n      if (lnode.rect.height > maxHeight) maxHeight = lnode.rect.height;\r\n    }\r\n\r\n    y += maxHeight + organization.verticalPadding;\r\n  }\r\n};\r\n\r\nCoSELayout.prototype.tileCompoundMembers = function (childGraphMap, idToNode) {\r\n  var self = this;\r\n  this.tiledMemberPack = [];\r\n\r\n  Object.keys(childGraphMap).forEach(function (id) {\r\n    // Get the compound node\r\n    var compoundNode = idToNode[id];\r\n\r\n    self.tiledMemberPack[id] = self.tileNodes(childGraphMap[id], compoundNode.paddingLeft + compoundNode.paddingRight);\r\n\r\n    compoundNode.rect.width = self.tiledMemberPack[id].width;\r\n    compoundNode.rect.height = self.tiledMemberPack[id].height;\r\n  });\r\n};\r\n\r\nCoSELayout.prototype.tileNodes = function (nodes, minWidth) {\r\n  var verticalPadding = CoSEConstants.TILING_PADDING_VERTICAL;\r\n  var horizontalPadding = CoSEConstants.TILING_PADDING_HORIZONTAL;\r\n  var organization = {\r\n    rows: [],\r\n    rowWidth: [],\r\n    rowHeight: [],\r\n    width: 0,\r\n    height: minWidth, // assume minHeight equals to minWidth\r\n    verticalPadding: verticalPadding,\r\n    horizontalPadding: horizontalPadding\r\n  };\r\n\r\n  // Sort the nodes in ascending order of their areas\r\n  nodes.sort(function (n1, n2) {\r\n    if (n1.rect.width * n1.rect.height > n2.rect.width * n2.rect.height) return -1;\r\n    if (n1.rect.width * n1.rect.height < n2.rect.width * n2.rect.height) return 1;\r\n    return 0;\r\n  });\r\n\r\n  // Create the organization -> tile members\r\n  for (var i = 0; i < nodes.length; i++) {\r\n    var lNode = nodes[i];\r\n\r\n    if (organization.rows.length == 0) {\r\n      this.insertNodeToRow(organization, lNode, 0, minWidth);\r\n    } else if (this.canAddHorizontal(organization, lNode.rect.width, lNode.rect.height)) {\r\n      this.insertNodeToRow(organization, lNode, this.getShortestRowIndex(organization), minWidth);\r\n    } else {\r\n      this.insertNodeToRow(organization, lNode, organization.rows.length, minWidth);\r\n    }\r\n\r\n    this.shiftToLastRow(organization);\r\n  }\r\n\r\n  return organization;\r\n};\r\n\r\nCoSELayout.prototype.insertNodeToRow = function (organization, node, rowIndex, minWidth) {\r\n  var minCompoundSize = minWidth;\r\n\r\n  // Add new row if needed\r\n  if (rowIndex == organization.rows.length) {\r\n    var secondDimension = [];\r\n\r\n    organization.rows.push(secondDimension);\r\n    organization.rowWidth.push(minCompoundSize);\r\n    organization.rowHeight.push(0);\r\n  }\r\n\r\n  // Update row width\r\n  var w = organization.rowWidth[rowIndex] + node.rect.width;\r\n\r\n  if (organization.rows[rowIndex].length > 0) {\r\n    w += organization.horizontalPadding;\r\n  }\r\n\r\n  organization.rowWidth[rowIndex] = w;\r\n  // Update compound width\r\n  if (organization.width < w) {\r\n    organization.width = w;\r\n  }\r\n\r\n  // Update height\r\n  var h = node.rect.height;\r\n  if (rowIndex > 0) h += organization.verticalPadding;\r\n\r\n  var extraHeight = 0;\r\n  if (h > organization.rowHeight[rowIndex]) {\r\n    extraHeight = organization.rowHeight[rowIndex];\r\n    organization.rowHeight[rowIndex] = h;\r\n    extraHeight = organization.rowHeight[rowIndex] - extraHeight;\r\n  }\r\n\r\n  organization.height += extraHeight;\r\n\r\n  // Insert node\r\n  organization.rows[rowIndex].push(node);\r\n};\r\n\r\n//Scans the rows of an organization and returns the one with the min width\r\nCoSELayout.prototype.getShortestRowIndex = function (organization) {\r\n  var r = -1;\r\n  var min = Number.MAX_VALUE;\r\n\r\n  for (var i = 0; i < organization.rows.length; i++) {\r\n    if (organization.rowWidth[i] < min) {\r\n      r = i;\r\n      min = organization.rowWidth[i];\r\n    }\r\n  }\r\n  return r;\r\n};\r\n\r\n//Scans the rows of an organization and returns the one with the max width\r\nCoSELayout.prototype.getLongestRowIndex = function (organization) {\r\n  var r = -1;\r\n  var max = Number.MIN_VALUE;\r\n\r\n  for (var i = 0; i < organization.rows.length; i++) {\r\n\r\n    if (organization.rowWidth[i] > max) {\r\n      r = i;\r\n      max = organization.rowWidth[i];\r\n    }\r\n  }\r\n\r\n  return r;\r\n};\r\n\r\n/**\r\n* This method checks whether adding extra width to the organization violates\r\n* the aspect ratio(1) or not.\r\n*/\r\nCoSELayout.prototype.canAddHorizontal = function (organization, extraWidth, extraHeight) {\r\n\r\n  var sri = this.getShortestRowIndex(organization);\r\n\r\n  if (sri < 0) {\r\n    return true;\r\n  }\r\n\r\n  var min = organization.rowWidth[sri];\r\n\r\n  if (min + organization.horizontalPadding + extraWidth <= organization.width) return true;\r\n\r\n  var hDiff = 0;\r\n\r\n  // Adding to an existing row\r\n  if (organization.rowHeight[sri] < extraHeight) {\r\n    if (sri > 0) hDiff = extraHeight + organization.verticalPadding - organization.rowHeight[sri];\r\n  }\r\n\r\n  var add_to_row_ratio;\r\n  if (organization.width - min >= extraWidth + organization.horizontalPadding) {\r\n    add_to_row_ratio = (organization.height + hDiff) / (min + extraWidth + organization.horizontalPadding);\r\n  } else {\r\n    add_to_row_ratio = (organization.height + hDiff) / organization.width;\r\n  }\r\n\r\n  // Adding a new row for this node\r\n  hDiff = extraHeight + organization.verticalPadding;\r\n  var add_new_row_ratio;\r\n  if (organization.width < extraWidth) {\r\n    add_new_row_ratio = (organization.height + hDiff) / extraWidth;\r\n  } else {\r\n    add_new_row_ratio = (organization.height + hDiff) / organization.width;\r\n  }\r\n\r\n  if (add_new_row_ratio < 1) add_new_row_ratio = 1 / add_new_row_ratio;\r\n\r\n  if (add_to_row_ratio < 1) add_to_row_ratio = 1 / add_to_row_ratio;\r\n\r\n  return add_to_row_ratio < add_new_row_ratio;\r\n};\r\n\r\n//If moving the last node from the longest row and adding it to the last\r\n//row makes the bounding box smaller, do it.\r\nCoSELayout.prototype.shiftToLastRow = function (organization) {\r\n  var longest = this.getLongestRowIndex(organization);\r\n  var last = organization.rowWidth.length - 1;\r\n  var row = organization.rows[longest];\r\n  var node = row[row.length - 1];\r\n\r\n  var diff = node.width + organization.horizontalPadding;\r\n\r\n  // Check if there is enough space on the last row\r\n  if (organization.width - organization.rowWidth[last] > diff && longest != last) {\r\n    // Remove the last element of the longest row\r\n    row.splice(-1, 1);\r\n\r\n    // Push it to the last row\r\n    organization.rows[last].push(node);\r\n\r\n    organization.rowWidth[longest] = organization.rowWidth[longest] - diff;\r\n    organization.rowWidth[last] = organization.rowWidth[last] + diff;\r\n    organization.width = organization.rowWidth[instance.getLongestRowIndex(organization)];\r\n\r\n    // Update heights of the organization\r\n    var maxHeight = Number.MIN_VALUE;\r\n    for (var i = 0; i < row.length; i++) {\r\n      if (row[i].height > maxHeight) maxHeight = row[i].height;\r\n    }\r\n    if (longest > 0) maxHeight += organization.verticalPadding;\r\n\r\n    var prevTotal = organization.rowHeight[longest] + organization.rowHeight[last];\r\n\r\n    organization.rowHeight[longest] = maxHeight;\r\n    if (organization.rowHeight[last] < node.height + organization.verticalPadding) organization.rowHeight[last] = node.height + organization.verticalPadding;\r\n\r\n    var finalTotal = organization.rowHeight[longest] + organization.rowHeight[last];\r\n    organization.height += finalTotal - prevTotal;\r\n\r\n    this.shiftToLastRow(organization);\r\n  }\r\n};\r\n\r\nCoSELayout.prototype.tilingPreLayout = function () {\r\n  if (CoSEConstants.TILE) {\r\n    // Find zero degree nodes and create a compound for each level\r\n    this.groupZeroDegreeMembers();\r\n    // Tile and clear children of each compound\r\n    this.clearCompounds();\r\n    // Separately tile and clear zero degree nodes for each level\r\n    this.clearZeroDegreeMembers();\r\n  }\r\n};\r\n\r\nCoSELayout.prototype.tilingPostLayout = function () {\r\n  if (CoSEConstants.TILE) {\r\n    this.repopulateZeroDegreeMembers();\r\n    this.repopulateCompounds();\r\n  }\r\n};\r\n\r\n// -----------------------------------------------------------------------------\r\n// Section: Tree Reduction methods\r\n// -----------------------------------------------------------------------------\r\n// Reduce trees \r\nCoSELayout.prototype.reduceTrees = function () {\r\n  var prunedNodesAll = [];\r\n  var containsLeaf = true;\r\n  var node;\r\n\r\n  while (containsLeaf) {\r\n    var allNodes = this.graphManager.getAllNodes();\r\n    var prunedNodesInStepTemp = [];\r\n    containsLeaf = false;\r\n\r\n    for (var i = 0; i < allNodes.length; i++) {\r\n      node = allNodes[i];\r\n      if (node.getEdges().length == 1 && !node.getEdges()[0].isInterGraph && node.getChild() == null) {\r\n        prunedNodesInStepTemp.push([node, node.getEdges()[0], node.getOwner()]);\r\n        containsLeaf = true;\r\n      }\r\n    }\r\n    if (containsLeaf == true) {\r\n      var prunedNodesInStep = [];\r\n      for (var j = 0; j < prunedNodesInStepTemp.length; j++) {\r\n        if (prunedNodesInStepTemp[j][0].getEdges().length == 1) {\r\n          prunedNodesInStep.push(prunedNodesInStepTemp[j]);\r\n          prunedNodesInStepTemp[j][0].getOwner().remove(prunedNodesInStepTemp[j][0]);\r\n        }\r\n      }\r\n      prunedNodesAll.push(prunedNodesInStep);\r\n      this.graphManager.resetAllNodes();\r\n      this.graphManager.resetAllEdges();\r\n    }\r\n  }\r\n  this.prunedNodesAll = prunedNodesAll;\r\n};\r\n\r\n// Grow tree one step \r\nCoSELayout.prototype.growTree = function (prunedNodesAll) {\r\n  var lengthOfPrunedNodesInStep = prunedNodesAll.length;\r\n  var prunedNodesInStep = prunedNodesAll[lengthOfPrunedNodesInStep - 1];\r\n\r\n  var nodeData;\r\n  for (var i = 0; i < prunedNodesInStep.length; i++) {\r\n    nodeData = prunedNodesInStep[i];\r\n\r\n    this.findPlaceforPrunedNode(nodeData);\r\n\r\n    nodeData[2].add(nodeData[0]);\r\n    nodeData[2].add(nodeData[1], nodeData[1].source, nodeData[1].target);\r\n  }\r\n\r\n  prunedNodesAll.splice(prunedNodesAll.length - 1, 1);\r\n  this.graphManager.resetAllNodes();\r\n  this.graphManager.resetAllEdges();\r\n};\r\n\r\n// Find an appropriate position to replace pruned node, this method can be improved\r\nCoSELayout.prototype.findPlaceforPrunedNode = function (nodeData) {\r\n\r\n  var gridForPrunedNode;\r\n  var nodeToConnect;\r\n  var prunedNode = nodeData[0];\r\n  if (prunedNode == nodeData[1].source) {\r\n    nodeToConnect = nodeData[1].target;\r\n  } else {\r\n    nodeToConnect = nodeData[1].source;\r\n  }\r\n  var startGridX = nodeToConnect.startX;\r\n  var finishGridX = nodeToConnect.finishX;\r\n  var startGridY = nodeToConnect.startY;\r\n  var finishGridY = nodeToConnect.finishY;\r\n\r\n  var upNodeCount = 0;\r\n  var downNodeCount = 0;\r\n  var rightNodeCount = 0;\r\n  var leftNodeCount = 0;\r\n  var controlRegions = [upNodeCount, rightNodeCount, downNodeCount, leftNodeCount];\r\n\r\n  if (startGridY > 0) {\r\n    for (var i = startGridX; i <= finishGridX; i++) {\r\n      controlRegions[0] += this.grid[i][startGridY - 1].length + this.grid[i][startGridY].length - 1;\r\n    }\r\n  }\r\n  if (finishGridX < this.grid.length - 1) {\r\n    for (var i = startGridY; i <= finishGridY; i++) {\r\n      controlRegions[1] += this.grid[finishGridX + 1][i].length + this.grid[finishGridX][i].length - 1;\r\n    }\r\n  }\r\n  if (finishGridY < this.grid[0].length - 1) {\r\n    for (var i = startGridX; i <= finishGridX; i++) {\r\n      controlRegions[2] += this.grid[i][finishGridY + 1].length + this.grid[i][finishGridY].length - 1;\r\n    }\r\n  }\r\n  if (startGridX > 0) {\r\n    for (var i = startGridY; i <= finishGridY; i++) {\r\n      controlRegions[3] += this.grid[startGridX - 1][i].length + this.grid[startGridX][i].length - 1;\r\n    }\r\n  }\r\n  var min = Integer.MAX_VALUE;\r\n  var minCount;\r\n  var minIndex;\r\n  for (var j = 0; j < controlRegions.length; j++) {\r\n    if (controlRegions[j] < min) {\r\n      min = controlRegions[j];\r\n      minCount = 1;\r\n      minIndex = j;\r\n    } else if (controlRegions[j] == min) {\r\n      minCount++;\r\n    }\r\n  }\r\n\r\n  if (minCount == 3 && min == 0) {\r\n    if (controlRegions[0] == 0 && controlRegions[1] == 0 && controlRegions[2] == 0) {\r\n      gridForPrunedNode = 1;\r\n    } else if (controlRegions[0] == 0 && controlRegions[1] == 0 && controlRegions[3] == 0) {\r\n      gridForPrunedNode = 0;\r\n    } else if (controlRegions[0] == 0 && controlRegions[2] == 0 && controlRegions[3] == 0) {\r\n      gridForPrunedNode = 3;\r\n    } else if (controlRegions[1] == 0 && controlRegions[2] == 0 && controlRegions[3] == 0) {\r\n      gridForPrunedNode = 2;\r\n    }\r\n  } else if (minCount == 2 && min == 0) {\r\n    var random = Math.floor(Math.random() * 2);\r\n    if (controlRegions[0] == 0 && controlRegions[1] == 0) {\r\n      ;\r\n      if (random == 0) {\r\n        gridForPrunedNode = 0;\r\n      } else {\r\n        gridForPrunedNode = 1;\r\n      }\r\n    } else if (controlRegions[0] == 0 && controlRegions[2] == 0) {\r\n      if (random == 0) {\r\n        gridForPrunedNode = 0;\r\n      } else {\r\n        gridForPrunedNode = 2;\r\n      }\r\n    } else if (controlRegions[0] == 0 && controlRegions[3] == 0) {\r\n      if (random == 0) {\r\n        gridForPrunedNode = 0;\r\n      } else {\r\n        gridForPrunedNode = 3;\r\n      }\r\n    } else if (controlRegions[1] == 0 && controlRegions[2] == 0) {\r\n      if (random == 0) {\r\n        gridForPrunedNode = 1;\r\n      } else {\r\n        gridForPrunedNode = 2;\r\n      }\r\n    } else if (controlRegions[1] == 0 && controlRegions[3] == 0) {\r\n      if (random == 0) {\r\n        gridForPrunedNode = 1;\r\n      } else {\r\n        gridForPrunedNode = 3;\r\n      }\r\n    } else {\r\n      if (random == 0) {\r\n        gridForPrunedNode = 2;\r\n      } else {\r\n        gridForPrunedNode = 3;\r\n      }\r\n    }\r\n  } else if (minCount == 4 && min == 0) {\r\n    var random = Math.floor(Math.random() * 4);\r\n    gridForPrunedNode = random;\r\n  } else {\r\n    gridForPrunedNode = minIndex;\r\n  }\r\n\r\n  if (gridForPrunedNode == 0) {\r\n    prunedNode.setCenter(nodeToConnect.getCenterX(), nodeToConnect.getCenterY() - nodeToConnect.getHeight() / 2 - FDLayoutConstants.DEFAULT_EDGE_LENGTH - prunedNode.getHeight() / 2);\r\n  } else if (gridForPrunedNode == 1) {\r\n    prunedNode.setCenter(nodeToConnect.getCenterX() + nodeToConnect.getWidth() / 2 + FDLayoutConstants.DEFAULT_EDGE_LENGTH + prunedNode.getWidth() / 2, nodeToConnect.getCenterY());\r\n  } else if (gridForPrunedNode == 2) {\r\n    prunedNode.setCenter(nodeToConnect.getCenterX(), nodeToConnect.getCenterY() + nodeToConnect.getHeight() / 2 + FDLayoutConstants.DEFAULT_EDGE_LENGTH + prunedNode.getHeight() / 2);\r\n  } else {\r\n    prunedNode.setCenter(nodeToConnect.getCenterX() - nodeToConnect.getWidth() / 2 - FDLayoutConstants.DEFAULT_EDGE_LENGTH - prunedNode.getWidth() / 2, nodeToConnect.getCenterY());\r\n  }\r\n};\r\n\r\nmodule.exports = CoSELayout;\r\n\r\n/***/ }),\r\n/* 7 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nvar coseBase = {};\r\n\r\ncoseBase.layoutBase = __webpack_require__(0);\r\ncoseBase.CoSEConstants = __webpack_require__(1);\r\ncoseBase.CoSEEdge = __webpack_require__(2);\r\ncoseBase.CoSEGraph = __webpack_require__(3);\r\ncoseBase.CoSEGraphManager = __webpack_require__(4);\r\ncoseBase.CoSELayout = __webpack_require__(6);\r\ncoseBase.CoSENode = __webpack_require__(5);\r\n\r\nmodule.exports = coseBase;\r\n\r\n/***/ })\r\n/******/ ]);\r\n});", "(function webpackUniversalModuleDefinition(root, factory) {\r\n\tif(typeof exports === 'object' && typeof module === 'object')\r\n\t\tmodule.exports = factory(require(\"cose-base\"));\r\n\telse if(typeof define === 'function' && define.amd)\r\n\t\tdefine([\"cose-base\"], factory);\r\n\telse if(typeof exports === 'object')\r\n\t\texports[\"cytoscapeCoseBilkent\"] = factory(require(\"cose-base\"));\r\n\telse\r\n\t\troot[\"cytoscapeCoseBilkent\"] = factory(root[\"coseBase\"]);\r\n})(this, function(__WEBPACK_EXTERNAL_MODULE_0__) {\r\nreturn /******/ (function(modules) { // webpackBootstrap\r\n/******/ \t// The module cache\r\n/******/ \tvar installedModules = {};\r\n/******/\r\n/******/ \t// The require function\r\n/******/ \tfunction __webpack_require__(moduleId) {\r\n/******/\r\n/******/ \t\t// Check if module is in cache\r\n/******/ \t\tif(installedModules[moduleId]) {\r\n/******/ \t\t\treturn installedModules[moduleId].exports;\r\n/******/ \t\t}\r\n/******/ \t\t// Create a new module (and put it into the cache)\r\n/******/ \t\tvar module = installedModules[moduleId] = {\r\n/******/ \t\t\ti: moduleId,\r\n/******/ \t\t\tl: false,\r\n/******/ \t\t\texports: {}\r\n/******/ \t\t};\r\n/******/\r\n/******/ \t\t// Execute the module function\r\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\r\n/******/\r\n/******/ \t\t// Flag the module as loaded\r\n/******/ \t\tmodule.l = true;\r\n/******/\r\n/******/ \t\t// Return the exports of the module\r\n/******/ \t\treturn module.exports;\r\n/******/ \t}\r\n/******/\r\n/******/\r\n/******/ \t// expose the modules object (__webpack_modules__)\r\n/******/ \t__webpack_require__.m = modules;\r\n/******/\r\n/******/ \t// expose the module cache\r\n/******/ \t__webpack_require__.c = installedModules;\r\n/******/\r\n/******/ \t// identity function for calling harmony imports with the correct context\r\n/******/ \t__webpack_require__.i = function(value) { return value; };\r\n/******/\r\n/******/ \t// define getter function for harmony exports\r\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\r\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\r\n/******/ \t\t\tObject.defineProperty(exports, name, {\r\n/******/ \t\t\t\tconfigurable: false,\r\n/******/ \t\t\t\tenumerable: true,\r\n/******/ \t\t\t\tget: getter\r\n/******/ \t\t\t});\r\n/******/ \t\t}\r\n/******/ \t};\r\n/******/\r\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\r\n/******/ \t__webpack_require__.n = function(module) {\r\n/******/ \t\tvar getter = module && module.__esModule ?\r\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\r\n/******/ \t\t\tfunction getModuleExports() { return module; };\r\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\r\n/******/ \t\treturn getter;\r\n/******/ \t};\r\n/******/\r\n/******/ \t// Object.prototype.hasOwnProperty.call\r\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\r\n/******/\r\n/******/ \t// __webpack_public_path__\r\n/******/ \t__webpack_require__.p = \"\";\r\n/******/\r\n/******/ \t// Load entry module and return exports\r\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\r\n/******/ })\r\n/************************************************************************/\r\n/******/ ([\r\n/* 0 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_0__;\r\n\r\n/***/ }),\r\n/* 1 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nvar LayoutConstants = __webpack_require__(0).layoutBase.LayoutConstants;\r\nvar FDLayoutConstants = __webpack_require__(0).layoutBase.FDLayoutConstants;\r\nvar CoSEConstants = __webpack_require__(0).CoSEConstants;\r\nvar CoSELayout = __webpack_require__(0).CoSELayout;\r\nvar CoSENode = __webpack_require__(0).CoSENode;\r\nvar PointD = __webpack_require__(0).layoutBase.PointD;\r\nvar DimensionD = __webpack_require__(0).layoutBase.DimensionD;\r\n\r\nvar defaults = {\r\n  // Called on `layoutready`\r\n  ready: function ready() {},\r\n  // Called on `layoutstop`\r\n  stop: function stop() {},\r\n  // 'draft', 'default' or 'proof\" \r\n  // - 'draft' fast cooling rate \r\n  // - 'default' moderate cooling rate \r\n  // - \"proof\" slow cooling rate\r\n  quality: 'default',\r\n  // include labels in node dimensions\r\n  nodeDimensionsIncludeLabels: false,\r\n  // number of ticks per frame; higher is faster but more jerky\r\n  refresh: 30,\r\n  // Whether to fit the network view after when done\r\n  fit: true,\r\n  // Padding on fit\r\n  padding: 10,\r\n  // Whether to enable incremental mode\r\n  randomize: true,\r\n  // Node repulsion (non overlapping) multiplier\r\n  nodeRepulsion: 4500,\r\n  // Ideal edge (non nested) length\r\n  idealEdgeLength: 50,\r\n  // Divisor to compute edge forces\r\n  edgeElasticity: 0.45,\r\n  // Nesting factor (multiplier) to compute ideal edge length for nested edges\r\n  nestingFactor: 0.1,\r\n  // Gravity force (constant)\r\n  gravity: 0.25,\r\n  // Maximum number of iterations to perform\r\n  numIter: 2500,\r\n  // For enabling tiling\r\n  tile: true,\r\n  // Type of layout animation. The option set is {'during', 'end', false}\r\n  animate: 'end',\r\n  // Duration for animate:end\r\n  animationDuration: 500,\r\n  // Represents the amount of the vertical space to put between the zero degree members during the tiling operation(can also be a function)\r\n  tilingPaddingVertical: 10,\r\n  // Represents the amount of the horizontal space to put between the zero degree members during the tiling operation(can also be a function)\r\n  tilingPaddingHorizontal: 10,\r\n  // Gravity range (constant) for compounds\r\n  gravityRangeCompound: 1.5,\r\n  // Gravity force (constant) for compounds\r\n  gravityCompound: 1.0,\r\n  // Gravity range (constant)\r\n  gravityRange: 3.8,\r\n  // Initial cooling factor for incremental layout\r\n  initialEnergyOnIncremental: 0.5\r\n};\r\n\r\nfunction extend(defaults, options) {\r\n  var obj = {};\r\n\r\n  for (var i in defaults) {\r\n    obj[i] = defaults[i];\r\n  }\r\n\r\n  for (var i in options) {\r\n    obj[i] = options[i];\r\n  }\r\n\r\n  return obj;\r\n};\r\n\r\nfunction _CoSELayout(_options) {\r\n  this.options = extend(defaults, _options);\r\n  getUserOptions(this.options);\r\n}\r\n\r\nvar getUserOptions = function getUserOptions(options) {\r\n  if (options.nodeRepulsion != null) CoSEConstants.DEFAULT_REPULSION_STRENGTH = FDLayoutConstants.DEFAULT_REPULSION_STRENGTH = options.nodeRepulsion;\r\n  if (options.idealEdgeLength != null) CoSEConstants.DEFAULT_EDGE_LENGTH = FDLayoutConstants.DEFAULT_EDGE_LENGTH = options.idealEdgeLength;\r\n  if (options.edgeElasticity != null) CoSEConstants.DEFAULT_SPRING_STRENGTH = FDLayoutConstants.DEFAULT_SPRING_STRENGTH = options.edgeElasticity;\r\n  if (options.nestingFactor != null) CoSEConstants.PER_LEVEL_IDEAL_EDGE_LENGTH_FACTOR = FDLayoutConstants.PER_LEVEL_IDEAL_EDGE_LENGTH_FACTOR = options.nestingFactor;\r\n  if (options.gravity != null) CoSEConstants.DEFAULT_GRAVITY_STRENGTH = FDLayoutConstants.DEFAULT_GRAVITY_STRENGTH = options.gravity;\r\n  if (options.numIter != null) CoSEConstants.MAX_ITERATIONS = FDLayoutConstants.MAX_ITERATIONS = options.numIter;\r\n  if (options.gravityRange != null) CoSEConstants.DEFAULT_GRAVITY_RANGE_FACTOR = FDLayoutConstants.DEFAULT_GRAVITY_RANGE_FACTOR = options.gravityRange;\r\n  if (options.gravityCompound != null) CoSEConstants.DEFAULT_COMPOUND_GRAVITY_STRENGTH = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_STRENGTH = options.gravityCompound;\r\n  if (options.gravityRangeCompound != null) CoSEConstants.DEFAULT_COMPOUND_GRAVITY_RANGE_FACTOR = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_RANGE_FACTOR = options.gravityRangeCompound;\r\n  if (options.initialEnergyOnIncremental != null) CoSEConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL = options.initialEnergyOnIncremental;\r\n\r\n  if (options.quality == 'draft') LayoutConstants.QUALITY = 0;else if (options.quality == 'proof') LayoutConstants.QUALITY = 2;else LayoutConstants.QUALITY = 1;\r\n\r\n  CoSEConstants.NODE_DIMENSIONS_INCLUDE_LABELS = FDLayoutConstants.NODE_DIMENSIONS_INCLUDE_LABELS = LayoutConstants.NODE_DIMENSIONS_INCLUDE_LABELS = options.nodeDimensionsIncludeLabels;\r\n  CoSEConstants.DEFAULT_INCREMENTAL = FDLayoutConstants.DEFAULT_INCREMENTAL = LayoutConstants.DEFAULT_INCREMENTAL = !options.randomize;\r\n  CoSEConstants.ANIMATE = FDLayoutConstants.ANIMATE = LayoutConstants.ANIMATE = options.animate;\r\n  CoSEConstants.TILE = options.tile;\r\n  CoSEConstants.TILING_PADDING_VERTICAL = typeof options.tilingPaddingVertical === 'function' ? options.tilingPaddingVertical.call() : options.tilingPaddingVertical;\r\n  CoSEConstants.TILING_PADDING_HORIZONTAL = typeof options.tilingPaddingHorizontal === 'function' ? options.tilingPaddingHorizontal.call() : options.tilingPaddingHorizontal;\r\n};\r\n\r\n_CoSELayout.prototype.run = function () {\r\n  var ready;\r\n  var frameId;\r\n  var options = this.options;\r\n  var idToLNode = this.idToLNode = {};\r\n  var layout = this.layout = new CoSELayout();\r\n  var self = this;\r\n\r\n  self.stopped = false;\r\n\r\n  this.cy = this.options.cy;\r\n\r\n  this.cy.trigger({ type: 'layoutstart', layout: this });\r\n\r\n  var gm = layout.newGraphManager();\r\n  this.gm = gm;\r\n\r\n  var nodes = this.options.eles.nodes();\r\n  var edges = this.options.eles.edges();\r\n\r\n  this.root = gm.addRoot();\r\n  this.processChildrenList(this.root, this.getTopMostNodes(nodes), layout);\r\n\r\n  for (var i = 0; i < edges.length; i++) {\r\n    var edge = edges[i];\r\n    var sourceNode = this.idToLNode[edge.data(\"source\")];\r\n    var targetNode = this.idToLNode[edge.data(\"target\")];\r\n    if (sourceNode !== targetNode && sourceNode.getEdgesBetween(targetNode).length == 0) {\r\n      var e1 = gm.add(layout.newEdge(), sourceNode, targetNode);\r\n      e1.id = edge.id();\r\n    }\r\n  }\r\n\r\n  var getPositions = function getPositions(ele, i) {\r\n    if (typeof ele === \"number\") {\r\n      ele = i;\r\n    }\r\n    var theId = ele.data('id');\r\n    var lNode = self.idToLNode[theId];\r\n\r\n    return {\r\n      x: lNode.getRect().getCenterX(),\r\n      y: lNode.getRect().getCenterY()\r\n    };\r\n  };\r\n\r\n  /*\r\n   * Reposition nodes in iterations animatedly\r\n   */\r\n  var iterateAnimated = function iterateAnimated() {\r\n    // Thigs to perform after nodes are repositioned on screen\r\n    var afterReposition = function afterReposition() {\r\n      if (options.fit) {\r\n        options.cy.fit(options.eles, options.padding);\r\n      }\r\n\r\n      if (!ready) {\r\n        ready = true;\r\n        self.cy.one('layoutready', options.ready);\r\n        self.cy.trigger({ type: 'layoutready', layout: self });\r\n      }\r\n    };\r\n\r\n    var ticksPerFrame = self.options.refresh;\r\n    var isDone;\r\n\r\n    for (var i = 0; i < ticksPerFrame && !isDone; i++) {\r\n      isDone = self.stopped || self.layout.tick();\r\n    }\r\n\r\n    // If layout is done\r\n    if (isDone) {\r\n      // If the layout is not a sublayout and it is successful perform post layout.\r\n      if (layout.checkLayoutSuccess() && !layout.isSubLayout) {\r\n        layout.doPostLayout();\r\n      }\r\n\r\n      // If layout has a tilingPostLayout function property call it.\r\n      if (layout.tilingPostLayout) {\r\n        layout.tilingPostLayout();\r\n      }\r\n\r\n      layout.isLayoutFinished = true;\r\n\r\n      self.options.eles.nodes().positions(getPositions);\r\n\r\n      afterReposition();\r\n\r\n      // trigger layoutstop when the layout stops (e.g. finishes)\r\n      self.cy.one('layoutstop', self.options.stop);\r\n      self.cy.trigger({ type: 'layoutstop', layout: self });\r\n\r\n      if (frameId) {\r\n        cancelAnimationFrame(frameId);\r\n      }\r\n\r\n      ready = false;\r\n      return;\r\n    }\r\n\r\n    var animationData = self.layout.getPositionsData(); // Get positions of layout nodes note that all nodes may not be layout nodes because of tiling\r\n\r\n    // Position nodes, for the nodes whose id does not included in data (because they are removed from their parents and included in dummy compounds)\r\n    // use position of their ancestors or dummy ancestors\r\n    options.eles.nodes().positions(function (ele, i) {\r\n      if (typeof ele === \"number\") {\r\n        ele = i;\r\n      }\r\n      // If ele is a compound node, then its position will be defined by its children\r\n      if (!ele.isParent()) {\r\n        var theId = ele.id();\r\n        var pNode = animationData[theId];\r\n        var temp = ele;\r\n        // If pNode is undefined search until finding position data of its first ancestor (It may be dummy as well)\r\n        while (pNode == null) {\r\n          pNode = animationData[temp.data('parent')] || animationData['DummyCompound_' + temp.data('parent')];\r\n          animationData[theId] = pNode;\r\n          temp = temp.parent()[0];\r\n          if (temp == undefined) {\r\n            break;\r\n          }\r\n        }\r\n        if (pNode != null) {\r\n          return {\r\n            x: pNode.x,\r\n            y: pNode.y\r\n          };\r\n        } else {\r\n          return {\r\n            x: ele.position('x'),\r\n            y: ele.position('y')\r\n          };\r\n        }\r\n      }\r\n    });\r\n\r\n    afterReposition();\r\n\r\n    frameId = requestAnimationFrame(iterateAnimated);\r\n  };\r\n\r\n  /*\r\n  * Listen 'layoutstarted' event and start animated iteration if animate option is 'during'\r\n  */\r\n  layout.addListener('layoutstarted', function () {\r\n    if (self.options.animate === 'during') {\r\n      frameId = requestAnimationFrame(iterateAnimated);\r\n    }\r\n  });\r\n\r\n  layout.runLayout(); // Run cose layout\r\n\r\n  /*\r\n   * If animate option is not 'during' ('end' or false) perform these here (If it is 'during' similar things are already performed)\r\n   */\r\n  if (this.options.animate !== \"during\") {\r\n    self.options.eles.nodes().not(\":parent\").layoutPositions(self, self.options, getPositions); // Use layout positions to reposition the nodes it considers the options parameter\r\n    ready = false;\r\n  }\r\n\r\n  return this; // chaining\r\n};\r\n\r\n//Get the top most ones of a list of nodes\r\n_CoSELayout.prototype.getTopMostNodes = function (nodes) {\r\n  var nodesMap = {};\r\n  for (var i = 0; i < nodes.length; i++) {\r\n    nodesMap[nodes[i].id()] = true;\r\n  }\r\n  var roots = nodes.filter(function (ele, i) {\r\n    if (typeof ele === \"number\") {\r\n      ele = i;\r\n    }\r\n    var parent = ele.parent()[0];\r\n    while (parent != null) {\r\n      if (nodesMap[parent.id()]) {\r\n        return false;\r\n      }\r\n      parent = parent.parent()[0];\r\n    }\r\n    return true;\r\n  });\r\n\r\n  return roots;\r\n};\r\n\r\n_CoSELayout.prototype.processChildrenList = function (parent, children, layout) {\r\n  var size = children.length;\r\n  for (var i = 0; i < size; i++) {\r\n    var theChild = children[i];\r\n    var children_of_children = theChild.children();\r\n    var theNode;\r\n\r\n    var dimensions = theChild.layoutDimensions({\r\n      nodeDimensionsIncludeLabels: this.options.nodeDimensionsIncludeLabels\r\n    });\r\n\r\n    if (theChild.outerWidth() != null && theChild.outerHeight() != null) {\r\n      theNode = parent.add(new CoSENode(layout.graphManager, new PointD(theChild.position('x') - dimensions.w / 2, theChild.position('y') - dimensions.h / 2), new DimensionD(parseFloat(dimensions.w), parseFloat(dimensions.h))));\r\n    } else {\r\n      theNode = parent.add(new CoSENode(this.graphManager));\r\n    }\r\n    // Attach id to the layout node\r\n    theNode.id = theChild.data(\"id\");\r\n    // Attach the paddings of cy node to layout node\r\n    theNode.paddingLeft = parseInt(theChild.css('padding'));\r\n    theNode.paddingTop = parseInt(theChild.css('padding'));\r\n    theNode.paddingRight = parseInt(theChild.css('padding'));\r\n    theNode.paddingBottom = parseInt(theChild.css('padding'));\r\n\r\n    //Attach the label properties to compound if labels will be included in node dimensions  \r\n    if (this.options.nodeDimensionsIncludeLabels) {\r\n      if (theChild.isParent()) {\r\n        var labelWidth = theChild.boundingBox({ includeLabels: true, includeNodes: false }).w;\r\n        var labelHeight = theChild.boundingBox({ includeLabels: true, includeNodes: false }).h;\r\n        var labelPos = theChild.css(\"text-halign\");\r\n        theNode.labelWidth = labelWidth;\r\n        theNode.labelHeight = labelHeight;\r\n        theNode.labelPos = labelPos;\r\n      }\r\n    }\r\n\r\n    // Map the layout node\r\n    this.idToLNode[theChild.data(\"id\")] = theNode;\r\n\r\n    if (isNaN(theNode.rect.x)) {\r\n      theNode.rect.x = 0;\r\n    }\r\n\r\n    if (isNaN(theNode.rect.y)) {\r\n      theNode.rect.y = 0;\r\n    }\r\n\r\n    if (children_of_children != null && children_of_children.length > 0) {\r\n      var theNewGraph;\r\n      theNewGraph = layout.getGraphManager().add(layout.newGraph(), theNode);\r\n      this.processChildrenList(theNewGraph, children_of_children, layout);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * @brief : called on continuous layouts to stop them before they finish\r\n */\r\n_CoSELayout.prototype.stop = function () {\r\n  this.stopped = true;\r\n\r\n  return this; // chaining\r\n};\r\n\r\nvar register = function register(cytoscape) {\r\n  //  var Layout = getLayout( cytoscape );\r\n\r\n  cytoscape('layout', 'cose-bilkent', _CoSELayout);\r\n};\r\n\r\n// auto reg for globals\r\nif (typeof cytoscape !== 'undefined') {\r\n  register(cytoscape);\r\n}\r\n\r\nmodule.exports = register;\r\n\r\n/***/ })\r\n/******/ ]);\r\n});"],
  "mappings": "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",
  "names": ["module", "exports", "edge", "Point", "instance", "nodeFrom", "add", "next", "_remove", "LinkedList", "Layout", "DimensionD", "Quicksort", "NeedlemanWunsch", "layoutBase", "module", "exports", "pred1", "next", "processed", "Point", "Layout", "edge", "p_id", "parent", "i", "node", "module", "exports", "DimensionD", "defaults", "getUserOptions", "getPositions", "i", "iterateAnimated", "afterReposition", "register", "cytoscape"]
}
